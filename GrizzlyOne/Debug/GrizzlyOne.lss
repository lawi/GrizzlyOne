
GrizzlyOne.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000342  00800100  00002684  00002718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000724  00800442  00800442  00002a5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00002ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003aa0  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001455  00000000  00000000  00006830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028f2  00000000  00000000  00007c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000062c  00000000  00000000  0000a578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000903  00000000  00000000  0000aba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c9f  00000000  00000000  0000b4a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000d146  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_13>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_20>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d0 e1       	ldi	r29, 0x10	; 16
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	14 e0       	ldi	r17, 0x04	; 4
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 e8       	ldi	r30, 0x84	; 132
      84:	f6 e2       	ldi	r31, 0x26	; 38
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 34       	cpi	r26, 0x42	; 66
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	2b e0       	ldi	r18, 0x0B	; 11
      94:	a2 e4       	ldi	r26, 0x42	; 66
      96:	b4 e0       	ldi	r27, 0x04	; 4
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a6 36       	cpi	r26, 0x66	; 102
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 2a 03 	call	0x654	; 0x654 <main>
      a6:	0c 94 40 13 	jmp	0x2680	; 0x2680 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <grizzly>:
    uint8_t funcKey = 0;
    uint8_t fieldKeys = 0;
    uint8_t digit = 0;
    uint8_t i, h;
	uint8_t level = 0;
    uartPuts("\e[33m\n\r---=== Welcome to GrizzlyOneC V 0.1 ===---\n\r");
      ae:	84 e0       	ldi	r24, 0x04	; 4
      b0:	91 e0       	ldi	r25, 0x01	; 1
      b2:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
    newGame();
      b6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <newGame>
    printBoard();
      ba:	0e 94 4c 03 	call	0x698	; 0x698 <printBoard>
    moveGen();
      be:	0e 94 43 06 	call	0xc86	; 0xc86 <moveGen>
    printMovelist(0);
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	0e 94 b7 03 	call	0x76e	; 0x76e <printMovelist>
    newGame();
      c8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <newGame>
    printBoard();
      cc:	0e 94 4c 03 	call	0x698	; 0x698 <printBoard>
    uartPuts(" Stack: ");
      d0:	88 e3       	ldi	r24, 0x38	; 56
      d2:	91 e0       	ldi	r25, 0x01	; 1
      d4:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
    uartSendHexWord(SP);
      d8:	8d b7       	in	r24, 0x3d	; 61
      da:	9e b7       	in	r25, 0x3e	; 62
      dc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <uartSendHexWord>
    uartPuts(" Board: ");
      e0:	81 e4       	ldi	r24, 0x41	; 65
      e2:	91 e0       	ldi	r25, 0x01	; 1
      e4:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
    uartSendHexWord((uint16_t)board);
      e8:	8b e2       	ldi	r24, 0x2B	; 43
      ea:	96 e0       	ldi	r25, 0x06	; 6
      ec:	0e 94 53 02 	call	0x4a6	; 0x4a6 <uartSendHexWord>
    uartPuts(" hm: ");
      f0:	8a e4       	ldi	r24, 0x4A	; 74
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
    uartSendHexWord((uint16_t)hm);
      f8:	87 e4       	ldi	r24, 0x47	; 71
      fa:	94 e0       	ldi	r25, 0x04	; 4
      fc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <uartSendHexWord>
    uartPuts("\n\r");
     100:	89 e0       	ldi	r24, 0x09	; 9
     102:	94 e0       	ldi	r25, 0x04	; 4
     104:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>

void grizzly() {
    uint8_t state = 0;
    uint8_t funcKey = 0;
    uint8_t fieldKeys = 0;
    uint8_t digit = 0;
     108:	00 e0       	ldi	r16, 0x00	; 0
	}
	return key;
}

void grizzly() {
    uint8_t state = 0;
     10a:	10 e0       	ldi	r17, 0x00	; 0
    uartSendHexWord((uint16_t)board);
    uartPuts(" hm: ");
    uartSendHexWord((uint16_t)hm);
    uartPuts("\n\r");
    while(1) {
        funcKey = funKeysPressed;
     10c:	c0 91 ae 06 	lds	r28, 0x06AE	; 0x8006ae <funKeysPressed>
        funKeysPressed = 0;
     110:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <funKeysPressed>
        fieldKeys = keysPressed;
     114:	d0 91 ad 06 	lds	r29, 0x06AD	; 0x8006ad <keysPressed>
        keysPressed = 0;
     118:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <keysPressed>
        if (funcKey != 0 || fieldKeys != 0) {
     11c:	c1 11       	cpse	r28, r1
     11e:	02 c0       	rjmp	.+4      	; 0x124 <grizzly+0x76>
     120:	dd 23       	and	r29, r29
     122:	91 f0       	breq	.+36     	; 0x148 <grizzly+0x9a>
            uartPuts("Key pressed FUNC = ");
     124:	80 e5       	ldi	r24, 0x50	; 80
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
            uartSendHexByte(funcKey);
     12c:	8c 2f       	mov	r24, r28
     12e:	0e 94 39 02 	call	0x472	; 0x472 <uartSendHexByte>
            uartPuts("  FIELD = ");
     132:	84 e6       	ldi	r24, 0x64	; 100
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
            uartSendHexByte(fieldKeys);
     13a:	8d 2f       	mov	r24, r29
     13c:	0e 94 39 02 	call	0x472	; 0x472 <uartSendHexByte>
            uartPuts("\n\r");
     140:	89 e0       	ldi	r24, 0x09	; 9
     142:	94 e0       	ldi	r25, 0x04	; 4
     144:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
        }
        if (state == STATE_GREET) {
     148:	11 11       	cpse	r17, r1
     14a:	16 c0       	rjmp	.+44     	; 0x178 <grizzly+0xca>
            if (funcKey & KEY_GO) {
     14c:	c0 ff       	sbrs	r28, 0
     14e:	06 c0       	rjmp	.+12     	; 0x15c <grizzly+0xae>
                state = STATE_PLAYER;
                fillDisplay(CHR_MINUS);
     150:	8f eb       	ldi	r24, 0xBF	; 191
     152:	0e 94 85 01 	call	0x30a	; 0x30a <fillDisplay>
                digit = 0;
     156:	00 e0       	ldi	r16, 0x00	; 0
            uartSendHexByte(fieldKeys);
            uartPuts("\n\r");
        }
        if (state == STATE_GREET) {
            if (funcKey & KEY_GO) {
                state = STATE_PLAYER;
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	d8 cf       	rjmp	.-80     	; 0x10c <grizzly+0x5e>
                fillDisplay(CHR_MINUS);
                digit = 0;
            }
            else if(funcKey & 0x4) {
     15c:	c2 ff       	sbrs	r28, 2
     15e:	d6 cf       	rjmp	.-84     	; 0x10c <grizzly+0x5e>
                state = STATE_LEVEL;
                displayBuffer[0] = CHR_L;
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	f1 e0       	ldi	r31, 0x01	; 1
     164:	87 ec       	ldi	r24, 0xC7	; 199
     166:	80 83       	st	Z, r24
                displayBuffer[1] = CHR_MINUS;
     168:	8f eb       	ldi	r24, 0xBF	; 191
     16a:	81 83       	std	Z+1, r24	; 0x01
                displayBuffer[2] = CHR_0;
     16c:	80 ec       	ldi	r24, 0xC0	; 192
     16e:	82 83       	std	Z+2, r24	; 0x02
                displayBuffer[3] = CHR_1;
     170:	89 ef       	ldi	r24, 0xF9	; 249
     172:	83 83       	std	Z+3, r24	; 0x03
                state = STATE_PLAYER;
                fillDisplay(CHR_MINUS);
                digit = 0;
            }
            else if(funcKey & 0x4) {
                state = STATE_LEVEL;
     174:	14 e0       	ldi	r17, 0x04	; 4
     176:	ca cf       	rjmp	.-108    	; 0x10c <grizzly+0x5e>
                displayBuffer[1] = CHR_MINUS;
                displayBuffer[2] = CHR_0;
                displayBuffer[3] = CHR_1;
            }
        }
        else if (state == STATE_PLAYER) {
     178:	11 30       	cpi	r17, 0x01	; 1
     17a:	c9 f5       	brne	.+114    	; 0x1ee <grizzly+0x140>
            if (fieldKeys != 0 && digit < 4) {
     17c:	dd 23       	and	r29, r29
     17e:	e1 f0       	breq	.+56     	; 0x1b8 <grizzly+0x10a>
     180:	04 30       	cpi	r16, 0x04	; 4
     182:	d0 f4       	brcc	.+52     	; 0x1b8 <grizzly+0x10a>
                if (digit & 1) i = CHRSET_OFFSET_1;
     184:	00 ff       	sbrs	r16, 0
     186:	02 c0       	rjmp	.+4      	; 0x18c <grizzly+0xde>
     188:	e1 e0       	ldi	r30, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <grizzly+0xe0>
                else i = CHRSET_OFFSET_A;
     18c:	ea e0       	ldi	r30, 0x0A	; 10
                displayBuffer[3] = CHR_1;
            }
        }
        else if (state == STATE_PLAYER) {
            if (fieldKeys != 0 && digit < 4) {
                if (digit & 1) i = CHRSET_OFFSET_1;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	05 c0       	rjmp	.+10     	; 0x19c <grizzly+0xee>
                else i = CHRSET_OFFSET_A;
                for (h=0;h<8;h++) {
                    if (fieldKeys&1) break;
     192:	d0 fd       	sbrc	r29, 0
     194:	05 c0       	rjmp	.+10     	; 0x1a0 <grizzly+0xf2>
                    i++;
     196:	ef 5f       	subi	r30, 0xFF	; 255
                    fieldKeys>>=1;
     198:	d6 95       	lsr	r29
        }
        else if (state == STATE_PLAYER) {
            if (fieldKeys != 0 && digit < 4) {
                if (digit & 1) i = CHRSET_OFFSET_1;
                else i = CHRSET_OFFSET_A;
                for (h=0;h<8;h++) {
     19a:	8f 5f       	subi	r24, 0xFF	; 255
     19c:	88 30       	cpi	r24, 0x08	; 8
     19e:	c8 f3       	brcs	.-14     	; 0x192 <grizzly+0xe4>
                    if (fieldKeys&1) break;
                    i++;
                    fieldKeys>>=1;
                }
                displayBuffer[digit] = displayCharset[i];
     1a0:	80 2f       	mov	r24, r16
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	e7 57       	subi	r30, 0x77	; 119
     1a8:	fe 4f       	sbci	r31, 0xFE	; 254
     1aa:	20 81       	ld	r18, Z
     1ac:	fc 01       	movw	r30, r24
     1ae:	e0 50       	subi	r30, 0x00	; 0
     1b0:	ff 4f       	sbci	r31, 0xFF	; 255
     1b2:	20 83       	st	Z, r18
                digit++;
     1b4:	0f 5f       	subi	r16, 0xFF	; 255
     1b6:	aa cf       	rjmp	.-172    	; 0x10c <grizzly+0x5e>
            }
            else if (funcKey & KEY_CL) {
     1b8:	c1 ff       	sbrs	r28, 1
     1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <grizzly+0x118>
                fillDisplay(CHR_MINUS);
     1bc:	8f eb       	ldi	r24, 0xBF	; 191
     1be:	0e 94 85 01 	call	0x30a	; 0x30a <fillDisplay>
                digit = 0;
     1c2:	00 e0       	ldi	r16, 0x00	; 0
     1c4:	a3 cf       	rjmp	.-186    	; 0x10c <grizzly+0x5e>
            }
			else if (funcKey & KEY_GO) {
     1c6:	c0 ff       	sbrs	r28, 0
     1c8:	0b c0       	rjmp	.+22     	; 0x1e0 <grizzly+0x132>
				state = STATE_COMPMOVE;
                 displayBuffer[0] = CHR_MINUS;
     1ca:	e0 e0       	ldi	r30, 0x00	; 0
     1cc:	f1 e0       	ldi	r31, 0x01	; 1
     1ce:	8f eb       	ldi	r24, 0xBF	; 191
     1d0:	80 83       	st	Z, r24
                 displayBuffer[1] = CHR_MINUS;
     1d2:	81 83       	std	Z+1, r24	; 0x01
                 displayBuffer[2] = CHR_G;
     1d4:	82 ec       	ldi	r24, 0xC2	; 194
     1d6:	82 83       	std	Z+2, r24	; 0x02
                 displayBuffer[3] = CHR_0;
     1d8:	80 ec       	ldi	r24, 0xC0	; 192
     1da:	83 83       	std	Z+3, r24	; 0x03
            else if (funcKey & KEY_CL) {
                fillDisplay(CHR_MINUS);
                digit = 0;
            }
			else if (funcKey & KEY_GO) {
				state = STATE_COMPMOVE;
     1dc:	13 e0       	ldi	r17, 0x03	; 3
     1de:	96 cf       	rjmp	.-212    	; 0x10c <grizzly+0x5e>
                 displayBuffer[0] = CHR_MINUS;
                 displayBuffer[1] = CHR_MINUS;
                 displayBuffer[2] = CHR_G;
                 displayBuffer[3] = CHR_0;
			}
			else if (funcKey & KEY_FN) {
     1e0:	c2 ff       	sbrs	r28, 2
     1e2:	94 cf       	rjmp	.-216    	; 0x10c <grizzly+0x5e>
				state = STATE_LEVEL;
				displayShowLevel(level);
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	0e 94 44 01 	call	0x288	; 0x288 <displayShowLevel>
                 displayBuffer[1] = CHR_MINUS;
                 displayBuffer[2] = CHR_G;
                 displayBuffer[3] = CHR_0;
			}
			else if (funcKey & KEY_FN) {
				state = STATE_LEVEL;
     1ea:	14 e0       	ldi	r17, 0x04	; 4
     1ec:	8f cf       	rjmp	.-226    	; 0x10c <grizzly+0x5e>
				displayShowLevel(level);
			}
        }
		else if (state == STATE_LEVEL) {
     1ee:	14 30       	cpi	r17, 0x04	; 4
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <grizzly+0x146>
     1f2:	8c cf       	rjmp	.-232    	; 0x10c <grizzly+0x5e>

		}
        else if (STATE_COMPMOVE) {
            int16_t score = calculateMove();
     1f4:	0e 94 16 12 	call	0x242c	; 0x242c <calculateMove>
     1f8:	9c 01       	movw	r18, r24
            if (criticalError) {
     1fa:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <criticalError>
     1fe:	99 23       	and	r25, r25
     200:	71 f0       	breq	.+28     	; 0x21e <grizzly+0x170>
                uartPuts("Critical Error: ");
     202:	8f e6       	ldi	r24, 0x6F	; 111
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
                uartSendHexByte(criticalError);
     20a:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <criticalError>
     20e:	0e 94 39 02 	call	0x472	; 0x472 <uartSendHexByte>
                newLine();
     212:	0e 94 08 03 	call	0x610	; 0x610 <newLine>
                showMaterial(0);
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 b7 04 	call	0x96e	; 0x96e <showMaterial>
     21c:	1f c0       	rjmp	.+62     	; 0x25c <grizzly+0x1ae>
            }
            else if (score > -30000) {
     21e:	21 3d       	cpi	r18, 0xD1	; 209
     220:	3a 48       	sbci	r19, 0x8A	; 138
     222:	e4 f0       	brlt	.+56     	; 0x25c <grizzly+0x1ae>
                displayShowMove(hm[0].bestFrom,hm[0].bestTo);
     224:	c7 e4       	ldi	r28, 0x47	; 71
     226:	d4 e0       	ldi	r29, 0x04	; 4
     228:	6d 85       	ldd	r22, Y+13	; 0x0d
     22a:	8c 85       	ldd	r24, Y+12	; 0x0c
     22c:	0e 94 5f 01 	call	0x2be	; 0x2be <displayShowMove>
                doMove(hm[0].bestFrom,hm[0].bestTo);
     230:	6d 85       	ldd	r22, Y+13	; 0x0d
     232:	8c 85       	ldd	r24, Y+12	; 0x0c
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <doMove>
                uartPuts("Nodes = ");  uartSendDec32(nodes); newLine();
     23c:	80 e8       	ldi	r24, 0x80	; 128
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
     244:	60 91 af 06 	lds	r22, 0x06AF	; 0x8006af <nodes>
     248:	70 91 b0 06 	lds	r23, 0x06B0	; 0x8006b0 <nodes+0x1>
     24c:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <nodes+0x2>
     250:	90 91 b2 06 	lds	r25, 0x06B2	; 0x8006b2 <nodes+0x3>
     254:	0e 94 96 02 	call	0x52c	; 0x52c <uartSendDec32>
     258:	0e 94 08 03 	call	0x610	; 0x610 <newLine>
            }
            printBoard();
     25c:	0e 94 4c 03 	call	0x698	; 0x698 <printBoard>
            state = STATE_PLAYER;
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	54 cf       	rjmp	.-344    	; 0x10c <grizzly+0x5e>

00000264 <displayInit>:
const uint8_t displayCharset[18] = { CHR_0, CHR_1, CHR_2, CHR_3, CHR_4, CHR_5, CHR_6, CHR_7, CHR_8, CHR_9, CHR_A, CHR_B, CHR_C, CHR_D, CHR_E, CHR_F, CHR_G, CHR_H };


void displayInit() {

    displayDigit = 0;
     264:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <displayDigit>
    PORTC = 0xff;
     268:	8f ef       	ldi	r24, 0xFF	; 255
     26a:	88 b9       	out	0x08, r24	; 8

    PORTD = 0xec; // display digits and LEDs off
     26c:	8c ee       	ldi	r24, 0xEC	; 236
     26e:	8b b9       	out	0x0b, r24	; 11
    PORTC = 0xc2;
     270:	82 ec       	ldi	r24, 0xC2	; 194
     272:	88 b9       	out	0x08, r24	; 8
    displayBuffer[0]=CHR_G;
     274:	e0 e0       	ldi	r30, 0x00	; 0
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	80 83       	st	Z, r24
    displayBuffer[1]=CHR_R;
     27a:	8f ea       	ldi	r24, 0xAF	; 175
     27c:	81 83       	std	Z+1, r24	; 0x01
    displayBuffer[2]=CHR_0;
     27e:	80 ec       	ldi	r24, 0xC0	; 192
     280:	82 83       	std	Z+2, r24	; 0x02
    displayBuffer[3]=CHR_N;
     282:	8b ea       	ldi	r24, 0xAB	; 171
     284:	83 83       	std	Z+3, r24	; 0x03
     286:	08 95       	ret

00000288 <displayShowLevel>:

}

void displayShowLevel(uint8_t level) {
	displayBuffer[0] = CHR_L;
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	b1 e0       	ldi	r27, 0x01	; 1
     28c:	97 ec       	ldi	r25, 0xC7	; 199
     28e:	9c 93       	st	X, r25
	displayBuffer[1] = CHR_MINUS;
     290:	9f eb       	ldi	r25, 0xBF	; 191
     292:	11 96       	adiw	r26, 0x01	; 1
     294:	9c 93       	st	X, r25
     296:	11 97       	sbiw	r26, 0x01	; 1
	displayBuffer[2] = displayCharset[(level >> 4)+CHRSET_OFFSET_A];
     298:	e8 2f       	mov	r30, r24
     29a:	e2 95       	swap	r30
     29c:	ef 70       	andi	r30, 0x0F	; 15
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	ed 56       	subi	r30, 0x6D	; 109
     2a2:	fe 4f       	sbci	r31, 0xFE	; 254
     2a4:	90 81       	ld	r25, Z
     2a6:	12 96       	adiw	r26, 0x02	; 2
     2a8:	9c 93       	st	X, r25
     2aa:	12 97       	sbiw	r26, 0x02	; 2
	displayBuffer[3] = displayCharset[(level & 0xf)+CHRSET_OFFSET_1];
     2ac:	8f 70       	andi	r24, 0x0F	; 15
     2ae:	e8 2f       	mov	r30, r24
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	e6 57       	subi	r30, 0x76	; 118
     2b4:	fe 4f       	sbci	r31, 0xFE	; 254
     2b6:	80 81       	ld	r24, Z
     2b8:	13 96       	adiw	r26, 0x03	; 3
     2ba:	8c 93       	st	X, r24
     2bc:	08 95       	ret

000002be <displayShowMove>:
}

void displayShowMove(uint8_t from, uint8_t to) {
	displayBuffer[0] = displayCharset[(from & 0xf)+CHRSET_OFFSET_A];
     2be:	e8 2f       	mov	r30, r24
     2c0:	ef 70       	andi	r30, 0x0F	; 15
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	ed 56       	subi	r30, 0x6D	; 109
     2c6:	fe 4f       	sbci	r31, 0xFE	; 254
     2c8:	90 81       	ld	r25, Z
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b1 e0       	ldi	r27, 0x01	; 1
     2ce:	9c 93       	st	X, r25
	displayBuffer[1] = displayCharset[(from >> 4)+CHRSET_OFFSET_1];
     2d0:	82 95       	swap	r24
     2d2:	8f 70       	andi	r24, 0x0F	; 15
     2d4:	e8 2f       	mov	r30, r24
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	e6 57       	subi	r30, 0x76	; 118
     2da:	fe 4f       	sbci	r31, 0xFE	; 254
     2dc:	80 81       	ld	r24, Z
     2de:	11 96       	adiw	r26, 0x01	; 1
     2e0:	8c 93       	st	X, r24
     2e2:	11 97       	sbiw	r26, 0x01	; 1
	displayBuffer[2] = displayCharset[(to & 0xf)+CHRSET_OFFSET_A];
     2e4:	e6 2f       	mov	r30, r22
     2e6:	ef 70       	andi	r30, 0x0F	; 15
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	ed 56       	subi	r30, 0x6D	; 109
     2ec:	fe 4f       	sbci	r31, 0xFE	; 254
     2ee:	80 81       	ld	r24, Z
     2f0:	12 96       	adiw	r26, 0x02	; 2
     2f2:	8c 93       	st	X, r24
     2f4:	12 97       	sbiw	r26, 0x02	; 2
	displayBuffer[3] = displayCharset[(to >> 4)+CHRSET_OFFSET_1];
     2f6:	62 95       	swap	r22
     2f8:	6f 70       	andi	r22, 0x0F	; 15
     2fa:	e6 2f       	mov	r30, r22
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	e6 57       	subi	r30, 0x76	; 118
     300:	fe 4f       	sbci	r31, 0xFE	; 254
     302:	80 81       	ld	r24, Z
     304:	13 96       	adiw	r26, 0x03	; 3
     306:	8c 93       	st	X, r24
     308:	08 95       	ret

0000030a <fillDisplay>:
}

void fillDisplay(uint8_t character) {
	uint8_t i;
	for (i=0;i<4;i++)
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	06 c0       	rjmp	.+12     	; 0x31a <fillDisplay+0x10>
		displayBuffer[i] = character;
     30e:	e9 2f       	mov	r30, r25
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	e0 50       	subi	r30, 0x00	; 0
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	80 83       	st	Z, r24
	displayBuffer[3] = displayCharset[(to >> 4)+CHRSET_OFFSET_1];
}

void fillDisplay(uint8_t character) {
	uint8_t i;
	for (i=0;i<4;i++)
     318:	9f 5f       	subi	r25, 0xFF	; 255
     31a:	94 30       	cpi	r25, 0x04	; 4
     31c:	c0 f3       	brcs	.-16     	; 0x30e <fillDisplay+0x4>
		displayBuffer[i] = character;
}
     31e:	08 95       	ret

00000320 <timerInit>:
volatile uint8_t timerRefreshTimer;
volatile uint8_t timerRefreshNow;
#define TIMER_REFRESH_CYCLES 4
void timerInit() {

    timerUptime = 2;
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__data_end>
    timerRefreshTimer = 0;
     326:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <timerRefreshTimer>
    timerRefreshNow = 0;
     32a:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <timerRefreshNow>
    keysPressed = 0;
     32e:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <keysPressed>
    funKeysPressed = 0;
     332:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <funKeysPressed>

    TCCR1A = 0x00;
     336:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    TCCR1B = 0x0d; // set prescaler to 1024 CPU Clk / 1024 = 20 Mhz /1024  19531,25 kHz
     33a:	9d e0       	ldi	r25, 0x0D	; 13
     33c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    OCR1AH = 0;    // 20 ms = 391
     340:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    OCR1AL = 78;
     344:	9e e4       	ldi	r25, 0x4E	; 78
     346:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    TIMSK1 = 0x02;
     34a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
    //PORTD ^= 0x08;
    timerRefreshTimer = TIMER_REFRESH_CYCLES;
     34e:	84 e0       	ldi	r24, 0x04	; 4
     350:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <timerRefreshTimer>
     354:	08 95       	ret

00000356 <__vector_13>:
}

ISR(TIMER1_COMPA_vect) {
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	8f 93       	push	r24
     368:	9f 93       	push	r25
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31

    uint8_t tmp1, tmp2;
    tmp1 = displayBuffer[displayDigit];
     36e:	e0 91 b3 06 	lds	r30, 0x06B3	; 0x8006b3 <displayDigit>
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	e0 50       	subi	r30, 0x00	; 0
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	40 81       	ld	r20, Z
    tmp2 = 1<<(displayDigit+4);
     37a:	20 91 b3 06 	lds	r18, 0x06B3	; 0x8006b3 <displayDigit>
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	2c 5f       	subi	r18, 0xFC	; 252
     382:	3f 4f       	sbci	r19, 0xFF	; 255
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	02 c0       	rjmp	.+4      	; 0x38e <__vector_13+0x38>
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	2a 95       	dec	r18
     390:	e2 f7       	brpl	.-8      	; 0x38a <__vector_13+0x34>
    tmp2 ^= 0xff;
     392:	80 95       	com	r24
    PORTD = tmp2;
     394:	8b b9       	out	0x0b, r24	; 11
    PORTC = tmp1;
     396:	48 b9       	out	0x08, r20	; 8
    displayDigit++;
     398:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <displayDigit>
     39c:	8f 5f       	subi	r24, 0xFF	; 255
     39e:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <displayDigit>
    if (displayDigit>=4) displayDigit = 0;
     3a2:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <displayDigit>
     3a6:	84 30       	cpi	r24, 0x04	; 4
     3a8:	10 f0       	brcs	.+4      	; 0x3ae <__vector_13+0x58>
     3aa:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <displayDigit>

    if (timerRefreshTimer != 0) {
     3ae:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <timerRefreshTimer>
     3b2:	88 23       	and	r24, r24
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <__vector_13+0x6c>
        timerRefreshTimer--;
     3b6:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <timerRefreshTimer>
     3ba:	81 50       	subi	r24, 0x01	; 1
     3bc:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <timerRefreshTimer>
     3c0:	2c c0       	rjmp	.+88     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
    }
    else {
       timerRefreshNow = 1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <timerRefreshNow>
       timerRefreshTimer = TIMER_REFRESH_CYCLES;
     3c8:	84 e0       	ldi	r24, 0x04	; 4
     3ca:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <timerRefreshTimer>

       // Keyboard PORTA a1 .. h8 (eight buttons)
       tmp1 = PINA;
     3ce:	90 b1       	in	r25, 0x00	; 0
       tmp2 = PINB & 0x07;
     3d0:	83 b1       	in	r24, 0x03	; 3
     3d2:	87 70       	andi	r24, 0x07	; 7
       if (timerUptime == 0) {
     3d4:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <__data_end>
     3d8:	21 11       	cpse	r18, r1
     3da:	12 c0       	rjmp	.+36     	; 0x400 <__LOCK_REGION_LENGTH__>
            if (tmp1!=0xff) {
     3dc:	9f 3f       	cpi	r25, 0xFF	; 255
     3de:	31 f0       	breq	.+12     	; 0x3ec <__vector_13+0x96>
                keysPressed = tmp1^0xff; // Save Key for mainloop
     3e0:	90 95       	com	r25
     3e2:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <keysPressed>
                timerUptime = 2;  // now wait for two cycle
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <__data_end>
            }
            if (tmp2 != 0x07) {
     3ec:	87 30       	cpi	r24, 0x07	; 7
     3ee:	a9 f0       	breq	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
                funKeysPressed = tmp2^0x07; // Save Func Key for mainloop
     3f0:	97 e0       	ldi	r25, 0x07	; 7
     3f2:	89 27       	eor	r24, r25
     3f4:	80 93 ae 06 	sts	0x06AE, r24	; 0x8006ae <funKeysPressed>
                timerUptime = 2;  // now wait for two cycle
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__data_end>
     3fe:	0d c0       	rjmp	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
            }
       }
       else if (tmp1 == 0xff && tmp2 == 0x07) timerUptime--;
     400:	9f 3f       	cpi	r25, 0xFF	; 255
     402:	41 f4       	brne	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     404:	87 30       	cpi	r24, 0x07	; 7
     406:	31 f4       	brne	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     408:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <__data_end>
     40c:	81 50       	subi	r24, 0x01	; 1
     40e:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__data_end>
     412:	03 c0       	rjmp	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
       else timerUptime=2;
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__data_end>
        //PORTD ^= 0x0c;
    }

}
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	4f 91       	pop	r20
     424:	3f 91       	pop	r19
     426:	2f 91       	pop	r18
     428:	0f 90       	pop	r0
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	0f 90       	pop	r0
     42e:	1f 90       	pop	r1
     430:	18 95       	reti

00000432 <uartInit>:
 */
#include <avr/io.h>
#include <avr/interrupt.h>

void uartInit(void) {
    UBRR0H = 0;     // 115200 Baud 8N1
     432:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    UBRR0L = 10;  // 9600 = 0x81  115200 = 10
     436:	8a e0       	ldi	r24, 0x0A	; 10
     438:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     43c:	88 e9       	ldi	r24, 0x98	; 152
     43e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f00c1>
    UCSR0C = (3<<UCSZ00);  // 8 bit
     442:	86 e0       	ldi	r24, 0x06	; 6
     444:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
     448:	08 95       	ret

0000044a <uartPutc>:
}

void uartPutc(uint8_t c) {
    while (!(UCSR0A & (1<<UDRE0)));
     44a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
     44e:	95 ff       	sbrs	r25, 5
     450:	fc cf       	rjmp	.-8      	; 0x44a <uartPutc>
    UDR0 = c;
     452:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
     456:	08 95       	ret

00000458 <uartPuts>:
}

void uartPuts (char *s) {
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
    while (*s) {
     45e:	03 c0       	rjmp	.+6      	; 0x466 <uartPuts+0xe>
        uartPutc((uint8_t)*s);
     460:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
        s++;
     464:	21 96       	adiw	r28, 0x01	; 1
    while (!(UCSR0A & (1<<UDRE0)));
    UDR0 = c;
}

void uartPuts (char *s) {
    while (*s) {
     466:	88 81       	ld	r24, Y
     468:	81 11       	cpse	r24, r1
     46a:	fa cf       	rjmp	.-12     	; 0x460 <uartPuts+0x8>
        uartPutc((uint8_t)*s);
        s++;
    }
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <uartSendHexByte>:

void uartSendHexByte(uint8_t b) {
     472:	cf 93       	push	r28
     474:	c8 2f       	mov	r28, r24
    uint8_t a = b>>4;
     476:	82 95       	swap	r24
     478:	8f 70       	andi	r24, 0x0F	; 15
    if (a>9) uartPutc(a+'A'-10);
     47a:	8a 30       	cpi	r24, 0x0A	; 10
     47c:	20 f0       	brcs	.+8      	; 0x486 <uartSendHexByte+0x14>
     47e:	89 5c       	subi	r24, 0xC9	; 201
     480:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
     484:	03 c0       	rjmp	.+6      	; 0x48c <uartSendHexByte+0x1a>
    else uartPutc(a+'0');
     486:	80 5d       	subi	r24, 0xD0	; 208
     488:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
    a = b&0xf;
     48c:	8c 2f       	mov	r24, r28
     48e:	8f 70       	andi	r24, 0x0F	; 15
    if (a>9) uartPutc(a+'A'-10);
     490:	8a 30       	cpi	r24, 0x0A	; 10
     492:	20 f0       	brcs	.+8      	; 0x49c <uartSendHexByte+0x2a>
     494:	89 5c       	subi	r24, 0xC9	; 201
     496:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <uartSendHexByte+0x30>
    else uartPutc(a+'0');
     49c:	80 5d       	subi	r24, 0xD0	; 208
     49e:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
}
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <uartSendHexWord>:

void uartSendHexWord(uint16_t w) {
     4a6:	cf 93       	push	r28
     4a8:	c8 2f       	mov	r28, r24
    uartSendHexByte((uint8_t) (w>>8));
     4aa:	89 2f       	mov	r24, r25
     4ac:	0e 94 39 02 	call	0x472	; 0x472 <uartSendHexByte>
    uartSendHexByte((uint8_t) (w&0xff));
     4b0:	8c 2f       	mov	r24, r28
     4b2:	0e 94 39 02 	call	0x472	; 0x472 <uartSendHexByte>
}
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <uartSendDec16>:

void uartSendDec16(int16_t w) {
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	7c 01       	movw	r14, r24
    if (w<0) {
     4c6:	99 23       	and	r25, r25
     4c8:	34 f4       	brge	.+12     	; 0x4d6 <uartSendDec16+0x1c>
        uartPutc('-');
     4ca:	8d e2       	ldi	r24, 0x2D	; 45
     4cc:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
        w=-w;
     4d0:	f1 94       	neg	r15
     4d2:	e1 94       	neg	r14
     4d4:	f1 08       	sbc	r15, r1
    uint8_t lz = 0;
    int16_t digits = 10000;
    while(digits>=1) {
        uint8_t digit = w/digits;
        if (digit || lz || digits == 1) {
            lz = 1;
     4d6:	c0 e1       	ldi	r28, 0x10	; 16
     4d8:	d7 e2       	ldi	r29, 0x27	; 39
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	1e c0       	rjmp	.+60     	; 0x51a <uartSendDec16+0x60>
        w=-w;
    }
    uint8_t lz = 0;
    int16_t digits = 10000;
    while(digits>=1) {
        uint8_t digit = w/digits;
     4de:	c7 01       	movw	r24, r14
     4e0:	be 01       	movw	r22, r28
     4e2:	0e 94 bd 12 	call	0x257a	; 0x257a <__divmodhi4>
     4e6:	16 2f       	mov	r17, r22
        if (digit || lz || digits == 1) {
     4e8:	61 11       	cpse	r22, r1
     4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <uartSendDec16+0x3c>
     4ec:	21 11       	cpse	r18, r1
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <uartSendDec16+0x3c>
     4f0:	c1 30       	cpi	r28, 0x01	; 1
     4f2:	d1 05       	cpc	r29, r1
     4f4:	29 f4       	brne	.+10     	; 0x500 <uartSendDec16+0x46>
            lz = 1;
            uartPutc(digit+'0');
     4f6:	80 e3       	ldi	r24, 0x30	; 48
     4f8:	81 0f       	add	r24, r17
     4fa:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
    uint8_t lz = 0;
    int16_t digits = 10000;
    while(digits>=1) {
        uint8_t digit = w/digits;
        if (digit || lz || digits == 1) {
            lz = 1;
     4fe:	21 e0       	ldi	r18, 0x01	; 1
            uartPutc(digit+'0');
        }
        w = w - digit * digits;
     500:	1c 9f       	mul	r17, r28
     502:	c0 01       	movw	r24, r0
     504:	1d 9f       	mul	r17, r29
     506:	90 0d       	add	r25, r0
     508:	11 24       	eor	r1, r1
     50a:	e8 1a       	sub	r14, r24
     50c:	f9 0a       	sbc	r15, r25
        digits /= 10;
     50e:	ce 01       	movw	r24, r28
     510:	6a e0       	ldi	r22, 0x0A	; 10
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	0e 94 bd 12 	call	0x257a	; 0x257a <__divmodhi4>
     518:	eb 01       	movw	r28, r22
        uartPutc('-');
        w=-w;
    }
    uint8_t lz = 0;
    int16_t digits = 10000;
    while(digits>=1) {
     51a:	1c 16       	cp	r1, r28
     51c:	1d 06       	cpc	r1, r29
     51e:	fc f2       	brlt	.-66     	; 0x4de <uartSendDec16+0x24>
            uartPutc(digit+'0');
        }
        w = w - digit * digits;
        digits /= 10;
    }
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	08 95       	ret

0000052c <uartSendDec32>:


void uartSendDec32(int32_t w) {
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	4b 01       	movw	r8, r22
     542:	5c 01       	movw	r10, r24
    if (w<0) {
     544:	99 23       	and	r25, r25
     546:	5c f4       	brge	.+22     	; 0x55e <uartSendDec32+0x32>
        uartPutc('-');
     548:	8d e2       	ldi	r24, 0x2D	; 45
     54a:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
        w=-w;
     54e:	b0 94       	com	r11
     550:	a0 94       	com	r10
     552:	90 94       	com	r9
     554:	80 94       	com	r8
     556:	81 1c       	adc	r8, r1
     558:	91 1c       	adc	r9, r1
     55a:	a1 1c       	adc	r10, r1
     55c:	b1 1c       	adc	r11, r1
    uint8_t lz = 0;
    int32_t digits = 1000000000L;
    while(digits>=1) {
        uint8_t digit = w/digits;
        if (digit || lz || digits == 1) {
            lz = 1;
     55e:	0f 2e       	mov	r0, r31
     560:	c1 2c       	mov	r12, r1
     562:	fa ec       	ldi	r31, 0xCA	; 202
     564:	df 2e       	mov	r13, r31
     566:	fa e9       	ldi	r31, 0x9A	; 154
     568:	ef 2e       	mov	r14, r31
     56a:	fb e3       	ldi	r31, 0x3B	; 59
     56c:	ff 2e       	mov	r15, r31
     56e:	f0 2d       	mov	r31, r0
     570:	d0 e0       	ldi	r29, 0x00	; 0
     572:	2a c0       	rjmp	.+84     	; 0x5c8 <uartSendDec32+0x9c>
        w=-w;
    }
    uint8_t lz = 0;
    int32_t digits = 1000000000L;
    while(digits>=1) {
        uint8_t digit = w/digits;
     574:	c5 01       	movw	r24, r10
     576:	b4 01       	movw	r22, r8
     578:	a7 01       	movw	r20, r14
     57a:	96 01       	movw	r18, r12
     57c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__divmodsi4>
     580:	c2 2f       	mov	r28, r18
        if (digit || lz || digits == 1) {
     582:	21 11       	cpse	r18, r1
     584:	08 c0       	rjmp	.+16     	; 0x596 <uartSendDec32+0x6a>
     586:	d1 11       	cpse	r29, r1
     588:	06 c0       	rjmp	.+12     	; 0x596 <uartSendDec32+0x6a>
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	c8 16       	cp	r12, r24
     58e:	d1 04       	cpc	r13, r1
     590:	e1 04       	cpc	r14, r1
     592:	f1 04       	cpc	r15, r1
     594:	29 f4       	brne	.+10     	; 0x5a0 <uartSendDec32+0x74>
            lz = 1;
            uartPutc(digit+'0');
     596:	80 e3       	ldi	r24, 0x30	; 48
     598:	8c 0f       	add	r24, r28
     59a:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
    uint8_t lz = 0;
    int32_t digits = 1000000000L;
    while(digits>=1) {
        uint8_t digit = w/digits;
        if (digit || lz || digits == 1) {
            lz = 1;
     59e:	d1 e0       	ldi	r29, 0x01	; 1
            uartPutc(digit+'0');
        }
        w = w - digit * digits;
     5a0:	ac 2f       	mov	r26, r28
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	a7 01       	movw	r20, r14
     5a6:	96 01       	movw	r18, r12
     5a8:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__muluhisi3>
     5ac:	86 1a       	sub	r8, r22
     5ae:	97 0a       	sbc	r9, r23
     5b0:	a8 0a       	sbc	r10, r24
     5b2:	b9 0a       	sbc	r11, r25
        digits /= 10;
     5b4:	c7 01       	movw	r24, r14
     5b6:	b6 01       	movw	r22, r12
     5b8:	2a e0       	ldi	r18, 0x0A	; 10
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__divmodsi4>
     5c4:	69 01       	movw	r12, r18
     5c6:	7a 01       	movw	r14, r20
        uartPutc('-');
        w=-w;
    }
    uint8_t lz = 0;
    int32_t digits = 1000000000L;
    while(digits>=1) {
     5c8:	1c 14       	cp	r1, r12
     5ca:	1d 04       	cpc	r1, r13
     5cc:	1e 04       	cpc	r1, r14
     5ce:	1f 04       	cpc	r1, r15
     5d0:	8c f2       	brlt	.-94     	; 0x574 <uartSendDec32+0x48>
            uartPutc(digit+'0');
        }
        w = w - digit * digits;
        digits /= 10;
    }
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	bf 90       	pop	r11
     5e0:	af 90       	pop	r10
     5e2:	9f 90       	pop	r9
     5e4:	8f 90       	pop	r8
     5e6:	08 95       	ret

000005e8 <setColor>:
void setColor (uint8_t color) {
     5e8:	cf 93       	push	r28
     5ea:	c8 2f       	mov	r28, r24
    uartPutc(27);
     5ec:	8b e1       	ldi	r24, 0x1B	; 27
     5ee:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
    uartPutc('[');
     5f2:	8b e5       	ldi	r24, 0x5B	; 91
     5f4:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
    uartPutc('3');
     5f8:	83 e3       	ldi	r24, 0x33	; 51
     5fa:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
    uartPutc('0'+color);
     5fe:	80 e3       	ldi	r24, 0x30	; 48
     600:	8c 0f       	add	r24, r28
     602:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
    uartPutc('m');
     606:	8d e6       	ldi	r24, 0x6D	; 109
     608:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
}
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <newLine>:

void newLine() {
    uartPuts("\r\n");
     610:	8b e9       	ldi	r24, 0x9B	; 155
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
     618:	08 95       	ret

0000061a <__vector_20>:
}

ISR(USART0_RX_vect) {
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	0f 92       	push	r0
     622:	11 24       	eor	r1, r1

     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <systemInit>:
#include "gztimer.h"
#include "gzdisplay.h"
#include "grizzly.h"

void systemInit() {
    DDRC = 0xff;
     62e:	8f ef       	ldi	r24, 0xFF	; 255
     630:	87 b9       	out	0x07, r24	; 7
    DDRB = 0x08;
     632:	98 e0       	ldi	r25, 0x08	; 8
     634:	94 b9       	out	0x04, r25	; 4
    DDRD = 0xfc;
     636:	9c ef       	ldi	r25, 0xFC	; 252
     638:	9a b9       	out	0x0a, r25	; 10
    DDRA = 0x00;
     63a:	11 b8       	out	0x01, r1	; 1
    PORTA = 0xff; // Pull up
     63c:	82 b9       	out	0x02, r24	; 2
    PORTB = 0x07;
     63e:	97 e0       	ldi	r25, 0x07	; 7
     640:	95 b9       	out	0x05, r25	; 5
    PORTD = 0xff;
     642:	8b b9       	out	0x0b, r24	; 11
 	uartInit();
     644:	0e 94 19 02 	call	0x432	; 0x432 <uartInit>
 	displayInit();
     648:	0e 94 32 01 	call	0x264	; 0x264 <displayInit>
 	timerInit();
     64c:	0e 94 90 01 	call	0x320	; 0x320 <timerInit>
 	sei();
     650:	78 94       	sei
     652:	08 95       	ret

00000654 <main>:
}

int main(void)
{
    SP = RAMEND-4;
     654:	8b ef       	ldi	r24, 0xFB	; 251
     656:	90 e1       	ldi	r25, 0x10	; 16
     658:	9e bf       	out	0x3e, r25	; 62
     65a:	8d bf       	out	0x3d, r24	; 61
    systemInit();
     65c:	0e 94 17 03 	call	0x62e	; 0x62e <systemInit>

    grizzly();
     660:	0e 94 57 00 	call	0xae	; 0xae <grizzly>
     664:	ff cf       	rjmp	.-2      	; 0x664 <main+0x10>

00000666 <printMove>:
void dbgPutc(uint8_t c) { uartPutc(c); }
void dbgSetColor (uint8_t color) { setColor(color); }
void dbgSendHexByte(uint8_t b) { uartSendHexByte(b); }
void dbgSendHexWord(uint16_t w) { uartSendHexWord(w); }
void dbgSendDec16(int16_t w) { uartSendDec16(w); }
void dbgSendDec32(int32_t w) { uartSendDec32(w); }
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	d8 2f       	mov	r29, r24
     66c:	c6 2f       	mov	r28, r22
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     674:	8d 2f       	mov	r24, r29
     676:	0e 94 39 02 	call	0x472	; 0x472 <uartSendHexByte>
     67a:	8d e2       	ldi	r24, 0x2D	; 45
     67c:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
     680:	8c 2f       	mov	r24, r28
     682:	0e 94 39 02 	call	0x472	; 0x472 <uartSendHexByte>
     686:	80 e2       	ldi	r24, 0x20	; 32
     688:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
     68c:	87 e0       	ldi	r24, 0x07	; 7
     68e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <printBoard>:
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	86 e0       	ldi	r24, 0x06	; 6
     6a0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     6a4:	8f ea       	ldi	r24, 0xAF	; 175
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
     6ac:	d0 e7       	ldi	r29, 0x70	; 112
     6ae:	4f c0       	rjmp	.+158    	; 0x74e <printBoard+0xb6>
     6b0:	ed 2f       	mov	r30, r29
     6b2:	0d 2e       	mov	r0, r29
     6b4:	00 0c       	add	r0, r0
     6b6:	ff 0b       	sbc	r31, r31
     6b8:	ec 0f       	add	r30, r28
     6ba:	f1 1d       	adc	r31, r1
     6bc:	c7 fd       	sbrc	r28, 7
     6be:	fa 95       	dec	r31
     6c0:	e5 5d       	subi	r30, 0xD5	; 213
     6c2:	f9 4f       	sbci	r31, 0xF9	; 249
     6c4:	e0 81       	ld	r30, Z
     6c6:	8e 2f       	mov	r24, r30
     6c8:	80 7e       	andi	r24, 0xE0	; 224
     6ca:	29 f0       	breq	.+10     	; 0x6d6 <printBoard+0x3e>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     6d2:	13 e2       	ldi	r17, 0x23	; 35
     6d4:	2c c0       	rjmp	.+88     	; 0x72e <printBoard+0x96>
     6d6:	e3 ff       	sbrs	r30, 3
     6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <printBoard+0x5e>
     6da:	e7 70       	andi	r30, 0x07	; 7
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	eb 53       	subi	r30, 0x3B	; 59
     6e0:	fe 4f       	sbci	r31, 0xFE	; 254
     6e2:	10 81       	ld	r17, Z
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     6ea:	18 35       	cpi	r17, 0x58	; 88
     6ec:	01 f5       	brne	.+64     	; 0x72e <printBoard+0x96>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     6f4:	1c c0       	rjmp	.+56     	; 0x72e <printBoard+0x96>
     6f6:	e4 ff       	sbrs	r30, 4
     6f8:	0f c0       	rjmp	.+30     	; 0x718 <printBoard+0x80>
     6fa:	e7 70       	andi	r30, 0x07	; 7
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	eb 53       	subi	r30, 0x3B	; 59
     700:	fe 4f       	sbci	r31, 0xFE	; 254
     702:	10 81       	ld	r17, Z
     704:	10 5e       	subi	r17, 0xE0	; 224
     706:	85 e0       	ldi	r24, 0x05	; 5
     708:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     70c:	18 37       	cpi	r17, 0x78	; 120
     70e:	79 f4       	brne	.+30     	; 0x72e <printBoard+0x96>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     716:	0b c0       	rjmp	.+22     	; 0x72e <printBoard+0x96>
     718:	e1 11       	cpse	r30, r1
     71a:	05 c0       	rjmp	.+10     	; 0x726 <printBoard+0x8e>
     71c:	87 e0       	ldi	r24, 0x07	; 7
     71e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     722:	1e e2       	ldi	r17, 0x2E	; 46
     724:	04 c0       	rjmp	.+8      	; 0x72e <printBoard+0x96>
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     72c:	1f e3       	ldi	r17, 0x3F	; 63
     72e:	81 2f       	mov	r24, r17
     730:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
     734:	cf 5f       	subi	r28, 0xFF	; 255
     736:	01 c0       	rjmp	.+2      	; 0x73a <printBoard+0xa2>
     738:	c0 e0       	ldi	r28, 0x00	; 0
     73a:	c8 30       	cpi	r28, 0x08	; 8
     73c:	0c f4       	brge	.+2      	; 0x740 <printBoard+0xa8>
     73e:	b8 cf       	rjmp	.-144    	; 0x6b0 <printBoard+0x18>
     740:	8a e0       	ldi	r24, 0x0A	; 10
     742:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
     746:	8d e0       	ldi	r24, 0x0D	; 13
     748:	0e 94 25 02 	call	0x44a	; 0x44a <uartPutc>
     74c:	d0 51       	subi	r29, 0x10	; 16
     74e:	dd 23       	and	r29, r29
     750:	9c f7       	brge	.-26     	; 0x738 <printBoard+0xa0>
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     758:	8f ea       	ldi	r24, 0xAF	; 175
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
     760:	87 e0       	ldi	r24, 0x07	; 7
     762:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	08 95       	ret

0000076e <printMovelist>:
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	e8 2e       	mov	r14, r24
     77c:	f1 2c       	mov	r15, r1
     77e:	86 e1       	ldi	r24, 0x16	; 22
     780:	8e 9d       	mul	r24, r14
     782:	80 01       	movw	r16, r0
     784:	8f 9d       	mul	r24, r15
     786:	10 0d       	add	r17, r0
     788:	11 24       	eor	r1, r1
     78a:	09 5b       	subi	r16, 0xB9	; 185
     78c:	1b 4f       	sbci	r17, 0xFB	; 251
     78e:	f8 01       	movw	r30, r16
     790:	c0 81       	ld	r28, Z
     792:	d1 81       	ldd	r29, Z+1	; 0x01
     794:	8e e9       	ldi	r24, 0x9E	; 158
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
     79c:	f8 01       	movw	r30, r16
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <uartSendHexWord>
     7a6:	8c ea       	ldi	r24, 0xAC	; 172
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
     7ae:	00 e0       	ldi	r16, 0x00	; 0
     7b0:	10 e0       	ldi	r17, 0x00	; 0
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <printMovelist+0x50>
     7b4:	0e 94 33 03 	call	0x666	; 0x666 <printMove>
     7b8:	24 96       	adiw	r28, 0x04	; 4
     7ba:	0f 5f       	subi	r16, 0xFF	; 255
     7bc:	1f 4f       	sbci	r17, 0xFF	; 255
     7be:	c7 01       	movw	r24, r14
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	26 e1       	ldi	r18, 0x16	; 22
     7c4:	28 9f       	mul	r18, r24
     7c6:	f0 01       	movw	r30, r0
     7c8:	29 9f       	mul	r18, r25
     7ca:	f0 0d       	add	r31, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	e9 5b       	subi	r30, 0xB9	; 185
     7d0:	fb 4f       	sbci	r31, 0xFB	; 251
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	c8 17       	cp	r28, r24
     7d8:	d9 07       	cpc	r29, r25
     7da:	30 f4       	brcc	.+12     	; 0x7e8 <printMovelist+0x7a>
     7dc:	88 81       	ld	r24, Y
     7de:	8f 3f       	cpi	r24, 0xFF	; 255
     7e0:	19 f0       	breq	.+6      	; 0x7e8 <printMovelist+0x7a>
     7e2:	69 81       	ldd	r22, Y+1	; 0x01
     7e4:	6f 3f       	cpi	r22, 0xFF	; 255
     7e6:	31 f7       	brne	.-52     	; 0x7b4 <printMovelist+0x46>
     7e8:	8a eb       	ldi	r24, 0xBA	; 186
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uartSendDec16>
     7f6:	0e 94 08 03 	call	0x610	; 0x610 <newLine>
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	08 95       	ret

00000808 <dbgPuts>:
     808:	0e 94 2c 02 	call	0x458	; 0x458 <uartPuts>
     80c:	08 95       	ret

0000080e <dbgSetColor>:
     80e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setColor>
     812:	08 95       	ret

00000814 <dbgSendHexByte>:
     814:	0e 94 39 02 	call	0x472	; 0x472 <uartSendHexByte>
     818:	08 95       	ret

0000081a <dbgSendDec16>:
     81a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uartSendDec16>
     81e:	08 95       	ret

00000820 <dbgNewLine>:
void dbgNewLine() { newLine(); }
     820:	0e 94 08 03 	call	0x610	; 0x610 <newLine>
     824:	08 95       	ret

00000826 <isAttacked>:
                return 0;
        }
    }

    return 1;
}
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	60 31       	cpi	r22, 0x10	; 16
     82c:	09 f5       	brne	.+66     	; 0x870 <isAttacked+0x4a>
     82e:	ef e0       	ldi	r30, 0x0F	; 15
     830:	e8 0f       	add	r30, r24
     832:	9e 2f       	mov	r25, r30
     834:	98 78       	andi	r25, 0x88	; 136
     836:	39 f4       	brne	.+14     	; 0x846 <isAttacked+0x20>
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	e5 5d       	subi	r30, 0xD5	; 213
     83c:	f9 4f       	sbci	r31, 0xF9	; 249
     83e:	90 81       	ld	r25, Z
     840:	91 31       	cpi	r25, 0x11	; 17
     842:	09 f4       	brne	.+2      	; 0x846 <isAttacked+0x20>
     844:	77 c0       	rjmp	.+238    	; 0x934 <isAttacked+0x10e>
     846:	e1 e1       	ldi	r30, 0x11	; 17
     848:	e8 0f       	add	r30, r24
     84a:	9e 2f       	mov	r25, r30
     84c:	98 78       	andi	r25, 0x88	; 136
     84e:	51 f4       	brne	.+20     	; 0x864 <isAttacked+0x3e>
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	e5 5d       	subi	r30, 0xD5	; 213
     854:	f9 4f       	sbci	r31, 0xF9	; 249
     856:	90 81       	ld	r25, Z
     858:	91 31       	cpi	r25, 0x11	; 17
     85a:	09 f4       	brne	.+2      	; 0x85e <isAttacked+0x38>
     85c:	6d c0       	rjmp	.+218    	; 0x938 <isAttacked+0x112>
     85e:	ad ee       	ldi	r26, 0xED	; 237
     860:	b1 e0       	ldi	r27, 0x01	; 1
     862:	2f c0       	rjmp	.+94     	; 0x8c2 <isAttacked+0x9c>
     864:	ad ee       	ldi	r26, 0xED	; 237
     866:	b1 e0       	ldi	r27, 0x01	; 1
     868:	2c c0       	rjmp	.+88     	; 0x8c2 <isAttacked+0x9c>
     86a:	ad ee       	ldi	r26, 0xED	; 237
     86c:	b1 e0       	ldi	r27, 0x01	; 1
     86e:	29 c0       	rjmp	.+82     	; 0x8c2 <isAttacked+0x9c>
     870:	ef ee       	ldi	r30, 0xEF	; 239
     872:	e8 0f       	add	r30, r24
     874:	9e 2f       	mov	r25, r30
     876:	98 78       	andi	r25, 0x88	; 136
     878:	39 f4       	brne	.+14     	; 0x888 <isAttacked+0x62>
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	e5 5d       	subi	r30, 0xD5	; 213
     87e:	f9 4f       	sbci	r31, 0xF9	; 249
     880:	90 81       	ld	r25, Z
     882:	99 30       	cpi	r25, 0x09	; 9
     884:	09 f4       	brne	.+2      	; 0x888 <isAttacked+0x62>
     886:	5a c0       	rjmp	.+180    	; 0x93c <isAttacked+0x116>
     888:	e1 ef       	ldi	r30, 0xF1	; 241
     88a:	e8 0f       	add	r30, r24
     88c:	9e 2f       	mov	r25, r30
     88e:	98 78       	andi	r25, 0x88	; 136
     890:	61 f7       	brne	.-40     	; 0x86a <isAttacked+0x44>
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	e5 5d       	subi	r30, 0xD5	; 213
     896:	f9 4f       	sbci	r31, 0xF9	; 249
     898:	90 81       	ld	r25, Z
     89a:	99 30       	cpi	r25, 0x09	; 9
     89c:	09 f4       	brne	.+2      	; 0x8a0 <isAttacked+0x7a>
     89e:	50 c0       	rjmp	.+160    	; 0x940 <isAttacked+0x11a>
     8a0:	ad ee       	ldi	r26, 0xED	; 237
     8a2:	b1 e0       	ldi	r27, 0x01	; 1
     8a4:	0e c0       	rjmp	.+28     	; 0x8c2 <isAttacked+0x9c>
     8a6:	e8 0f       	add	r30, r24
     8a8:	9e 2f       	mov	r25, r30
     8aa:	98 78       	andi	r25, 0x88	; 136
     8ac:	49 f4       	brne	.+18     	; 0x8c0 <isAttacked+0x9a>
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	e5 5d       	subi	r30, 0xD5	; 213
     8b2:	f9 4f       	sbci	r31, 0xF9	; 249
     8b4:	20 81       	ld	r18, Z
     8b6:	96 2f       	mov	r25, r22
     8b8:	92 60       	ori	r25, 0x02	; 2
     8ba:	29 17       	cp	r18, r25
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <isAttacked+0x9a>
     8be:	42 c0       	rjmp	.+132    	; 0x944 <isAttacked+0x11e>
     8c0:	11 96       	adiw	r26, 0x01	; 1
     8c2:	ec 91       	ld	r30, X
     8c4:	e1 11       	cpse	r30, r1
     8c6:	ef cf       	rjmp	.-34     	; 0x8a6 <isAttacked+0x80>
     8c8:	46 2f       	mov	r20, r22
     8ca:	44 60       	ori	r20, 0x04	; 4
     8cc:	cd ec       	ldi	r28, 0xCD	; 205
     8ce:	d1 e0       	ldi	r29, 0x01	; 1
     8d0:	2c c0       	rjmp	.+88     	; 0x92a <isAttacked+0x104>
     8d2:	3e 2f       	mov	r19, r30
     8d4:	e8 0f       	add	r30, r24
     8d6:	9e 2f       	mov	r25, r30
     8d8:	98 78       	andi	r25, 0x88	; 136
     8da:	09 f5       	brne	.+66     	; 0x91e <isAttacked+0xf8>
     8dc:	ae 2f       	mov	r26, r30
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	a5 5d       	subi	r26, 0xD5	; 213
     8e2:	b9 4f       	sbci	r27, 0xF9	; 249
     8e4:	2c 91       	ld	r18, X
     8e6:	96 2f       	mov	r25, r22
     8e8:	96 60       	ori	r25, 0x06	; 6
     8ea:	29 13       	cpse	r18, r25
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <isAttacked+0xcc>
     8ee:	2c c0       	rjmp	.+88     	; 0x948 <isAttacked+0x122>
     8f0:	e3 0f       	add	r30, r19
     8f2:	9e 2f       	mov	r25, r30
     8f4:	98 78       	andi	r25, 0x88	; 136
     8f6:	39 f4       	brne	.+14     	; 0x906 <isAttacked+0xe0>
     8f8:	ae 2f       	mov	r26, r30
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	a5 5d       	subi	r26, 0xD5	; 213
     8fe:	b9 4f       	sbci	r27, 0xF9	; 249
     900:	2c 91       	ld	r18, X
     902:	22 23       	and	r18, r18
     904:	a9 f3       	breq	.-22     	; 0x8f0 <isAttacked+0xca>
     906:	91 11       	cpse	r25, r1
     908:	0a c0       	rjmp	.+20     	; 0x91e <isAttacked+0xf8>
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	e5 5d       	subi	r30, 0xD5	; 213
     90e:	f9 4f       	sbci	r31, 0xF9	; 249
     910:	90 81       	ld	r25, Z
     912:	49 17       	cp	r20, r25
     914:	d9 f0       	breq	.+54     	; 0x94c <isAttacked+0x126>
     916:	26 2f       	mov	r18, r22
     918:	25 60       	ori	r18, 0x05	; 5
     91a:	92 17       	cp	r25, r18
     91c:	c9 f0       	breq	.+50     	; 0x950 <isAttacked+0x12a>
     91e:	21 96       	adiw	r28, 0x01	; 1
     920:	98 81       	ld	r25, Y
     922:	91 31       	cpi	r25, 0x11	; 17
     924:	11 f4       	brne	.+4      	; 0x92a <isAttacked+0x104>
     926:	46 2f       	mov	r20, r22
     928:	43 60       	ori	r20, 0x03	; 3
     92a:	e8 81       	ld	r30, Y
     92c:	e1 11       	cpse	r30, r1
     92e:	d1 cf       	rjmp	.-94     	; 0x8d2 <isAttacked+0xac>
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0f c0       	rjmp	.+30     	; 0x952 <isAttacked+0x12c>
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	0d c0       	rjmp	.+26     	; 0x952 <isAttacked+0x12c>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	0b c0       	rjmp	.+22     	; 0x952 <isAttacked+0x12c>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	09 c0       	rjmp	.+18     	; 0x952 <isAttacked+0x12c>
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	07 c0       	rjmp	.+14     	; 0x952 <isAttacked+0x12c>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	05 c0       	rjmp	.+10     	; 0x952 <isAttacked+0x12c>
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	03 c0       	rjmp	.+6      	; 0x952 <isAttacked+0x12c>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	01 c0       	rjmp	.+2      	; 0x952 <isAttacked+0x12c>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <clearBoard>:
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	06 c0       	rjmp	.+12     	; 0x968 <clearBoard+0x10>
     95c:	e8 2f       	mov	r30, r24
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	e5 5d       	subi	r30, 0xD5	; 213
     962:	f9 4f       	sbci	r31, 0xF9	; 249
     964:	10 82       	st	Z, r1
     966:	8f 5f       	subi	r24, 0xFF	; 255
     968:	88 23       	and	r24, r24
     96a:	c4 f7       	brge	.-16     	; 0x95c <clearBoard+0x4>
     96c:	08 95       	ret

0000096e <showMaterial>:
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	c8 2f       	mov	r28, r24
     974:	87 e2       	ldi	r24, 0x27	; 39
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
     97c:	86 e1       	ldi	r24, 0x16	; 22
     97e:	c8 9f       	mul	r28, r24
     980:	e0 01       	movw	r28, r0
     982:	11 24       	eor	r1, r1
     984:	c9 5b       	subi	r28, 0xB9	; 185
     986:	db 4f       	sbci	r29, 0xFB	; 251
     988:	8e 81       	ldd	r24, Y+6	; 0x06
     98a:	9f 81       	ldd	r25, Y+7	; 0x07
     98c:	0e 94 0d 04 	call	0x81a	; 0x81a <dbgSendDec16>
     990:	0e 94 10 04 	call	0x820	; 0x820 <dbgNewLine>
     994:	89 e3       	ldi	r24, 0x39	; 57
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
     99c:	8c 81       	ldd	r24, Y+4	; 0x04
     99e:	9d 81       	ldd	r25, Y+5	; 0x05
     9a0:	0e 94 0d 04 	call	0x81a	; 0x81a <dbgSendDec16>
     9a4:	0e 94 10 04 	call	0x820	; 0x820 <dbgNewLine>
     9a8:	8b e4       	ldi	r24, 0x4B	; 75
     9aa:	93 e0       	ldi	r25, 0x03	; 3
     9ac:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
     9b0:	8c 89       	ldd	r24, Y+20	; 0x14
     9b2:	0e 94 0a 04 	call	0x814	; 0x814 <dbgSendHexByte>
     9b6:	0e 94 10 04 	call	0x820	; 0x820 <dbgNewLine>
     9ba:	8d e5       	ldi	r24, 0x5D	; 93
     9bc:	93 e0       	ldi	r25, 0x03	; 3
     9be:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
     9c2:	8d 89       	ldd	r24, Y+21	; 0x15
     9c4:	0e 94 0a 04 	call	0x814	; 0x814 <dbgSendHexByte>
     9c8:	0e 94 10 04 	call	0x820	; 0x820 <dbgNewLine>
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <getMaterial>:
     9d2:	68 2f       	mov	r22, r24
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	86 e1       	ldi	r24, 0x16	; 22
     9d8:	86 9f       	mul	r24, r22
     9da:	f0 01       	movw	r30, r0
     9dc:	87 9f       	mul	r24, r23
     9de:	f0 0d       	add	r31, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	e9 5b       	subi	r30, 0xB9	; 185
     9e4:	fb 4f       	sbci	r31, 0xFB	; 251
     9e6:	17 82       	std	Z+7, r1	; 0x07
     9e8:	16 82       	std	Z+6, r1	; 0x06
     9ea:	15 82       	std	Z+5, r1	; 0x05
     9ec:	14 82       	std	Z+4, r1	; 0x04
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	85 8b       	std	Z+21, r24	; 0x15
     9f2:	84 8b       	std	Z+20, r24	; 0x14
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	4f c0       	rjmp	.+158    	; 0xa96 <getMaterial+0xc4>
     9f8:	89 2f       	mov	r24, r25
     9fa:	88 78       	andi	r24, 0x88	; 136
     9fc:	09 f0       	breq	.+2      	; 0xa00 <getMaterial+0x2e>
     9fe:	98 5f       	subi	r25, 0xF8	; 248
     a00:	e9 2f       	mov	r30, r25
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	e5 5d       	subi	r30, 0xD5	; 213
     a06:	f9 4f       	sbci	r31, 0xF9	; 249
     a08:	20 81       	ld	r18, Z
     a0a:	23 ff       	sbrs	r18, 3
     a0c:	21 c0       	rjmp	.+66     	; 0xa50 <getMaterial+0x7e>
     a0e:	e2 2f       	mov	r30, r18
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	e9 50       	subi	r30, 0x09	; 9
     a18:	fd 4f       	sbci	r31, 0xFD	; 253
     a1a:	40 81       	ld	r20, Z
     a1c:	51 81       	ldd	r21, Z+1	; 0x01
     a1e:	86 e1       	ldi	r24, 0x16	; 22
     a20:	86 9f       	mul	r24, r22
     a22:	f0 01       	movw	r30, r0
     a24:	87 9f       	mul	r24, r23
     a26:	f0 0d       	add	r31, r0
     a28:	11 24       	eor	r1, r1
     a2a:	e9 5b       	subi	r30, 0xB9	; 185
     a2c:	fb 4f       	sbci	r31, 0xFB	; 251
     a2e:	a4 81       	ldd	r26, Z+4	; 0x04
     a30:	b5 81       	ldd	r27, Z+5	; 0x05
     a32:	4a 0f       	add	r20, r26
     a34:	5b 1f       	adc	r21, r27
     a36:	55 83       	std	Z+5, r21	; 0x05
     a38:	44 83       	std	Z+4, r20	; 0x04
     a3a:	2e 30       	cpi	r18, 0x0E	; 14
     a3c:	59 f5       	brne	.+86     	; 0xa94 <getMaterial+0xc2>
     a3e:	86 9f       	mul	r24, r22
     a40:	f0 01       	movw	r30, r0
     a42:	87 9f       	mul	r24, r23
     a44:	f0 0d       	add	r31, r0
     a46:	11 24       	eor	r1, r1
     a48:	e9 5b       	subi	r30, 0xB9	; 185
     a4a:	fb 4f       	sbci	r31, 0xFB	; 251
     a4c:	95 8b       	std	Z+21, r25	; 0x15
     a4e:	22 c0       	rjmp	.+68     	; 0xa94 <getMaterial+0xc2>
     a50:	24 ff       	sbrs	r18, 4
     a52:	20 c0       	rjmp	.+64     	; 0xa94 <getMaterial+0xc2>
     a54:	e2 2f       	mov	r30, r18
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	e9 50       	subi	r30, 0x09	; 9
     a5e:	fd 4f       	sbci	r31, 0xFD	; 253
     a60:	40 81       	ld	r20, Z
     a62:	51 81       	ldd	r21, Z+1	; 0x01
     a64:	86 e1       	ldi	r24, 0x16	; 22
     a66:	86 9f       	mul	r24, r22
     a68:	f0 01       	movw	r30, r0
     a6a:	87 9f       	mul	r24, r23
     a6c:	f0 0d       	add	r31, r0
     a6e:	11 24       	eor	r1, r1
     a70:	e9 5b       	subi	r30, 0xB9	; 185
     a72:	fb 4f       	sbci	r31, 0xFB	; 251
     a74:	a6 81       	ldd	r26, Z+6	; 0x06
     a76:	b7 81       	ldd	r27, Z+7	; 0x07
     a78:	4a 0f       	add	r20, r26
     a7a:	5b 1f       	adc	r21, r27
     a7c:	57 83       	std	Z+7, r21	; 0x07
     a7e:	46 83       	std	Z+6, r20	; 0x06
     a80:	26 31       	cpi	r18, 0x16	; 22
     a82:	41 f4       	brne	.+16     	; 0xa94 <getMaterial+0xc2>
     a84:	86 9f       	mul	r24, r22
     a86:	f0 01       	movw	r30, r0
     a88:	87 9f       	mul	r24, r23
     a8a:	f0 0d       	add	r31, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	e9 5b       	subi	r30, 0xB9	; 185
     a90:	fb 4f       	sbci	r31, 0xFB	; 251
     a92:	94 8b       	std	Z+20, r25	; 0x14
     a94:	9f 5f       	subi	r25, 0xFF	; 255
     a96:	98 37       	cpi	r25, 0x78	; 120
     a98:	08 f4       	brcc	.+2      	; 0xa9c <getMaterial+0xca>
     a9a:	ae cf       	rjmp	.-164    	; 0x9f8 <getMaterial+0x26>
     a9c:	08 95       	ret

00000a9e <newGame>:

void newGame() {
    uint8_t i;
    clearBoard();
     a9e:	0e 94 ac 04 	call	0x958	; 0x958 <clearBoard>
    hm[0].flags     =0xf;
     aa2:	e7 e4       	ldi	r30, 0x47	; 71
     aa4:	f4 e0       	ldi	r31, 0x04	; 4
     aa6:	8f e0       	ldi	r24, 0x0F	; 15
     aa8:	80 8b       	std	Z+16, r24	; 0x10
    hm[0].actEntry  =mvList;
     aaa:	85 eb       	ldi	r24, 0xB5	; 181
     aac:	96 e0       	ldi	r25, 0x06	; 6
     aae:	93 83       	std	Z+3, r25	; 0x03
     ab0:	82 83       	std	Z+2, r24	; 0x02
    hm[0].firstEntry=mvList;
     ab2:	91 83       	std	Z+1, r25	; 0x01
     ab4:	80 83       	st	Z, r24
    hm[0].bestFrom  =0xff;
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	84 87       	std	Z+12, r24	; 0x0c
    hm[0].bestTo    =0xff;
     aba:	85 87       	std	Z+13, r24	; 0x0d
    hm[0].actFrom   = 0xff;
     abc:	86 87       	std	Z+14, r24	; 0x0e
    hm[0].actTo     = 0xff;
     abe:	87 87       	std	Z+15, r24	; 0x0f
    hm[0].bestValue = 0;
     ac0:	13 86       	std	Z+11, r1	; 0x0b
     ac2:	12 86       	std	Z+10, r1	; 0x0a
    hm[0].dynPosVal = 0;
     ac4:	11 86       	std	Z+9, r1	; 0x09
     ac6:	10 86       	std	Z+8, r1	; 0x08
    hm[0].ep        = 0;
     ac8:	11 8a       	std	Z+17, r1	; 0x11
    hm[1].ep        = 0;
     aca:	17 a2       	std	Z+39, r1	; 0x27
    hm[0].capture   = 0xff;
     acc:	82 8b       	std	Z+18, r24	; 0x12
    hm[0].movesGenerated = 0;
     ace:	13 8a       	std	Z+19, r1	; 0x13


    for (i=SQ_A1; i<=SQ_H1;i++) {
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	1d c0       	rjmp	.+58     	; 0xb0e <newGame+0x70>
        board[i] = baseRow[i&7]|WMASK;
     ad4:	a8 2f       	mov	r26, r24
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	e8 2f       	mov	r30, r24
     ada:	e7 70       	andi	r30, 0x07	; 7
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	e9 57       	subi	r30, 0x79	; 121
     ae0:	fc 4f       	sbci	r31, 0xFC	; 252
     ae2:	e0 81       	ld	r30, Z
     ae4:	a5 5d       	subi	r26, 0xD5	; 213
     ae6:	b9 4f       	sbci	r27, 0xF9	; 249
     ae8:	9e 2f       	mov	r25, r30
     aea:	98 60       	ori	r25, 0x08	; 8
     aec:	9c 93       	st	X, r25
        hm[0].matWhite += valPieces[baseRow[i&7]];
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	e1 57       	subi	r30, 0x71	; 113
     af6:	fc 4f       	sbci	r31, 0xFC	; 252
     af8:	20 81       	ld	r18, Z
     afa:	31 81       	ldd	r19, Z+1	; 0x01
     afc:	e7 e4       	ldi	r30, 0x47	; 71
     afe:	f4 e0       	ldi	r31, 0x04	; 4
     b00:	44 81       	ldd	r20, Z+4	; 0x04
     b02:	55 81       	ldd	r21, Z+5	; 0x05
     b04:	24 0f       	add	r18, r20
     b06:	35 1f       	adc	r19, r21
     b08:	35 83       	std	Z+5, r19	; 0x05
     b0a:	24 83       	std	Z+4, r18	; 0x04
    hm[1].ep        = 0;
    hm[0].capture   = 0xff;
    hm[0].movesGenerated = 0;


    for (i=SQ_A1; i<=SQ_H1;i++) {
     b0c:	8f 5f       	subi	r24, 0xFF	; 255
     b0e:	88 30       	cpi	r24, 0x08	; 8
     b10:	08 f3       	brcs	.-62     	; 0xad4 <newGame+0x36>
     b12:	80 e1       	ldi	r24, 0x10	; 16
     b14:	0f c0       	rjmp	.+30     	; 0xb34 <newGame+0x96>
        board[i] = baseRow[i&7]|WMASK;
        hm[0].matWhite += valPieces[baseRow[i&7]];
    }
    for (i=SQ_A2; i<=SQ_H2;i++) {
        board[i] = WPAWN;
     b16:	e8 2f       	mov	r30, r24
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	e5 5d       	subi	r30, 0xD5	; 213
     b1c:	f9 4f       	sbci	r31, 0xF9	; 249
     b1e:	99 e0       	ldi	r25, 0x09	; 9
     b20:	90 83       	st	Z, r25
        hm[0].matWhite += VAL_PAWN;
     b22:	e7 e4       	ldi	r30, 0x47	; 71
     b24:	f4 e0       	ldi	r31, 0x04	; 4
     b26:	24 81       	ldd	r18, Z+4	; 0x04
     b28:	35 81       	ldd	r19, Z+5	; 0x05
     b2a:	2c 59       	subi	r18, 0x9C	; 156
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	35 83       	std	Z+5, r19	; 0x05
     b30:	24 83       	std	Z+4, r18	; 0x04

    for (i=SQ_A1; i<=SQ_H1;i++) {
        board[i] = baseRow[i&7]|WMASK;
        hm[0].matWhite += valPieces[baseRow[i&7]];
    }
    for (i=SQ_A2; i<=SQ_H2;i++) {
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	88 31       	cpi	r24, 0x18	; 24
     b36:	78 f3       	brcs	.-34     	; 0xb16 <newGame+0x78>
     b38:	80 e6       	ldi	r24, 0x60	; 96
     b3a:	0f c0       	rjmp	.+30     	; 0xb5a <newGame+0xbc>
        board[i] = WPAWN;
        hm[0].matWhite += VAL_PAWN;
    }
    for (i=SQ_A7; i<=SQ_H7;i++) {
         board[i] = BPAWN;
     b3c:	e8 2f       	mov	r30, r24
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	e5 5d       	subi	r30, 0xD5	; 213
     b42:	f9 4f       	sbci	r31, 0xF9	; 249
     b44:	91 e1       	ldi	r25, 0x11	; 17
     b46:	90 83       	st	Z, r25
         hm[0].matBlack += VAL_PAWN;
     b48:	e7 e4       	ldi	r30, 0x47	; 71
     b4a:	f4 e0       	ldi	r31, 0x04	; 4
     b4c:	26 81       	ldd	r18, Z+6	; 0x06
     b4e:	37 81       	ldd	r19, Z+7	; 0x07
     b50:	2c 59       	subi	r18, 0x9C	; 156
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	37 83       	std	Z+7, r19	; 0x07
     b56:	26 83       	std	Z+6, r18	; 0x06
    }
    for (i=SQ_A2; i<=SQ_H2;i++) {
        board[i] = WPAWN;
        hm[0].matWhite += VAL_PAWN;
    }
    for (i=SQ_A7; i<=SQ_H7;i++) {
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	88 36       	cpi	r24, 0x68	; 104
     b5c:	78 f3       	brcs	.-34     	; 0xb3c <newGame+0x9e>
     b5e:	80 e7       	ldi	r24, 0x70	; 112
     b60:	1d c0       	rjmp	.+58     	; 0xb9c <newGame+0xfe>
         board[i] = BPAWN;
         hm[0].matBlack += VAL_PAWN;
    }
    for (i=SQ_A8; i<=SQ_H8;i++) {
        board[i] = baseRow[i&7]|BMASK;
     b62:	a8 2f       	mov	r26, r24
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2f       	mov	r30, r24
     b68:	e7 70       	andi	r30, 0x07	; 7
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	e9 57       	subi	r30, 0x79	; 121
     b6e:	fc 4f       	sbci	r31, 0xFC	; 252
     b70:	e0 81       	ld	r30, Z
     b72:	a5 5d       	subi	r26, 0xD5	; 213
     b74:	b9 4f       	sbci	r27, 0xF9	; 249
     b76:	9e 2f       	mov	r25, r30
     b78:	90 61       	ori	r25, 0x10	; 16
     b7a:	9c 93       	st	X, r25
        hm[0].matBlack += valPieces[baseRow[i&7]];
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	e1 57       	subi	r30, 0x71	; 113
     b84:	fc 4f       	sbci	r31, 0xFC	; 252
     b86:	20 81       	ld	r18, Z
     b88:	31 81       	ldd	r19, Z+1	; 0x01
     b8a:	e7 e4       	ldi	r30, 0x47	; 71
     b8c:	f4 e0       	ldi	r31, 0x04	; 4
     b8e:	46 81       	ldd	r20, Z+6	; 0x06
     b90:	57 81       	ldd	r21, Z+7	; 0x07
     b92:	24 0f       	add	r18, r20
     b94:	35 1f       	adc	r19, r21
     b96:	37 83       	std	Z+7, r19	; 0x07
     b98:	26 83       	std	Z+6, r18	; 0x06
    }
    for (i=SQ_A7; i<=SQ_H7;i++) {
         board[i] = BPAWN;
         hm[0].matBlack += VAL_PAWN;
    }
    for (i=SQ_A8; i<=SQ_H8;i++) {
     b9a:	8f 5f       	subi	r24, 0xFF	; 255
     b9c:	88 37       	cpi	r24, 0x78	; 120
     b9e:	08 f3       	brcs	.-62     	; 0xb62 <newGame+0xc4>
        board[i] = baseRow[i&7]|BMASK;
        hm[0].matBlack += valPieces[baseRow[i&7]];
    }
    getMaterial(0);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <getMaterial>
    side = WHITE_MOVE;
     ba6:	88 e0       	ldi	r24, 0x08	; 8
     ba8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <side>
    ply = 0;
     bac:	10 92 ac 06 	sts	0x06AC, r1	; 0x8006ac <ply>
    plyMax = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <plyMax>
    maxDepth = 3; // the depth to calc to
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	80 93 65 0b 	sts	0x0B65, r24	; 0x800b65 <maxDepth>
    criticalError = 0;
     bbc:	10 92 ab 06 	sts	0x06AB, r1	; 0x8006ab <criticalError>
     bc0:	08 95       	ret

00000bc2 <eval>:

const uint16_t valPieces[7] = {0, VAL_PAWN, VAL_KNIGHT, VAL_BISHOP, VAL_ROOK, VAL_QUEEN, VAL_KING };

int16_t eval() {
    uint8_t i;
    int16_t score = 0;
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
    for (i=0;i<=SQ_H8;i++) {
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	43 c0       	rjmp	.+134    	; 0xc50 <eval+0x8e>
        if (i&0x88) i+=8;
     bca:	89 2f       	mov	r24, r25
     bcc:	88 78       	andi	r24, 0x88	; 136
     bce:	09 f0       	breq	.+2      	; 0xbd2 <eval+0x10>
     bd0:	98 5f       	subi	r25, 0xF8	; 248
        switch(board[i]) {
     bd2:	29 2f       	mov	r18, r25
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	f9 01       	movw	r30, r18
     bd8:	e5 5d       	subi	r30, 0xD5	; 213
     bda:	f9 4f       	sbci	r31, 0xF9	; 249
     bdc:	40 81       	ld	r20, Z
     bde:	4c 30       	cpi	r20, 0x0C	; 12
     be0:	28 f4       	brcc	.+10     	; 0xbec <eval+0x2a>
     be2:	4a 30       	cpi	r20, 0x0A	; 10
     be4:	48 f4       	brcc	.+18     	; 0xbf8 <eval+0x36>
     be6:	49 30       	cpi	r20, 0x09	; 9
     be8:	d9 f0       	breq	.+54     	; 0xc20 <eval+0x5e>
     bea:	31 c0       	rjmp	.+98     	; 0xc4e <eval+0x8c>
     bec:	41 31       	cpi	r20, 0x11	; 17
     bee:	19 f1       	breq	.+70     	; 0xc36 <eval+0x74>
     bf0:	70 f1       	brcs	.+92     	; 0xc4e <eval+0x8c>
     bf2:	44 31       	cpi	r20, 0x14	; 20
     bf4:	58 f0       	brcs	.+22     	; 0xc0c <eval+0x4a>
     bf6:	2b c0       	rjmp	.+86     	; 0xc4e <eval+0x8c>
            case WKNIGHT:
            case WBISHOP:
                score += centerValues[i];
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	f9 01       	movw	r30, r18
     bfe:	e9 50       	subi	r30, 0x09	; 9
     c00:	fe 4f       	sbci	r31, 0xFE	; 254
     c02:	20 81       	ld	r18, Z
     c04:	31 81       	ldd	r19, Z+1	; 0x01
     c06:	62 0f       	add	r22, r18
     c08:	73 1f       	adc	r23, r19
                break;
     c0a:	21 c0       	rjmp	.+66     	; 0xc4e <eval+0x8c>
            case BKNIGHT:
            case BBISHOP:
                score -= centerValues[i];
     c0c:	22 0f       	add	r18, r18
     c0e:	33 1f       	adc	r19, r19
     c10:	f9 01       	movw	r30, r18
     c12:	e9 50       	subi	r30, 0x09	; 9
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	20 81       	ld	r18, Z
     c18:	31 81       	ldd	r19, Z+1	; 0x01
     c1a:	62 1b       	sub	r22, r18
     c1c:	73 0b       	sbc	r23, r19
                break;
     c1e:	17 c0       	rjmp	.+46     	; 0xc4e <eval+0x8c>
            case WPAWN:
                score += centerValues[i+8];
     c20:	f9 01       	movw	r30, r18
     c22:	38 96       	adiw	r30, 0x08	; 8
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	e9 50       	subi	r30, 0x09	; 9
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	20 81       	ld	r18, Z
     c2e:	31 81       	ldd	r19, Z+1	; 0x01
     c30:	62 0f       	add	r22, r18
     c32:	73 1f       	adc	r23, r19
                break;
     c34:	0c c0       	rjmp	.+24     	; 0xc4e <eval+0x8c>
            case BPAWN:
                score -= centerValues[(i^0x70)+8];
     c36:	e0 e7       	ldi	r30, 0x70	; 112
     c38:	e9 27       	eor	r30, r25
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	38 96       	adiw	r30, 0x08	; 8
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	e9 50       	subi	r30, 0x09	; 9
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	20 81       	ld	r18, Z
     c48:	31 81       	ldd	r19, Z+1	; 0x01
     c4a:	62 1b       	sub	r22, r18
     c4c:	73 0b       	sbc	r23, r19
const uint16_t valPieces[7] = {0, VAL_PAWN, VAL_KNIGHT, VAL_BISHOP, VAL_ROOK, VAL_QUEEN, VAL_KING };

int16_t eval() {
    uint8_t i;
    int16_t score = 0;
    for (i=0;i<=SQ_H8;i++) {
     c4e:	9f 5f       	subi	r25, 0xFF	; 255
     c50:	98 37       	cpi	r25, 0x78	; 120
     c52:	08 f4       	brcc	.+2      	; 0xc56 <eval+0x94>
     c54:	ba cf       	rjmp	.-140    	; 0xbca <eval+0x8>
            case BPAWN:
                score -= centerValues[(i^0x70)+8];
                break;
        }
    }
    score += (hm[ply].matWhite-hm[ply].matBlack); //+hm[ply].dynPosVal;
     c56:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
     c5a:	86 e1       	ldi	r24, 0x16	; 22
     c5c:	e8 9f       	mul	r30, r24
     c5e:	f0 01       	movw	r30, r0
     c60:	11 24       	eor	r1, r1
     c62:	e9 5b       	subi	r30, 0xB9	; 185
     c64:	fb 4f       	sbci	r31, 0xFB	; 251
     c66:	84 81       	ldd	r24, Z+4	; 0x04
     c68:	95 81       	ldd	r25, Z+5	; 0x05
     c6a:	26 81       	ldd	r18, Z+6	; 0x06
     c6c:	37 81       	ldd	r19, Z+7	; 0x07
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	86 0f       	add	r24, r22
     c74:	97 1f       	adc	r25, r23
    return (side == WHITE) ? score : -score;
     c76:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <side>
     c7a:	28 30       	cpi	r18, 0x08	; 8
     c7c:	19 f0       	breq	.+6      	; 0xc84 <eval+0xc2>
     c7e:	91 95       	neg	r25
     c80:	81 95       	neg	r24
     c82:	91 09       	sbc	r25, r1

     c84:	08 95       	ret

00000c86 <moveGen>:
//#define DEBUG_SPEZ
//TODO:
// * surround usart calls with #ifdef DEBUG
// * methode to insert PV Move first place
// * captures sort to front (2nd place)
uint8_t moveGen() {
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
    //checkBoard();
    int8_t i,h;
    const int8_t* sliderMoff = 0;
    const int8_t* off;
    uint8_t  to;
    Move* pMoves = hm[ply].firstEntry;
     c90:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
     c94:	86 e1       	ldi	r24, 0x16	; 22
     c96:	e8 9f       	mul	r30, r24
     c98:	f0 01       	movw	r30, r0
     c9a:	11 24       	eor	r1, r1
     c9c:	e9 5b       	subi	r30, 0xB9	; 185
     c9e:	fb 4f       	sbci	r31, 0xFB	; 251
     ca0:	01 90       	ld	r0, Z+
     ca2:	f0 81       	ld	r31, Z
     ca4:	e0 2d       	mov	r30, r0
    if (side==WHITE)
        uartPuts("white\n\r");
    else
        uartPuts("black\n\r");
#endif
    for (i=SQ_A1; i<=SQ_H8; i++) {
     ca6:	c0 e0       	ldi	r28, 0x00	; 0
     ca8:	e6 c1       	rjmp	.+972    	; 0x1076 <__DATA_REGION_LENGTH__+0x76>
        if (i&0x88)  i+=8;
     caa:	8c 2f       	mov	r24, r28
     cac:	0c 2e       	mov	r0, r28
     cae:	00 0c       	add	r0, r0
     cb0:	99 0b       	sbc	r25, r25
     cb2:	88 78       	andi	r24, 0x88	; 136
     cb4:	99 27       	eor	r25, r25
     cb6:	89 2b       	or	r24, r25
     cb8:	09 f0       	breq	.+2      	; 0xcbc <moveGen+0x36>
     cba:	c8 5f       	subi	r28, 0xF8	; 248
        uartSendHexByte(i);
        uartPutc(' ');
        uartSendHexByte(board[i]);
        uartPutc(':');
#endif
        if (!board[i]) continue;
     cbc:	0c 2f       	mov	r16, r28
     cbe:	0c 2e       	mov	r0, r28
     cc0:	00 0c       	add	r0, r0
     cc2:	11 0b       	sbc	r17, r17
     cc4:	d8 01       	movw	r26, r16
     cc6:	a5 5d       	subi	r26, 0xD5	; 213
     cc8:	b9 4f       	sbci	r27, 0xF9	; 249
     cca:	8c 91       	ld	r24, X
     ccc:	88 23       	and	r24, r24
     cce:	09 f4       	brne	.+2      	; 0xcd2 <moveGen+0x4c>
     cd0:	d1 c1       	rjmp	.+930    	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
        if (!(side & board[i])) continue;
     cd2:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <side>
     cd6:	28 2f       	mov	r18, r24
     cd8:	29 23       	and	r18, r25
     cda:	09 f4       	brne	.+2      	; 0xcde <moveGen+0x58>
     cdc:	cb c1       	rjmp	.+918    	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
        uartPutc('<');
        uartSendHexByte(board[i]);
        uartPutc('>');
#endif
        sliderMoff = NULL;
        switch (board[i]&7) {
     cde:	87 70       	andi	r24, 0x07	; 7
     ce0:	83 30       	cpi	r24, 0x03	; 3
     ce2:	09 f4       	brne	.+2      	; 0xce6 <moveGen+0x60>
     ce4:	96 c1       	rjmp	.+812    	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
     ce6:	30 f4       	brcc	.+12     	; 0xcf4 <moveGen+0x6e>
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	69 f0       	breq	.+26     	; 0xd06 <moveGen+0x80>
     cec:	82 30       	cpi	r24, 0x02	; 2
     cee:	09 f4       	brne	.+2      	; 0xcf2 <moveGen+0x6c>
     cf0:	3a c1       	rjmp	.+628    	; 0xf66 <moveGen+0x2e0>
     cf2:	6d c1       	rjmp	.+730    	; 0xfce <moveGen+0x348>
     cf4:	85 30       	cpi	r24, 0x05	; 5
     cf6:	09 f4       	brne	.+2      	; 0xcfa <moveGen+0x74>
     cf8:	8f c1       	rjmp	.+798    	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
     cfa:	08 f4       	brcc	.+2      	; 0xcfe <moveGen+0x78>
     cfc:	a5 c0       	rjmp	.+330    	; 0xe48 <moveGen+0x1c2>
     cfe:	86 30       	cpi	r24, 0x06	; 6
     d00:	09 f4       	brne	.+2      	; 0xd04 <moveGen+0x7e>
     d02:	a5 c0       	rjmp	.+330    	; 0xe4e <moveGen+0x1c8>
     d04:	64 c1       	rjmp	.+712    	; 0xfce <moveGen+0x348>
            case PAWN:
                to = (side==WHITE) ? i+0x10 : i-0x10;
     d06:	98 30       	cpi	r25, 0x08	; 8
     d08:	19 f4       	brne	.+6      	; 0xd10 <moveGen+0x8a>
     d0a:	90 e1       	ldi	r25, 0x10	; 16
     d0c:	9c 0f       	add	r25, r28
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <moveGen+0x8e>
     d10:	90 ef       	ldi	r25, 0xF0	; 240
     d12:	9c 0f       	add	r25, r28
                if (to >= SQ_A8 || to <= SQ_H1) {
     d14:	88 ef       	ldi	r24, 0xF8	; 248
     d16:	89 0f       	add	r24, r25
     d18:	88 36       	cpi	r24, 0x68	; 104
     d1a:	40 f0       	brcs	.+16     	; 0xd2c <moveGen+0xa6>
                    for (foff = KNIGHT<<4; foff <= QUEEN<<4; i+=0x10) {
                        pMoves->from = i;
     d1c:	c0 83       	st	Z, r28
                        pMoves->to = (to&0xf)|foff|PROMO_FLAG;
     d1e:	89 2f       	mov	r24, r25
     d20:	8f 70       	andi	r24, 0x0F	; 15
     d22:	80 6a       	ori	r24, 0xA0	; 160
     d24:	81 83       	std	Z+1, r24	; 0x01
                        pMoves++;
     d26:	34 96       	adiw	r30, 0x04	; 4
        sliderMoff = NULL;
        switch (board[i]&7) {
            case PAWN:
                to = (side==WHITE) ? i+0x10 : i-0x10;
                if (to >= SQ_A8 || to <= SQ_H1) {
                    for (foff = KNIGHT<<4; foff <= QUEEN<<4; i+=0x10) {
     d28:	c0 5f       	subi	r28, 0xF0	; 240
     d2a:	f8 cf       	rjmp	.-16     	; 0xd1c <moveGen+0x96>
                        pMoves->from = i;
                        pMoves->to = (to&0xf)|foff|PROMO_FLAG;
                        pMoves++;
                    }
                } else if (!board[to]) {
     d2c:	a9 2f       	mov	r26, r25
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	a5 5d       	subi	r26, 0xD5	; 213
     d32:	b9 4f       	sbci	r27, 0xF9	; 249
     d34:	8c 91       	ld	r24, X
     d36:	81 11       	cpse	r24, r1
     d38:	29 c0       	rjmp	.+82     	; 0xd8c <moveGen+0x106>
                    pMoves->from = i;
     d3a:	2c 2f       	mov	r18, r28
     d3c:	c0 83       	st	Z, r28
                    pMoves->to   = to;
     d3e:	91 83       	std	Z+1, r25	; 0x01
                    pMoves++;
     d40:	af 01       	movw	r20, r30
     d42:	4c 5f       	subi	r20, 0xFC	; 252
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
                    to = 0;
                    if (side==WHITE && i<=SQ_H2)
     d46:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
     d4a:	88 30       	cpi	r24, 0x08	; 8
     d4c:	29 f4       	brne	.+10     	; 0xd58 <moveGen+0xd2>
     d4e:	c8 31       	cpi	r28, 0x18	; 24
     d50:	1c f4       	brge	.+6      	; 0xd58 <moveGen+0xd2>
                        to = i+0x20;
     d52:	80 e2       	ldi	r24, 0x20	; 32
     d54:	8c 0f       	add	r24, r28
     d56:	0a c0       	rjmp	.+20     	; 0xd6c <moveGen+0xe6>
                    else if (side == BLACK && i>=SQ_A7)
     d58:	80 31       	cpi	r24, 0x10	; 16
     d5a:	29 f4       	brne	.+10     	; 0xd66 <moveGen+0xe0>
     d5c:	c0 36       	cpi	r28, 0x60	; 96
     d5e:	2c f0       	brlt	.+10     	; 0xd6a <moveGen+0xe4>
                        to = i-0x20;
     d60:	80 ee       	ldi	r24, 0xE0	; 224
     d62:	82 0f       	add	r24, r18
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <moveGen+0xe6>
                    }
                } else if (!board[to]) {
                    pMoves->from = i;
                    pMoves->to   = to;
                    pMoves++;
                    to = 0;
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <moveGen+0xe6>
     d6a:	80 e0       	ldi	r24, 0x00	; 0
                    if (side==WHITE && i<=SQ_H2)
                        to = i+0x20;
                    else if (side == BLACK && i>=SQ_A7)
                        to = i-0x20;
                    if (to && !board[to]) {
     d6c:	88 23       	and	r24, r24
     d6e:	59 f0       	breq	.+22     	; 0xd86 <moveGen+0x100>
     d70:	a8 2f       	mov	r26, r24
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	a5 5d       	subi	r26, 0xD5	; 213
     d76:	b9 4f       	sbci	r27, 0xF9	; 249
     d78:	9c 91       	ld	r25, X
     d7a:	91 11       	cpse	r25, r1
     d7c:	06 c0       	rjmp	.+12     	; 0xd8a <moveGen+0x104>
                        pMoves->from = i;
     d7e:	24 83       	std	Z+4, r18	; 0x04
                        pMoves->to   = to;
     d80:	85 83       	std	Z+5, r24	; 0x05
                        pMoves++;
     d82:	38 96       	adiw	r30, 0x08	; 8
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <moveGen+0x106>
                        pMoves++;
                    }
                } else if (!board[to]) {
                    pMoves->from = i;
                    pMoves->to   = to;
                    pMoves++;
     d86:	fa 01       	movw	r30, r20
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <moveGen+0x106>
     d8a:	fa 01       	movw	r30, r20
     d8c:	8f e0       	ldi	r24, 0x0F	; 15
     d8e:	25 c0       	rjmp	.+74     	; 0xdda <moveGen+0x154>
                        pMoves->to   = to;
                        pMoves++;
                    }
                }
                for (h=0x0F; h<=0x11; h+=2) { // capturing moves (left an right)
                    to = (side==WHITE)? i+h : i-h;
     d90:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <side>
     d94:	28 30       	cpi	r18, 0x08	; 8
     d96:	19 f4       	brne	.+6      	; 0xd9e <moveGen+0x118>
     d98:	9c 2f       	mov	r25, r28
     d9a:	98 0f       	add	r25, r24
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <moveGen+0x11c>
     d9e:	9c 2f       	mov	r25, r28
     da0:	98 1b       	sub	r25, r24
                    if (!(to&0x88) && (OTHER(side) & board[to])) {
     da2:	39 2f       	mov	r19, r25
     da4:	38 78       	andi	r19, 0x88	; 136
     da6:	c1 f4       	brne	.+48     	; 0xdd8 <moveGen+0x152>
     da8:	a9 2f       	mov	r26, r25
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	a5 5d       	subi	r26, 0xD5	; 213
     dae:	b9 4f       	sbci	r27, 0xF9	; 249
     db0:	3c 91       	ld	r19, X
     db2:	48 e1       	ldi	r20, 0x18	; 24
     db4:	24 27       	eor	r18, r20
     db6:	23 23       	and	r18, r19
     db8:	79 f0       	breq	.+30     	; 0xdd8 <moveGen+0x152>
                        pMoves->from = i;
     dba:	c0 83       	st	Z, r28
                        pMoves->to = to;
     dbc:	91 83       	std	Z+1, r25	; 0x01
                        pMoves++;
     dbe:	34 96       	adiw	r30, 0x04	; 4
                        if(to >= SQ_A8 || to <= SQ_H1) {
     dc0:	28 ef       	ldi	r18, 0xF8	; 248
     dc2:	29 0f       	add	r18, r25
     dc4:	28 36       	cpi	r18, 0x68	; 104
     dc6:	40 f0       	brcs	.+16     	; 0xdd8 <moveGen+0x152>
                            for (foff = KNIGHT<<4; foff <= QUEEN<<4; i+=0x10) {
                                pMoves->from = i;
     dc8:	c0 83       	st	Z, r28
                                pMoves->to = (to&0xf)|foff|PROMO_FLAG;
     dca:	89 2f       	mov	r24, r25
     dcc:	8f 70       	andi	r24, 0x0F	; 15
     dce:	80 6a       	ori	r24, 0xA0	; 160
     dd0:	81 83       	std	Z+1, r24	; 0x01
                                pMoves++;
     dd2:	34 96       	adiw	r30, 0x04	; 4
                    if (!(to&0x88) && (OTHER(side) & board[to])) {
                        pMoves->from = i;
                        pMoves->to = to;
                        pMoves++;
                        if(to >= SQ_A8 || to <= SQ_H1) {
                            for (foff = KNIGHT<<4; foff <= QUEEN<<4; i+=0x10) {
     dd4:	c0 5f       	subi	r28, 0xF0	; 240
     dd6:	f8 cf       	rjmp	.-16     	; 0xdc8 <moveGen+0x142>
                        pMoves->from = i;
                        pMoves->to   = to;
                        pMoves++;
                    }
                }
                for (h=0x0F; h<=0x11; h+=2) { // capturing moves (left an right)
     dd8:	8e 5f       	subi	r24, 0xFE	; 254
     dda:	82 31       	cpi	r24, 0x12	; 18
     ddc:	cc f2       	brlt	.-78     	; 0xd90 <moveGen+0x10a>
                                pMoves++;
                            }
                        }
                    }
                }
                int8_t epoff = side==WHITE ? 0x10 : -0x10;
     dde:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
     de2:	88 30       	cpi	r24, 0x08	; 8
     de4:	11 f4       	brne	.+4      	; 0xdea <moveGen+0x164>
     de6:	80 e1       	ldi	r24, 0x10	; 16
     de8:	01 c0       	rjmp	.+2      	; 0xdec <moveGen+0x166>
     dea:	80 ef       	ldi	r24, 0xF0	; 240
                if ((i+epoff-hm[ply].ep) == 1 || (hm[ply].ep+epoff-i) == 1) { // if ep field near PAWN
     dec:	28 2f       	mov	r18, r24
     dee:	88 0f       	add	r24, r24
     df0:	33 0b       	sbc	r19, r19
     df2:	a8 01       	movw	r20, r16
     df4:	42 0f       	add	r20, r18
     df6:	53 1f       	adc	r21, r19
     df8:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <ply>
     dfc:	96 e1       	ldi	r25, 0x16	; 22
     dfe:	a9 9f       	mul	r26, r25
     e00:	d0 01       	movw	r26, r0
     e02:	11 24       	eor	r1, r1
     e04:	a9 5b       	subi	r26, 0xB9	; 185
     e06:	bb 4f       	sbci	r27, 0xFB	; 251
     e08:	51 96       	adiw	r26, 0x11	; 17
     e0a:	9c 91       	ld	r25, X
     e0c:	89 2f       	mov	r24, r25
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	48 1b       	sub	r20, r24
     e12:	59 0b       	sbc	r21, r25
     e14:	41 30       	cpi	r20, 0x01	; 1
     e16:	51 05       	cpc	r21, r1
     e18:	39 f0       	breq	.+14     	; 0xe28 <moveGen+0x1a2>
     e1a:	82 0f       	add	r24, r18
     e1c:	93 1f       	adc	r25, r19
     e1e:	80 1b       	sub	r24, r16
     e20:	91 0b       	sbc	r25, r17
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	09 f0       	breq	.+2      	; 0xe28 <moveGen+0x1a2>
     e26:	fb c0       	rjmp	.+502    	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
                    pMoves->from = i;
     e28:	c0 83       	st	Z, r28
                    pMoves->to = hm[ply].ep;
     e2a:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <ply>
     e2e:	86 e1       	ldi	r24, 0x16	; 22
     e30:	a8 9f       	mul	r26, r24
     e32:	d0 01       	movw	r26, r0
     e34:	11 24       	eor	r1, r1
     e36:	a9 5b       	subi	r26, 0xB9	; 185
     e38:	bb 4f       	sbci	r27, 0xFB	; 251
     e3a:	51 96       	adiw	r26, 0x11	; 17
     e3c:	8c 91       	ld	r24, X
     e3e:	81 83       	std	Z+1, r24	; 0x01
                    pMoves++;
     e40:	34 96       	adiw	r30, 0x04	; 4
#ifdef DEBUG_SPEZ
        uartPutc('<');
        uartSendHexByte(board[i]);
        uartPutc('>');
#endif
        sliderMoff = NULL;
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	ed c0       	rjmp	.+474    	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
                break;
            case QUEEN:
                sliderMoff = moffQueen;
                break;
            case ROOK:
                sliderMoff = moffRook;
     e48:	2d ed       	ldi	r18, 0xDD	; 221
     e4a:	31 e0       	ldi	r19, 0x01	; 1
                break;
     e4c:	ea c0       	rjmp	.+468    	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
            case KING:
                // White Castle
                if (i==SQ_E1 && side == WHITE_MOVE && (hm[ply].flags&(FLAG_CL_WHITE|FLAG_CS_WHITE))) {
     e4e:	c4 30       	cpi	r28, 0x04	; 4
     e50:	09 f0       	breq	.+2      	; 0xe54 <moveGen+0x1ce>
     e52:	44 c0       	rjmp	.+136    	; 0xedc <moveGen+0x256>
     e54:	98 30       	cpi	r25, 0x08	; 8
     e56:	09 f0       	breq	.+2      	; 0xe5a <moveGen+0x1d4>
     e58:	41 c0       	rjmp	.+130    	; 0xedc <moveGen+0x256>
     e5a:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <ply>
     e5e:	86 e1       	ldi	r24, 0x16	; 22
     e60:	a8 9f       	mul	r26, r24
     e62:	d0 01       	movw	r26, r0
     e64:	11 24       	eor	r1, r1
     e66:	a9 5b       	subi	r26, 0xB9	; 185
     e68:	bb 4f       	sbci	r27, 0xFB	; 251
     e6a:	50 96       	adiw	r26, 0x10	; 16
     e6c:	8c 91       	ld	r24, X
     e6e:	28 2f       	mov	r18, r24
     e70:	23 70       	andi	r18, 0x03	; 3
     e72:	a1 f1       	breq	.+104    	; 0xedc <moveGen+0x256>
                    if ((hm[ply].flags&(FLAG_CL_WHITE)) && board[SQ_A1]==WROOK &&
     e74:	81 ff       	sbrs	r24, 1
     e76:	14 c0       	rjmp	.+40     	; 0xea0 <moveGen+0x21a>
     e78:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <board>
     e7c:	8c 30       	cpi	r24, 0x0C	; 12
     e7e:	81 f4       	brne	.+32     	; 0xea0 <moveGen+0x21a>
                        board[SQ_B1]==EMPTY &&  board[SQ_C1]==EMPTY &&  board[SQ_D1]==EMPTY ) {
     e80:	80 91 2c 06 	lds	r24, 0x062C	; 0x80062c <board+0x1>
                sliderMoff = moffRook;
                break;
            case KING:
                // White Castle
                if (i==SQ_E1 && side == WHITE_MOVE && (hm[ply].flags&(FLAG_CL_WHITE|FLAG_CS_WHITE))) {
                    if ((hm[ply].flags&(FLAG_CL_WHITE)) && board[SQ_A1]==WROOK &&
     e84:	81 11       	cpse	r24, r1
     e86:	0c c0       	rjmp	.+24     	; 0xea0 <moveGen+0x21a>
                        board[SQ_B1]==EMPTY &&  board[SQ_C1]==EMPTY &&  board[SQ_D1]==EMPTY ) {
     e88:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <board+0x2>
     e8c:	81 11       	cpse	r24, r1
     e8e:	08 c0       	rjmp	.+16     	; 0xea0 <moveGen+0x21a>
     e90:	80 91 2e 06 	lds	r24, 0x062E	; 0x80062e <board+0x3>
     e94:	81 11       	cpse	r24, r1
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <moveGen+0x21a>
                        pMoves->from = i;
     e98:	c0 83       	st	Z, r28
                        pMoves->to = SQ_C1;
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	81 83       	std	Z+1, r24	; 0x01
                        pMoves++;
     e9e:	34 96       	adiw	r30, 0x04	; 4
                    }
                    if ((hm[ply].flags&(FLAG_CS_WHITE)) && board[SQ_H1]==WROOK &&
     ea0:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <ply>
     ea4:	96 e1       	ldi	r25, 0x16	; 22
     ea6:	a9 9f       	mul	r26, r25
     ea8:	d0 01       	movw	r26, r0
     eaa:	11 24       	eor	r1, r1
     eac:	a9 5b       	subi	r26, 0xB9	; 185
     eae:	bb 4f       	sbci	r27, 0xFB	; 251
     eb0:	50 96       	adiw	r26, 0x10	; 16
     eb2:	8c 91       	ld	r24, X
     eb4:	80 ff       	sbrs	r24, 0
     eb6:	57 c0       	rjmp	.+174    	; 0xf66 <moveGen+0x2e0>
     eb8:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <board+0x7>
     ebc:	8c 30       	cpi	r24, 0x0C	; 12
     ebe:	09 f0       	breq	.+2      	; 0xec2 <moveGen+0x23c>
     ec0:	52 c0       	rjmp	.+164    	; 0xf66 <moveGen+0x2e0>
                        board[SQ_F1]==EMPTY &&  board[SQ_G1]==EMPTY  ) {
     ec2:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <board+0x5>
                        board[SQ_B1]==EMPTY &&  board[SQ_C1]==EMPTY &&  board[SQ_D1]==EMPTY ) {
                        pMoves->from = i;
                        pMoves->to = SQ_C1;
                        pMoves++;
                    }
                    if ((hm[ply].flags&(FLAG_CS_WHITE)) && board[SQ_H1]==WROOK &&
     ec6:	81 11       	cpse	r24, r1
     ec8:	4e c0       	rjmp	.+156    	; 0xf66 <moveGen+0x2e0>
                        board[SQ_F1]==EMPTY &&  board[SQ_G1]==EMPTY  ) {
     eca:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <board+0x6>
     ece:	81 11       	cpse	r24, r1
     ed0:	4a c0       	rjmp	.+148    	; 0xf66 <moveGen+0x2e0>
                        pMoves->from = i;
     ed2:	c0 83       	st	Z, r28
                        pMoves->to = SQ_G1;
     ed4:	86 e0       	ldi	r24, 0x06	; 6
     ed6:	81 83       	std	Z+1, r24	; 0x01
                        pMoves++;
     ed8:	34 96       	adiw	r30, 0x04	; 4
     eda:	45 c0       	rjmp	.+138    	; 0xf66 <moveGen+0x2e0>
                    }
                }
                // Black Castle
                else if (i==SQ_E8 && side == BLACK_MOVE && (hm[ply].flags&(FLAG_CL_BLACK|FLAG_CS_BLACK))) {
     edc:	c4 37       	cpi	r28, 0x74	; 116
     ede:	09 f0       	breq	.+2      	; 0xee2 <moveGen+0x25c>
     ee0:	42 c0       	rjmp	.+132    	; 0xf66 <moveGen+0x2e0>
     ee2:	90 31       	cpi	r25, 0x10	; 16
     ee4:	09 f0       	breq	.+2      	; 0xee8 <moveGen+0x262>
     ee6:	3f c0       	rjmp	.+126    	; 0xf66 <moveGen+0x2e0>
     ee8:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <ply>
     eec:	86 e1       	ldi	r24, 0x16	; 22
     eee:	a8 9f       	mul	r26, r24
     ef0:	d0 01       	movw	r26, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	a9 5b       	subi	r26, 0xB9	; 185
     ef6:	bb 4f       	sbci	r27, 0xFB	; 251
     ef8:	50 96       	adiw	r26, 0x10	; 16
     efa:	8c 91       	ld	r24, X
     efc:	98 2f       	mov	r25, r24
     efe:	9c 70       	andi	r25, 0x0C	; 12
     f00:	91 f1       	breq	.+100    	; 0xf66 <moveGen+0x2e0>
                    if ((hm[ply].flags&(FLAG_CL_BLACK)) && board[SQ_A8]==BROOK &&
     f02:	83 ff       	sbrs	r24, 3
     f04:	14 c0       	rjmp	.+40     	; 0xf2e <moveGen+0x2a8>
     f06:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <board+0x70>
     f0a:	84 31       	cpi	r24, 0x14	; 20
     f0c:	81 f4       	brne	.+32     	; 0xf2e <moveGen+0x2a8>
                    board[SQ_B8]==EMPTY &&  board[SQ_C8]==EMPTY &&  board[SQ_D8]==EMPTY ) {
     f0e:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <board+0x71>
                        pMoves++;
                    }
                }
                // Black Castle
                else if (i==SQ_E8 && side == BLACK_MOVE && (hm[ply].flags&(FLAG_CL_BLACK|FLAG_CS_BLACK))) {
                    if ((hm[ply].flags&(FLAG_CL_BLACK)) && board[SQ_A8]==BROOK &&
     f12:	81 11       	cpse	r24, r1
     f14:	0c c0       	rjmp	.+24     	; 0xf2e <moveGen+0x2a8>
                    board[SQ_B8]==EMPTY &&  board[SQ_C8]==EMPTY &&  board[SQ_D8]==EMPTY ) {
     f16:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <board+0x72>
     f1a:	81 11       	cpse	r24, r1
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <moveGen+0x2a8>
     f1e:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <board+0x73>
     f22:	81 11       	cpse	r24, r1
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <moveGen+0x2a8>
                        pMoves->from = i;
     f26:	c0 83       	st	Z, r28
                        pMoves->to = SQ_C8;
     f28:	82 e7       	ldi	r24, 0x72	; 114
     f2a:	81 83       	std	Z+1, r24	; 0x01
                        pMoves++;
     f2c:	34 96       	adiw	r30, 0x04	; 4
                    }
                    if ((hm[ply].flags&(FLAG_CS_BLACK)) && board[SQ_H8]==BROOK &&
     f2e:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <ply>
     f32:	96 e1       	ldi	r25, 0x16	; 22
     f34:	a9 9f       	mul	r26, r25
     f36:	d0 01       	movw	r26, r0
     f38:	11 24       	eor	r1, r1
     f3a:	a9 5b       	subi	r26, 0xB9	; 185
     f3c:	bb 4f       	sbci	r27, 0xFB	; 251
     f3e:	50 96       	adiw	r26, 0x10	; 16
     f40:	8c 91       	ld	r24, X
     f42:	82 ff       	sbrs	r24, 2
     f44:	10 c0       	rjmp	.+32     	; 0xf66 <moveGen+0x2e0>
     f46:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <board+0x77>
     f4a:	84 31       	cpi	r24, 0x14	; 20
     f4c:	61 f4       	brne	.+24     	; 0xf66 <moveGen+0x2e0>
                    board[SQ_F8]==EMPTY &&  board[SQ_G8]==EMPTY  ) {
     f4e:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <board+0x75>
                    board[SQ_B8]==EMPTY &&  board[SQ_C8]==EMPTY &&  board[SQ_D8]==EMPTY ) {
                        pMoves->from = i;
                        pMoves->to = SQ_C8;
                        pMoves++;
                    }
                    if ((hm[ply].flags&(FLAG_CS_BLACK)) && board[SQ_H8]==BROOK &&
     f52:	81 11       	cpse	r24, r1
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <moveGen+0x2e0>
                    board[SQ_F8]==EMPTY &&  board[SQ_G8]==EMPTY  ) {
     f56:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <board+0x76>
     f5a:	81 11       	cpse	r24, r1
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <moveGen+0x2e0>
                        pMoves->from = i;
     f5e:	c0 83       	st	Z, r28
                        pMoves->to = SQ_G8;
     f60:	86 e7       	ldi	r24, 0x76	; 118
     f62:	81 83       	std	Z+1, r24	; 0x01
                        pMoves++;
     f64:	34 96       	adiw	r30, 0x04	; 4
                    }
                }
            // Knight and King Moves
            case KNIGHT:
                off = ((board[i]&7) == KNIGHT)? moffKnight : moffKing;
     f66:	d8 01       	movw	r26, r16
     f68:	a5 5d       	subi	r26, 0xD5	; 213
     f6a:	b9 4f       	sbci	r27, 0xF9	; 249
     f6c:	8c 91       	ld	r24, X
     f6e:	87 70       	andi	r24, 0x07	; 7
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	39 f4       	brne	.+14     	; 0xf82 <moveGen+0x2fc>
     f74:	0f 2e       	mov	r0, r31
     f76:	fd ee       	ldi	r31, 0xED	; 237
     f78:	ef 2e       	mov	r14, r31
     f7a:	f1 e0       	ldi	r31, 0x01	; 1
     f7c:	ff 2e       	mov	r15, r31
     f7e:	f0 2d       	mov	r31, r0
     f80:	1f c0       	rjmp	.+62     	; 0xfc0 <moveGen+0x33a>
     f82:	0f 2e       	mov	r0, r31
     f84:	f3 ee       	ldi	r31, 0xE3	; 227
     f86:	ef 2e       	mov	r14, r31
     f88:	f1 e0       	ldi	r31, 0x01	; 1
     f8a:	ff 2e       	mov	r15, r31
     f8c:	f0 2d       	mov	r31, r0
     f8e:	18 c0       	rjmp	.+48     	; 0xfc0 <moveGen+0x33a>
                while (*off) {
                    to = i + *off;
     f90:	8c 0f       	add	r24, r28
                    off++;
     f92:	af ef       	ldi	r26, 0xFF	; 255
     f94:	ea 1a       	sub	r14, r26
     f96:	fa 0a       	sbc	r15, r26
                    if (to&0x88) continue;
     f98:	98 2f       	mov	r25, r24
     f9a:	98 78       	andi	r25, 0x88	; 136
     f9c:	89 f4       	brne	.+34     	; 0xfc0 <moveGen+0x33a>
                    if (!(board[to]&board[i]&0x18)) {
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	25 5d       	subi	r18, 0xD5	; 213
     fa4:	39 4f       	sbci	r19, 0xF9	; 249
     fa6:	d9 01       	movw	r26, r18
     fa8:	2c 91       	ld	r18, X
     faa:	b8 01       	movw	r22, r16
     fac:	65 5d       	subi	r22, 0xD5	; 213
     fae:	79 4f       	sbci	r23, 0xF9	; 249
     fb0:	db 01       	movw	r26, r22
     fb2:	9c 91       	ld	r25, X
     fb4:	92 23       	and	r25, r18
     fb6:	98 71       	andi	r25, 0x18	; 24
     fb8:	19 f4       	brne	.+6      	; 0xfc0 <moveGen+0x33a>
                        pMoves->from = i;
     fba:	c0 83       	st	Z, r28
                        pMoves->to = to;
     fbc:	81 83       	std	Z+1, r24	; 0x01
                        pMoves++;
     fbe:	34 96       	adiw	r30, 0x04	; 4
                    }
                }
            // Knight and King Moves
            case KNIGHT:
                off = ((board[i]&7) == KNIGHT)? moffKnight : moffKing;
                while (*off) {
     fc0:	d7 01       	movw	r26, r14
     fc2:	8c 91       	ld	r24, X
     fc4:	81 11       	cpse	r24, r1
     fc6:	e4 cf       	rjmp	.-56     	; 0xf90 <moveGen+0x30a>
#ifdef DEBUG_SPEZ
        uartPutc('<');
        uartSendHexByte(board[i]);
        uartPutc('>');
#endif
        sliderMoff = NULL;
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	2a c0       	rjmp	.+84     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
                        pMoves++;
                    }
                }
                break;
            default:
                criticalError = 3;
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <criticalError>
                dbgSetColor(COLOR_RED);
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	0e 94 07 04 	call	0x80e	; 0x80e <dbgSetColor>
                dbgPuts("MoveGen found piece ");
     fda:	84 ea       	ldi	r24, 0xA4	; 164
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                dbgSendHexByte(board[i]);
     fe2:	f8 01       	movw	r30, r16
     fe4:	e5 5d       	subi	r30, 0xD5	; 213
     fe6:	f9 4f       	sbci	r31, 0xF9	; 249
     fe8:	80 81       	ld	r24, Z
     fea:	0e 94 0a 04 	call	0x814	; 0x814 <dbgSendHexByte>
                dbgPuts(" on field "); dbgSendHexByte(i); dbgPuts("\n\r");
     fee:	87 ec       	ldi	r24, 0xC7	; 199
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
     ff6:	8c 2f       	mov	r24, r28
     ff8:	0e 94 0a 04 	call	0x814	; 0x814 <dbgSendHexByte>
     ffc:	89 e0       	ldi	r24, 0x09	; 9
     ffe:	94 e0       	ldi	r25, 0x04	; 4
    1000:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                dbgSetColor(COLOR_WHITE);
    1004:	87 e0       	ldi	r24, 0x07	; 7
    1006:	0e 94 07 04 	call	0x80e	; 0x80e <dbgSetColor>
                printBoard();
    100a:	0e 94 4c 03 	call	0x698	; 0x698 <printBoard>
                return 0;
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	5b c0       	rjmp	.+182    	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
                    pMoves->to = hm[ply].ep;
                    pMoves++;
                }
                break;
            case BISHOP:
                sliderMoff = moffBishop;
    1012:	27 ed       	ldi	r18, 0xD7	; 215
    1014:	31 e0       	ldi	r19, 0x01	; 1
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
                break;
            case QUEEN:
                sliderMoff = moffQueen;
    1018:	2d ec       	ldi	r18, 0xCD	; 205
    101a:	31 e0       	ldi	r19, 0x01	; 1
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
#ifdef DEBUG_SPEZ
        uartPutc('<');
        uartSendHexByte(board[i]);
        uartPutc('>');
#endif
        sliderMoff = NULL;
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
                return 0;


        }
        // Slider Moves
        if (sliderMoff) {
    1022:	21 15       	cp	r18, r1
    1024:	31 05       	cpc	r19, r1
    1026:	11 f5       	brne	.+68     	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    1028:	25 c0       	rjmp	.+74     	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
            while (*sliderMoff) {
                to = *sliderMoff + i;
    102a:	4c 2f       	mov	r20, r28
    102c:	8c 0f       	add	r24, r28
                while (ON_BOARD(to)) {
    102e:	19 c0       	rjmp	.+50     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
                    if (!board[to]) {
    1030:	a8 2f       	mov	r26, r24
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	a5 5d       	subi	r26, 0xD5	; 213
    1036:	b9 4f       	sbci	r27, 0xF9	; 249
    1038:	9c 91       	ld	r25, X
    103a:	91 11       	cpse	r25, r1
    103c:	07 c0       	rjmp	.+14     	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
                        // empty field
                        pMoves->from = i;
    103e:	40 83       	st	Z, r20
                        pMoves->to   = to;
    1040:	81 83       	std	Z+1, r24	; 0x01
                        to += *sliderMoff;
    1042:	d9 01       	movw	r26, r18
    1044:	9c 91       	ld	r25, X
    1046:	89 0f       	add	r24, r25
                        pMoves++;
    1048:	34 96       	adiw	r30, 0x04	; 4
    104a:	0b c0       	rjmp	.+22     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
                    } else if (!(SAME_COLOR(i,to))) {
    104c:	d8 01       	movw	r26, r16
    104e:	a5 5d       	subi	r26, 0xD5	; 213
    1050:	b9 4f       	sbci	r27, 0xF9	; 249
    1052:	5c 91       	ld	r21, X
    1054:	95 23       	and	r25, r21
    1056:	98 71       	andi	r25, 0x18	; 24
    1058:	39 f4       	brne	.+14     	; 0x1068 <__DATA_REGION_LENGTH__+0x68>
                        // enemy piece
                        pMoves->from = i;
    105a:	40 83       	st	Z, r20
                        pMoves->to  = to;
    105c:	81 83       	std	Z+1, r24	; 0x01
                        pMoves++;
    105e:	34 96       	adiw	r30, 0x04	; 4
                        break;
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <__DATA_REGION_LENGTH__+0x68>
        }
        // Slider Moves
        if (sliderMoff) {
            while (*sliderMoff) {
                to = *sliderMoff + i;
                while (ON_BOARD(to)) {
    1062:	98 2f       	mov	r25, r24
    1064:	98 78       	andi	r25, 0x88	; 136
    1066:	21 f3       	breq	.-56     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
                    } else {
                        // own piece
                        break;
                    }
                }
                sliderMoff++;
    1068:	2f 5f       	subi	r18, 0xFF	; 255
    106a:	3f 4f       	sbci	r19, 0xFF	; 255


        }
        // Slider Moves
        if (sliderMoff) {
            while (*sliderMoff) {
    106c:	d9 01       	movw	r26, r18
    106e:	8c 91       	ld	r24, X
    1070:	81 11       	cpse	r24, r1
    1072:	db cf       	rjmp	.-74     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    if (side==WHITE)
        uartPuts("white\n\r");
    else
        uartPuts("black\n\r");
#endif
    for (i=SQ_A1; i<=SQ_H8; i++) {
    1074:	cf 5f       	subi	r28, 0xFF	; 255
    1076:	c8 37       	cpi	r28, 0x78	; 120
    1078:	0c f4       	brge	.+2      	; 0x107c <__DATA_REGION_LENGTH__+0x7c>
    107a:	17 ce       	rjmp	.-978    	; 0xcaa <moveGen+0x24>
                sliderMoff++;
            }
        }

    }
    pMoves->from= 0xff; // end marker
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	80 83       	st	Z, r24
    pMoves->to =  0xff;
    1080:	81 83       	std	Z+1, r24	; 0x01
    // Next moveList start
    hm[ply+1].firstEntry = pMoves;
    1082:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	ac 01       	movw	r20, r24
    108a:	4f 5f       	subi	r20, 0xFF	; 255
    108c:	5f 4f       	sbci	r21, 0xFF	; 255
    108e:	26 e1       	ldi	r18, 0x16	; 22
    1090:	24 9f       	mul	r18, r20
    1092:	d0 01       	movw	r26, r0
    1094:	25 9f       	mul	r18, r21
    1096:	b0 0d       	add	r27, r0
    1098:	11 24       	eor	r1, r1
    109a:	a9 5b       	subi	r26, 0xB9	; 185
    109c:	bb 4f       	sbci	r27, 0xFB	; 251
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	fc 93       	st	X, r31
    10a2:	ee 93       	st	-X, r30
    hm[ply+1].actEntry = pMoves;
    10a4:	13 96       	adiw	r26, 0x03	; 3
    10a6:	fc 93       	st	X, r31
    10a8:	ee 93       	st	-X, r30
    10aa:	12 97       	sbiw	r26, 0x02	; 2
#ifdef DEBUG_SPEZ
    uartPuts("\n\r");
    setColor(COLOR_WHITE);
#endif
    return hm[ply].firstEntry != pMoves;
    10ac:	28 9f       	mul	r18, r24
    10ae:	d0 01       	movw	r26, r0
    10b0:	29 9f       	mul	r18, r25
    10b2:	b0 0d       	add	r27, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	a9 5b       	subi	r26, 0xB9	; 185
    10b8:	bb 4f       	sbci	r27, 0xFB	; 251
    10ba:	2d 91       	ld	r18, X+
    10bc:	3c 91       	ld	r19, X
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	e2 17       	cp	r30, r18
    10c2:	f3 07       	cpc	r31, r19
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
}
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	08 95       	ret

000010d4 <captureMoveGen>:



uint8_t captureMoveGen() {
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    //checkBoard();
    int8_t i,h;
    const int8_t* sliderMoff = 0;
    const int8_t* off;
    uint8_t  to;
    Move* pMoves = hm[ply].firstEntry;
    10de:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    10e2:	86 e1       	ldi	r24, 0x16	; 22
    10e4:	e8 9f       	mul	r30, r24
    10e6:	f0 01       	movw	r30, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	e9 5b       	subi	r30, 0xB9	; 185
    10ec:	fb 4f       	sbci	r31, 0xFB	; 251
    10ee:	a0 81       	ld	r26, Z
    10f0:	b1 81       	ldd	r27, Z+1	; 0x01
    int8_t foff;
    for (i=SQ_A1; i<=SQ_H8; i++) {
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
    10f4:	2d c1       	rjmp	.+602    	; 0x1350 <__stack+0x251>
        if (OUTSIDE(i))  i+=8;
    10f6:	8c 2f       	mov	r24, r28
    10f8:	0c 2e       	mov	r0, r28
    10fa:	00 0c       	add	r0, r0
    10fc:	99 0b       	sbc	r25, r25
    10fe:	88 78       	andi	r24, 0x88	; 136
    1100:	99 27       	eor	r25, r25
    1102:	89 2b       	or	r24, r25
    1104:	09 f0       	breq	.+2      	; 0x1108 <__stack+0x9>
    1106:	c8 5f       	subi	r28, 0xF8	; 248
        if (!board[i]) continue;
    1108:	0c 2f       	mov	r16, r28
    110a:	0c 2e       	mov	r0, r28
    110c:	00 0c       	add	r0, r0
    110e:	11 0b       	sbc	r17, r17
    1110:	f8 01       	movw	r30, r16
    1112:	e5 5d       	subi	r30, 0xD5	; 213
    1114:	f9 4f       	sbci	r31, 0xF9	; 249
    1116:	80 81       	ld	r24, Z
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <__stack+0x1f>
    111c:	18 c1       	rjmp	.+560    	; 0x134e <__stack+0x24f>
        if (!(side & board[i])) continue;
    111e:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <side>
    1122:	28 2f       	mov	r18, r24
    1124:	29 23       	and	r18, r25
    1126:	09 f4       	brne	.+2      	; 0x112a <__stack+0x2b>
    1128:	12 c1       	rjmp	.+548    	; 0x134e <__stack+0x24f>
    112a:	87 70       	andi	r24, 0x07	; 7
        sliderMoff = NULL;
        switch (board[i]&7) {
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	09 f4       	brne	.+2      	; 0x1132 <__stack+0x33>
    1130:	df c0       	rjmp	.+446    	; 0x12f0 <__stack+0x1f1>
    1132:	30 f4       	brcc	.+12     	; 0x1140 <__stack+0x41>
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	69 f0       	breq	.+26     	; 0x1152 <__stack+0x53>
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	09 f4       	brne	.+2      	; 0x113e <__stack+0x3f>
    113c:	84 c0       	rjmp	.+264    	; 0x1246 <__stack+0x147>
    113e:	b6 c0       	rjmp	.+364    	; 0x12ac <__stack+0x1ad>
    1140:	85 30       	cpi	r24, 0x05	; 5
    1142:	09 f4       	brne	.+2      	; 0x1146 <__stack+0x47>
    1144:	d8 c0       	rjmp	.+432    	; 0x12f6 <__stack+0x1f7>
    1146:	08 f4       	brcc	.+2      	; 0x114a <__stack+0x4b>
    1148:	7b c0       	rjmp	.+246    	; 0x1240 <__stack+0x141>
    114a:	86 30       	cpi	r24, 0x06	; 6
    114c:	09 f4       	brne	.+2      	; 0x1150 <__stack+0x51>
    114e:	7b c0       	rjmp	.+246    	; 0x1246 <__stack+0x147>
    1150:	ad c0       	rjmp	.+346    	; 0x12ac <__stack+0x1ad>
            case PAWN:
            to = (side==WHITE) ? i+0x10 : i-0x10;
    1152:	98 30       	cpi	r25, 0x08	; 8
    1154:	19 f4       	brne	.+6      	; 0x115c <__stack+0x5d>
    1156:	90 e1       	ldi	r25, 0x10	; 16
    1158:	9c 0f       	add	r25, r28
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <__stack+0x61>
    115c:	90 ef       	ldi	r25, 0xF0	; 240
    115e:	9c 0f       	add	r25, r28
            if (to >= SQ_A8 || to <= SQ_H1) {
    1160:	88 ef       	ldi	r24, 0xF8	; 248
    1162:	89 0f       	add	r24, r25
    1164:	88 36       	cpi	r24, 0x68	; 104
    1166:	a0 f1       	brcs	.+104    	; 0x11d0 <__stack+0xd1>
                for (foff = KNIGHT<<4; foff <= QUEEN<<4; i+=0x10) {
                    pMoves->from = i;
    1168:	cc 93       	st	X, r28
                    pMoves->to = (to&0xf)|foff|PROMO_FLAG;
    116a:	89 2f       	mov	r24, r25
    116c:	8f 70       	andi	r24, 0x0F	; 15
    116e:	80 6a       	ori	r24, 0xA0	; 160
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	8c 93       	st	X, r24
    1174:	11 97       	sbiw	r26, 0x01	; 1
                    pMoves++;
    1176:	14 96       	adiw	r26, 0x04	; 4
        sliderMoff = NULL;
        switch (board[i]&7) {
            case PAWN:
            to = (side==WHITE) ? i+0x10 : i-0x10;
            if (to >= SQ_A8 || to <= SQ_H1) {
                for (foff = KNIGHT<<4; foff <= QUEEN<<4; i+=0x10) {
    1178:	c0 5f       	subi	r28, 0xF0	; 240
    117a:	f6 cf       	rjmp	.-20     	; 0x1168 <__stack+0x69>
                    pMoves->to = (to&0xf)|foff|PROMO_FLAG;
                    pMoves++;
                }
            }
            for (h=0x0F; h<=0x11; h+=2) { // capturing moves (left an right)
                to = (side==WHITE)? i+h : i-h;
    117c:	40 91 46 04 	lds	r20, 0x0446	; 0x800446 <side>
    1180:	48 30       	cpi	r20, 0x08	; 8
    1182:	19 f4       	brne	.+6      	; 0x118a <__stack+0x8b>
    1184:	9c 2f       	mov	r25, r28
    1186:	98 0f       	add	r25, r24
    1188:	02 c0       	rjmp	.+4      	; 0x118e <__stack+0x8f>
    118a:	9c 2f       	mov	r25, r28
    118c:	98 1b       	sub	r25, r24
                if (ON_BOARD(to) && (OTHER(side) & board[to])) {
    118e:	29 2f       	mov	r18, r25
    1190:	28 78       	andi	r18, 0x88	; 136
    1192:	e1 f4       	brne	.+56     	; 0x11cc <__stack+0xcd>
    1194:	e9 2f       	mov	r30, r25
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	e5 5d       	subi	r30, 0xD5	; 213
    119a:	f9 4f       	sbci	r31, 0xF9	; 249
    119c:	30 81       	ld	r19, Z
    119e:	28 e1       	ldi	r18, 0x18	; 24
    11a0:	24 27       	eor	r18, r20
    11a2:	23 23       	and	r18, r19
    11a4:	99 f0       	breq	.+38     	; 0x11cc <__stack+0xcd>
                    pMoves->from = i;
    11a6:	cc 93       	st	X, r28
                    pMoves->to = to;
    11a8:	11 96       	adiw	r26, 0x01	; 1
    11aa:	9c 93       	st	X, r25
    11ac:	11 97       	sbiw	r26, 0x01	; 1
                    pMoves++;
    11ae:	14 96       	adiw	r26, 0x04	; 4
                    if(to >= SQ_A8 || to <= SQ_H1) {
    11b0:	28 ef       	ldi	r18, 0xF8	; 248
    11b2:	29 0f       	add	r18, r25
    11b4:	28 36       	cpi	r18, 0x68	; 104
    11b6:	50 f0       	brcs	.+20     	; 0x11cc <__stack+0xcd>
                        for (foff = KNIGHT<<4; foff <= QUEEN<<4; i+=0x10) {
                            pMoves->from = i;
    11b8:	cc 93       	st	X, r28
                            pMoves->to = (to&0xf)|foff|PROMO_FLAG;
    11ba:	89 2f       	mov	r24, r25
    11bc:	8f 70       	andi	r24, 0x0F	; 15
    11be:	80 6a       	ori	r24, 0xA0	; 160
    11c0:	11 96       	adiw	r26, 0x01	; 1
    11c2:	8c 93       	st	X, r24
    11c4:	11 97       	sbiw	r26, 0x01	; 1
                            pMoves++;
    11c6:	14 96       	adiw	r26, 0x04	; 4
                if (ON_BOARD(to) && (OTHER(side) & board[to])) {
                    pMoves->from = i;
                    pMoves->to = to;
                    pMoves++;
                    if(to >= SQ_A8 || to <= SQ_H1) {
                        for (foff = KNIGHT<<4; foff <= QUEEN<<4; i+=0x10) {
    11c8:	c0 5f       	subi	r28, 0xF0	; 240
    11ca:	f6 cf       	rjmp	.-20     	; 0x11b8 <__stack+0xb9>
                    pMoves->from = i;
                    pMoves->to = (to&0xf)|foff|PROMO_FLAG;
                    pMoves++;
                }
            }
            for (h=0x0F; h<=0x11; h+=2) { // capturing moves (left an right)
    11cc:	8e 5f       	subi	r24, 0xFE	; 254
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <__stack+0xd3>
    11d0:	8f e0       	ldi	r24, 0x0F	; 15
    11d2:	82 31       	cpi	r24, 0x12	; 18
    11d4:	9c f2       	brlt	.-90     	; 0x117c <__stack+0x7d>
                            pMoves++;
                        }
                    }
                }
            }
            int8_t epoff = (side==WHITE) ? 0x10 : -0x10;
    11d6:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    11da:	88 30       	cpi	r24, 0x08	; 8
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <__stack+0xe3>
    11de:	80 e1       	ldi	r24, 0x10	; 16
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <__stack+0xe5>
    11e2:	80 ef       	ldi	r24, 0xF0	; 240
            if ((i+epoff-hm[ply].ep) == 1 || (hm[ply].ep+epoff-i) == 1) { // if ep field near PAWN
    11e4:	28 2f       	mov	r18, r24
    11e6:	88 0f       	add	r24, r24
    11e8:	33 0b       	sbc	r19, r19
    11ea:	a8 01       	movw	r20, r16
    11ec:	42 0f       	add	r20, r18
    11ee:	53 1f       	adc	r21, r19
    11f0:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    11f4:	96 e1       	ldi	r25, 0x16	; 22
    11f6:	e9 9f       	mul	r30, r25
    11f8:	f0 01       	movw	r30, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	e9 5b       	subi	r30, 0xB9	; 185
    11fe:	fb 4f       	sbci	r31, 0xFB	; 251
    1200:	91 89       	ldd	r25, Z+17	; 0x11
    1202:	89 2f       	mov	r24, r25
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	48 1b       	sub	r20, r24
    1208:	59 0b       	sbc	r21, r25
    120a:	41 30       	cpi	r20, 0x01	; 1
    120c:	51 05       	cpc	r21, r1
    120e:	39 f0       	breq	.+14     	; 0x121e <__stack+0x11f>
    1210:	82 0f       	add	r24, r18
    1212:	93 1f       	adc	r25, r19
    1214:	80 1b       	sub	r24, r16
    1216:	91 0b       	sbc	r25, r17
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	09 f0       	breq	.+2      	; 0x121e <__stack+0x11f>
    121c:	6f c0       	rjmp	.+222    	; 0x12fc <__stack+0x1fd>
                pMoves->from = i;
    121e:	cc 93       	st	X, r28
                pMoves->to = hm[ply].ep;
    1220:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    1224:	86 e1       	ldi	r24, 0x16	; 22
    1226:	e8 9f       	mul	r30, r24
    1228:	f0 01       	movw	r30, r0
    122a:	11 24       	eor	r1, r1
    122c:	e9 5b       	subi	r30, 0xB9	; 185
    122e:	fb 4f       	sbci	r31, 0xFB	; 251
    1230:	81 89       	ldd	r24, Z+17	; 0x11
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	8c 93       	st	X, r24
    1236:	11 97       	sbiw	r26, 0x01	; 1
                pMoves++;
    1238:	14 96       	adiw	r26, 0x04	; 4
    int8_t foff;
    for (i=SQ_A1; i<=SQ_H8; i++) {
        if (OUTSIDE(i))  i+=8;
        if (!board[i]) continue;
        if (!(side & board[i])) continue;
        sliderMoff = NULL;
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	60 c0       	rjmp	.+192    	; 0x1300 <__stack+0x201>
            break;
            case QUEEN:
            sliderMoff = moffQueen;
            break;
            case ROOK:
            sliderMoff = moffRook;
    1240:	4d ed       	ldi	r20, 0xDD	; 221
    1242:	51 e0       	ldi	r21, 0x01	; 1
            break;
    1244:	5d c0       	rjmp	.+186    	; 0x1300 <__stack+0x201>
            // Knight and King Moves
            case KING:
            case KNIGHT:
            off = ((board[i]&7) == KNIGHT)? moffKnight : moffKing;
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	39 f4       	brne	.+14     	; 0x1258 <__stack+0x159>
    124a:	0f 2e       	mov	r0, r31
    124c:	fd ee       	ldi	r31, 0xED	; 237
    124e:	ef 2e       	mov	r14, r31
    1250:	f1 e0       	ldi	r31, 0x01	; 1
    1252:	ff 2e       	mov	r15, r31
    1254:	f0 2d       	mov	r31, r0
    1256:	23 c0       	rjmp	.+70     	; 0x129e <__stack+0x19f>
    1258:	0f 2e       	mov	r0, r31
    125a:	f3 ee       	ldi	r31, 0xE3	; 227
    125c:	ef 2e       	mov	r14, r31
    125e:	f1 e0       	ldi	r31, 0x01	; 1
    1260:	ff 2e       	mov	r15, r31
    1262:	f0 2d       	mov	r31, r0
    1264:	1c c0       	rjmp	.+56     	; 0x129e <__stack+0x19f>
            while (*off) {
                to = i + *off;
    1266:	8c 0f       	add	r24, r28
                off++;
    1268:	9f ef       	ldi	r25, 0xFF	; 255
    126a:	e9 1a       	sub	r14, r25
    126c:	f9 0a       	sbc	r15, r25
                if (OUTSIDE(to)) continue;
    126e:	98 2f       	mov	r25, r24
    1270:	98 78       	andi	r25, 0x88	; 136
    1272:	a9 f4       	brne	.+42     	; 0x129e <__stack+0x19f>
                if (board[to] && (!(SAME_COLOR(to,i)))) {
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	25 5d       	subi	r18, 0xD5	; 213
    127a:	39 4f       	sbci	r19, 0xF9	; 249
    127c:	f9 01       	movw	r30, r18
    127e:	20 81       	ld	r18, Z
    1280:	22 23       	and	r18, r18
    1282:	69 f0       	breq	.+26     	; 0x129e <__stack+0x19f>
    1284:	b8 01       	movw	r22, r16
    1286:	65 5d       	subi	r22, 0xD5	; 213
    1288:	79 4f       	sbci	r23, 0xF9	; 249
    128a:	fb 01       	movw	r30, r22
    128c:	90 81       	ld	r25, Z
    128e:	92 23       	and	r25, r18
    1290:	98 71       	andi	r25, 0x18	; 24
    1292:	29 f4       	brne	.+10     	; 0x129e <__stack+0x19f>
                    pMoves->from = i;
    1294:	cc 93       	st	X, r28
                    pMoves->to = to;
    1296:	11 96       	adiw	r26, 0x01	; 1
    1298:	8c 93       	st	X, r24
    129a:	11 97       	sbiw	r26, 0x01	; 1
                    pMoves++;
    129c:	14 96       	adiw	r26, 0x04	; 4
            break;
            // Knight and King Moves
            case KING:
            case KNIGHT:
            off = ((board[i]&7) == KNIGHT)? moffKnight : moffKing;
            while (*off) {
    129e:	f7 01       	movw	r30, r14
    12a0:	80 81       	ld	r24, Z
    12a2:	81 11       	cpse	r24, r1
    12a4:	e0 cf       	rjmp	.-64     	; 0x1266 <__stack+0x167>
    int8_t foff;
    for (i=SQ_A1; i<=SQ_H8; i++) {
        if (OUTSIDE(i))  i+=8;
        if (!board[i]) continue;
        if (!(side & board[i])) continue;
        sliderMoff = NULL;
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	2a c0       	rjmp	.+84     	; 0x1300 <__stack+0x201>
                    pMoves++;
                }
            }
            break;
            default:
                criticalError = 2;
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <criticalError>
                dbgSetColor(COLOR_RED);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	0e 94 07 04 	call	0x80e	; 0x80e <dbgSetColor>
                dbgPuts("CaptureMoveGen found piece ");
    12b8:	8d e9       	ldi	r24, 0x9D	; 157
    12ba:	93 e0       	ldi	r25, 0x03	; 3
    12bc:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                dbgSendHexByte(board[i]);
    12c0:	f8 01       	movw	r30, r16
    12c2:	e5 5d       	subi	r30, 0xD5	; 213
    12c4:	f9 4f       	sbci	r31, 0xF9	; 249
    12c6:	80 81       	ld	r24, Z
    12c8:	0e 94 0a 04 	call	0x814	; 0x814 <dbgSendHexByte>
                dbgPuts(" on field "); dbgSendHexByte(i); dbgPuts("\n\r");
    12cc:	87 ec       	ldi	r24, 0xC7	; 199
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
    12d4:	8c 2f       	mov	r24, r28
    12d6:	0e 94 0a 04 	call	0x814	; 0x814 <dbgSendHexByte>
    12da:	89 e0       	ldi	r24, 0x09	; 9
    12dc:	94 e0       	ldi	r25, 0x04	; 4
    12de:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                dbgSetColor(COLOR_WHITE);
    12e2:	87 e0       	ldi	r24, 0x07	; 7
    12e4:	0e 94 07 04 	call	0x80e	; 0x80e <dbgSetColor>
                printBoard();
    12e8:	0e 94 4c 03 	call	0x698	; 0x698 <printBoard>
                return 0;
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	58 c0       	rjmp	.+176    	; 0x13a0 <__stack+0x2a1>
                pMoves->to = hm[ply].ep;
                pMoves++;
            }
            break;
            case BISHOP:
            sliderMoff = moffBishop;
    12f0:	47 ed       	ldi	r20, 0xD7	; 215
    12f2:	51 e0       	ldi	r21, 0x01	; 1
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <__stack+0x201>
            break;
            case QUEEN:
            sliderMoff = moffQueen;
    12f6:	4d ec       	ldi	r20, 0xCD	; 205
    12f8:	51 e0       	ldi	r21, 0x01	; 1
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <__stack+0x201>
    int8_t foff;
    for (i=SQ_A1; i<=SQ_H8; i++) {
        if (OUTSIDE(i))  i+=8;
        if (!board[i]) continue;
        if (!(side & board[i])) continue;
        sliderMoff = NULL;
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
                dbgSetColor(COLOR_WHITE);
                printBoard();
                return 0;
        }
        // Slider Moves
        if (sliderMoff) {
    1300:	41 15       	cp	r20, r1
    1302:	51 05       	cpc	r21, r1
    1304:	01 f5       	brne	.+64     	; 0x1346 <__stack+0x247>
    1306:	23 c0       	rjmp	.+70     	; 0x134e <__stack+0x24f>
            while (*sliderMoff) {
                to = *sliderMoff + i;
    1308:	28 2f       	mov	r18, r24
    130a:	3c 2f       	mov	r19, r28
    130c:	8c 0f       	add	r24, r28
                while (ON_BOARD(to)) {
    130e:	16 c0       	rjmp	.+44     	; 0x133c <__stack+0x23d>
                    if (!board[to]) {
    1310:	e8 2f       	mov	r30, r24
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	e5 5d       	subi	r30, 0xD5	; 213
    1316:	f9 4f       	sbci	r31, 0xF9	; 249
    1318:	90 81       	ld	r25, Z
    131a:	91 11       	cpse	r25, r1
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <__stack+0x223>
                        to += *sliderMoff;
    131e:	82 0f       	add	r24, r18
    1320:	0d c0       	rjmp	.+26     	; 0x133c <__stack+0x23d>
                    } else if (!(SAME_COLOR(to,i))) {
    1322:	f8 01       	movw	r30, r16
    1324:	e5 5d       	subi	r30, 0xD5	; 213
    1326:	f9 4f       	sbci	r31, 0xF9	; 249
    1328:	20 81       	ld	r18, Z
    132a:	92 23       	and	r25, r18
    132c:	98 71       	andi	r25, 0x18	; 24
    132e:	49 f4       	brne	.+18     	; 0x1342 <__stack+0x243>
                        pMoves->from = i;
    1330:	3c 93       	st	X, r19
                        pMoves->to  = to;
    1332:	11 96       	adiw	r26, 0x01	; 1
    1334:	8c 93       	st	X, r24
    1336:	11 97       	sbiw	r26, 0x01	; 1
                        pMoves++;
    1338:	14 96       	adiw	r26, 0x04	; 4
                        break;
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <__stack+0x243>
        }
        // Slider Moves
        if (sliderMoff) {
            while (*sliderMoff) {
                to = *sliderMoff + i;
                while (ON_BOARD(to)) {
    133c:	98 2f       	mov	r25, r24
    133e:	98 78       	andi	r25, 0x88	; 136
    1340:	39 f3       	breq	.-50     	; 0x1310 <__stack+0x211>
                        break;
                    } else {
                        break;
                    }
                }
                sliderMoff++;
    1342:	4f 5f       	subi	r20, 0xFF	; 255
    1344:	5f 4f       	sbci	r21, 0xFF	; 255
                printBoard();
                return 0;
        }
        // Slider Moves
        if (sliderMoff) {
            while (*sliderMoff) {
    1346:	fa 01       	movw	r30, r20
    1348:	80 81       	ld	r24, Z
    134a:	81 11       	cpse	r24, r1
    134c:	dd cf       	rjmp	.-70     	; 0x1308 <__stack+0x209>
    const int8_t* sliderMoff = 0;
    const int8_t* off;
    uint8_t  to;
    Move* pMoves = hm[ply].firstEntry;
    int8_t foff;
    for (i=SQ_A1; i<=SQ_H8; i++) {
    134e:	cf 5f       	subi	r28, 0xFF	; 255
    1350:	c8 37       	cpi	r28, 0x78	; 120
    1352:	0c f4       	brge	.+2      	; 0x1356 <__stack+0x257>
    1354:	d0 ce       	rjmp	.-608    	; 0x10f6 <captureMoveGen+0x22>
        }

    }
    //if (!checkBoard()) { uartPuts("fast am Ende von Movegen\n\r"); }

    pMoves->from= 0xff; // end marker
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	8c 93       	st	X, r24
    pMoves->to =  0xff;
    135a:	11 96       	adiw	r26, 0x01	; 1
    135c:	8c 93       	st	X, r24
    135e:	11 97       	sbiw	r26, 0x01	; 1
    // Next moveList start
    hm[ply+1].firstEntry = pMoves;
    1360:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	ac 01       	movw	r20, r24
    1368:	4f 5f       	subi	r20, 0xFF	; 255
    136a:	5f 4f       	sbci	r21, 0xFF	; 255
    136c:	26 e1       	ldi	r18, 0x16	; 22
    136e:	24 9f       	mul	r18, r20
    1370:	f0 01       	movw	r30, r0
    1372:	25 9f       	mul	r18, r21
    1374:	f0 0d       	add	r31, r0
    1376:	11 24       	eor	r1, r1
    1378:	e9 5b       	subi	r30, 0xB9	; 185
    137a:	fb 4f       	sbci	r31, 0xFB	; 251
    137c:	b1 83       	std	Z+1, r27	; 0x01
    137e:	a0 83       	st	Z, r26
    hm[ply+1].actEntry = pMoves;
    1380:	b3 83       	std	Z+3, r27	; 0x03
    1382:	a2 83       	std	Z+2, r26	; 0x02
    //     uartPuts("am Ende von Movegen ");
    //     uartSendHexWord((uint16_t)pMoves); newLine();
    //     uartSendHexWord((uint16_t)hm[ply+1].firstEntry); newLine();
    //     uartSendHexWord((uint16_t)hm[ply+1].actEntry); newLine();
    //     }
    return hm[ply].firstEntry != pMoves;
    1384:	28 9f       	mul	r18, r24
    1386:	f0 01       	movw	r30, r0
    1388:	29 9f       	mul	r18, r25
    138a:	f0 0d       	add	r31, r0
    138c:	11 24       	eor	r1, r1
    138e:	e9 5b       	subi	r30, 0xB9	; 185
    1390:	fb 4f       	sbci	r31, 0xFB	; 251
    1392:	20 81       	ld	r18, Z
    1394:	31 81       	ldd	r19, Z+1	; 0x01
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	a2 17       	cp	r26, r18
    139a:	b3 07       	cpc	r27, r19
    139c:	09 f4       	brne	.+2      	; 0x13a0 <__stack+0x2a1>
    139e:	80 e0       	ldi	r24, 0x00	; 0
}
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	08 95       	ret

000013ac <nextMove>:

uint8_t inCkeck() {
    return 0;
}

uint8_t nextMove(uint8_t capture) {
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    //checkBoard();
    uint8_t foundMove = 0;
    uint8_t other = OTHER(side);
    13bc:	d0 91 46 04 	lds	r29, 0x0446	; 0x800446 <side>
    13c0:	98 e1       	ldi	r25, 0x18	; 24
    13c2:	cd 2e       	mov	r12, r29
    13c4:	c9 26       	eor	r12, r25
    // Generate moves one time
    if (!hm[ply].movesGenerated) {
    13c6:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    13ca:	96 e1       	ldi	r25, 0x16	; 22
    13cc:	e9 9f       	mul	r30, r25
    13ce:	f0 01       	movw	r30, r0
    13d0:	11 24       	eor	r1, r1
    13d2:	e9 5b       	subi	r30, 0xB9	; 185
    13d4:	fb 4f       	sbci	r31, 0xFB	; 251
    13d6:	c3 89       	ldd	r28, Z+19	; 0x13
    13d8:	c1 11       	cpse	r28, r1
    13da:	18 c0       	rjmp	.+48     	; 0x140c <nextMove+0x60>
        uint8_t genmoves = 1;
        if (capture) genmoves = captureMoveGen();
    13dc:	88 23       	and	r24, r24
    13de:	19 f0       	breq	.+6      	; 0x13e6 <nextMove+0x3a>
    13e0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <captureMoveGen>
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <nextMove+0x3e>
        else genmoves = moveGen();
    13e6:	0e 94 43 06 	call	0xc86	; 0xc86 <moveGen>
        //printMovelist(ply);
        hm[ply].movesGenerated = 1;
    13ea:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    13ee:	a6 e1       	ldi	r26, 0x16	; 22
    13f0:	ea 9f       	mul	r30, r26
    13f2:	f0 01       	movw	r30, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	e9 5b       	subi	r30, 0xB9	; 185
    13f8:	fb 4f       	sbci	r31, 0xFB	; 251
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	93 8b       	std	Z+19, r25	; 0x13
        hm[ply].actEntry = hm[ply].firstEntry;
    13fe:	20 81       	ld	r18, Z
    1400:	31 81       	ldd	r19, Z+1	; 0x01
    1402:	33 83       	std	Z+3, r19	; 0x03
    1404:	22 83       	std	Z+2, r18	; 0x02
        if(!genmoves) return 0;
    1406:	88 23       	and	r24, r24
    1408:	09 f4       	brne	.+2      	; 0x140c <nextMove+0x60>
    140a:	ef c4       	rjmp	.+2526   	; 0x1dea <nextMove+0xa3e>
        //if (!checkBoard()) {
           // uartPuts("Nach moveGen\n\r");
        //}
    }
    // Prepare next half move every time
    hm[ply+1].movesGenerated = 0;
    140c:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	ac 01       	movw	r20, r24
    1414:	4f 5f       	subi	r20, 0xFF	; 255
    1416:	5f 4f       	sbci	r21, 0xFF	; 255
    1418:	36 e1       	ldi	r19, 0x16	; 22
    141a:	34 9f       	mul	r19, r20
    141c:	f0 01       	movw	r30, r0
    141e:	35 9f       	mul	r19, r21
    1420:	f0 0d       	add	r31, r0
    1422:	11 24       	eor	r1, r1
    1424:	e9 5b       	subi	r30, 0xB9	; 185
    1426:	fb 4f       	sbci	r31, 0xFB	; 251
    1428:	13 8a       	std	Z+19, r1	; 0x13
    hm[ply+1].ep = 0xff;
    142a:	2f ef       	ldi	r18, 0xFF	; 255
    142c:	21 8b       	std	Z+17, r18	; 0x11
    hm[ply+1].matBlack = hm[ply].matBlack;
    142e:	38 9f       	mul	r19, r24
    1430:	d0 01       	movw	r26, r0
    1432:	39 9f       	mul	r19, r25
    1434:	b0 0d       	add	r27, r0
    1436:	11 24       	eor	r1, r1
    1438:	a9 5b       	subi	r26, 0xB9	; 185
    143a:	bb 4f       	sbci	r27, 0xFB	; 251
    143c:	16 96       	adiw	r26, 0x06	; 6
    143e:	4d 91       	ld	r20, X+
    1440:	5c 91       	ld	r21, X
    1442:	17 97       	sbiw	r26, 0x07	; 7
    1444:	57 83       	std	Z+7, r21	; 0x07
    1446:	46 83       	std	Z+6, r20	; 0x06
    hm[ply+1].matWhite = hm[ply].matWhite;
    1448:	14 96       	adiw	r26, 0x04	; 4
    144a:	4d 91       	ld	r20, X+
    144c:	5c 91       	ld	r21, X
    144e:	15 97       	sbiw	r26, 0x05	; 5
    1450:	55 83       	std	Z+5, r21	; 0x05
    1452:	44 83       	std	Z+4, r20	; 0x04
    hm[ply+1].flags   = hm[ply].flags;
    1454:	50 96       	adiw	r26, 0x10	; 16
    1456:	3c 91       	ld	r19, X
    1458:	50 97       	sbiw	r26, 0x10	; 16
    145a:	30 8b       	std	Z+16, r19	; 0x10
    hm[ply+1].capture = EMPTY;
    145c:	12 8a       	std	Z+18, r1	; 0x12
    hm[ply].actFrom   = 0xff;
    145e:	1e 96       	adiw	r26, 0x0e	; 14
    1460:	2c 93       	st	X, r18
    1462:	1e 97       	sbiw	r26, 0x0e	; 14
    hm[ply].actTo     = 0xff;
    1464:	1f 96       	adiw	r26, 0x0f	; 15
    1466:	2c 93       	st	X, r18
    1468:	1f 97       	sbiw	r26, 0x0f	; 15
    hm[ply+1].wKingPos = hm[ply].wKingPos;
    146a:	55 96       	adiw	r26, 0x15	; 21
    146c:	2c 91       	ld	r18, X
    146e:	55 97       	sbiw	r26, 0x15	; 21
    1470:	25 8b       	std	Z+21, r18	; 0x15
    hm[ply+1].bKingPos = hm[ply].bKingPos;
    1472:	54 96       	adiw	r26, 0x14	; 20
    1474:	2c 91       	ld	r18, X
    1476:	54 97       	sbiw	r26, 0x14	; 20
    1478:	24 8b       	std	Z+20, r18	; 0x14

    // try moves from moveList
    uint8_t kingPos = (side == WHITE) ? hm[ply].wKingPos : hm[ply].bKingPos;
    147a:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <side>
    147e:	28 30       	cpi	r18, 0x08	; 8
    1480:	21 f4       	brne	.+8      	; 0x148a <nextMove+0xde>
    1482:	fd 01       	movw	r30, r26
    1484:	15 89       	ldd	r17, Z+21	; 0x15
                    }
                    if (side == WHITE)
                        hm[ply+1].matWhite += pieceValues[piece];
                    else
                        hm[ply+1].matBlack += pieceValues[piece];
                    foundMove = 1;
    1486:	d1 2c       	mov	r13, r1
    1488:	92 c4       	rjmp	.+2340   	; 0x1dae <nextMove+0xa02>
    hm[ply].actTo     = 0xff;
    hm[ply+1].wKingPos = hm[ply].wKingPos;
    hm[ply+1].bKingPos = hm[ply].bKingPos;

    // try moves from moveList
    uint8_t kingPos = (side == WHITE) ? hm[ply].wKingPos : hm[ply].bKingPos;
    148a:	26 e1       	ldi	r18, 0x16	; 22
    148c:	28 9f       	mul	r18, r24
    148e:	f0 01       	movw	r30, r0
    1490:	29 9f       	mul	r18, r25
    1492:	f0 0d       	add	r31, r0
    1494:	11 24       	eor	r1, r1
    1496:	e9 5b       	subi	r30, 0xB9	; 185
    1498:	fb 4f       	sbci	r31, 0xFB	; 251
    149a:	14 89       	ldd	r17, Z+20	; 0x14
    149c:	f4 cf       	rjmp	.-24     	; 0x1486 <nextMove+0xda>
    //uartPuts("selecting next move\n\r");
    while(hm[ply].actEntry < hm[ply+1].firstEntry) {
        switch(board[hm[ply].actEntry->from]&0x7) {
    149e:	8c 91       	ld	r24, X
    14a0:	48 2f       	mov	r20, r24
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	fa 01       	movw	r30, r20
    14a6:	e5 5d       	subi	r30, 0xD5	; 213
    14a8:	f9 4f       	sbci	r31, 0xF9	; 249
    14aa:	90 81       	ld	r25, Z
    14ac:	97 70       	andi	r25, 0x07	; 7
    14ae:	94 30       	cpi	r25, 0x04	; 4
    14b0:	30 f4       	brcc	.+12     	; 0x14be <nextMove+0x112>
    14b2:	92 30       	cpi	r25, 0x02	; 2
    14b4:	08 f0       	brcs	.+2      	; 0x14b8 <nextMove+0x10c>
    14b6:	fc c2       	rjmp	.+1528   	; 0x1ab0 <nextMove+0x704>
    14b8:	91 30       	cpi	r25, 0x01	; 1
    14ba:	51 f0       	breq	.+20     	; 0x14d0 <nextMove+0x124>
    14bc:	ae c3       	rjmp	.+1884   	; 0x1c1a <nextMove+0x86e>
    14be:	95 30       	cpi	r25, 0x05	; 5
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <nextMove+0x118>
    14c2:	f6 c2       	rjmp	.+1516   	; 0x1ab0 <nextMove+0x704>
    14c4:	08 f4       	brcc	.+2      	; 0x14c8 <nextMove+0x11c>
    14c6:	70 c2       	rjmp	.+1248   	; 0x19a8 <nextMove+0x5fc>
    14c8:	96 30       	cpi	r25, 0x06	; 6
    14ca:	09 f4       	brne	.+2      	; 0x14ce <nextMove+0x122>
    14cc:	65 c1       	rjmp	.+714    	; 0x1798 <nextMove+0x3ec>
    14ce:	a5 c3       	rjmp	.+1866   	; 0x1c1a <nextMove+0x86e>
            case PAWN:
                board[hm[ply].actEntry->from] = EMPTY;
    14d0:	fa 01       	movw	r30, r20
    14d2:	e5 5d       	subi	r30, 0xD5	; 213
    14d4:	f9 4f       	sbci	r31, 0xF9	; 249
    14d6:	10 82       	st	Z, r1
                if (hm[ply].ep == hm[ply].actEntry->to) {
    14d8:	86 e1       	ldi	r24, 0x16	; 22
    14da:	82 9f       	mul	r24, r18
    14dc:	f0 01       	movw	r30, r0
    14de:	83 9f       	mul	r24, r19
    14e0:	f0 0d       	add	r31, r0
    14e2:	11 24       	eor	r1, r1
    14e4:	e9 5b       	subi	r30, 0xB9	; 185
    14e6:	fb 4f       	sbci	r31, 0xFB	; 251
    14e8:	81 89       	ldd	r24, Z+17	; 0x11
    14ea:	11 96       	adiw	r26, 0x01	; 1
    14ec:	ec 91       	ld	r30, X
    14ee:	8e 13       	cpse	r24, r30
    14f0:	45 c0       	rjmp	.+138    	; 0x157c <nextMove+0x1d0>
                    board[hm[ply].actEntry->to] = PAWN|side;
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <side>
    14f8:	e5 5d       	subi	r30, 0xD5	; 213
    14fa:	f9 4f       	sbci	r31, 0xF9	; 249
    14fc:	49 2f       	mov	r20, r25
    14fe:	41 60       	ori	r20, 0x01	; 1
    1500:	40 83       	st	Z, r20
                    uint8_t pawnHit = (side == WHITE) ? hm[ply].ep-0x10 : hm[ply].ep+0x10;
    1502:	98 30       	cpi	r25, 0x08	; 8
    1504:	11 f4       	brne	.+4      	; 0x150a <nextMove+0x15e>
    1506:	80 51       	subi	r24, 0x10	; 16
    1508:	01 c0       	rjmp	.+2      	; 0x150c <nextMove+0x160>
    150a:	80 5f       	subi	r24, 0xF0	; 240
                    board[pawnHit] = EMPTY;
    150c:	e8 2e       	mov	r14, r24
    150e:	f1 2c       	mov	r15, r1
    1510:	f7 01       	movw	r30, r14
    1512:	e5 5d       	subi	r30, 0xD5	; 213
    1514:	f9 4f       	sbci	r31, 0xF9	; 249
    1516:	10 82       	st	Z, r1
                    hm[ply].capture = PAWN|other;
    1518:	0c 2d       	mov	r16, r12
    151a:	01 60       	ori	r16, 0x01	; 1
    151c:	86 e1       	ldi	r24, 0x16	; 22
    151e:	82 9f       	mul	r24, r18
    1520:	f0 01       	movw	r30, r0
    1522:	83 9f       	mul	r24, r19
    1524:	f0 0d       	add	r31, r0
    1526:	11 24       	eor	r1, r1
    1528:	e9 5b       	subi	r30, 0xB9	; 185
    152a:	fb 4f       	sbci	r31, 0xFB	; 251
    152c:	02 8b       	std	Z+18, r16	; 0x12
                    if (isAttacked(kingPos,other)) {
    152e:	6c 2d       	mov	r22, r12
    1530:	81 2f       	mov	r24, r17
    1532:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    1536:	88 23       	and	r24, r24
    1538:	09 f4       	brne	.+2      	; 0x153c <nextMove+0x190>
    153a:	a7 c3       	rjmp	.+1870   	; 0x1c8a <nextMove+0x8de>
                        board[hm[ply].actEntry->to] = EMPTY;
    153c:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    1540:	b6 e1       	ldi	r27, 0x16	; 22
    1542:	eb 9f       	mul	r30, r27
    1544:	f0 01       	movw	r30, r0
    1546:	11 24       	eor	r1, r1
    1548:	e9 5b       	subi	r30, 0xB9	; 185
    154a:	fb 4f       	sbci	r31, 0xFB	; 251
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	ec 01       	movw	r28, r24
    1552:	29 81       	ldd	r18, Y+1	; 0x01
    1554:	a2 2f       	mov	r26, r18
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	a5 5d       	subi	r26, 0xD5	; 213
    155a:	b9 4f       	sbci	r27, 0xF9	; 249
    155c:	1c 92       	st	X, r1
                        board[pawnHit] = PAWN|other;
    155e:	d7 01       	movw	r26, r14
    1560:	a5 5d       	subi	r26, 0xD5	; 213
    1562:	b9 4f       	sbci	r27, 0xF9	; 249
    1564:	0c 93       	st	X, r16
                        board[hm[ply].actEntry->from] = PAWN|side;
    1566:	88 81       	ld	r24, Y
    1568:	a8 2f       	mov	r26, r24
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	a5 5d       	subi	r26, 0xD5	; 213
    156e:	b9 4f       	sbci	r27, 0xF9	; 249
    1570:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    1574:	81 60       	ori	r24, 0x01	; 1
    1576:	8c 93       	st	X, r24
                        hm[ply].capture = EMPTY;
    1578:	12 8a       	std	Z+18, r1	; 0x12
                        break;
    157a:	92 c3       	rjmp	.+1828   	; 0x1ca0 <nextMove+0x8f4>
                    }
                    foundMove = 1;
                } else if (hm[ply].actEntry->to & PROMO_FLAG) {
    157c:	ee 23       	and	r30, r30
    157e:	0c f0       	brlt	.+2      	; 0x1582 <nextMove+0x1d6>
    1580:	7d c0       	rjmp	.+250    	; 0x167c <nextMove+0x2d0>
                    uint8_t to = (hm[ply].actEntry->to & 0xf) | ((side == WHITE ) ? SQ_A8 : SQ_A1);
    1582:	8e 2f       	mov	r24, r30
    1584:	8f 70       	andi	r24, 0x0F	; 15
    1586:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <side>
    158a:	98 30       	cpi	r25, 0x08	; 8
    158c:	11 f4       	brne	.+4      	; 0x1592 <nextMove+0x1e6>
    158e:	40 e7       	ldi	r20, 0x70	; 112
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <nextMove+0x1e8>
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	e4 2e       	mov	r14, r20
    1596:	e8 2a       	or	r14, r24
                    uint8_t piece = ((hm[ply].actEntry->to >> 4) & 0x7) | side ;
    1598:	e2 95       	swap	r30
    159a:	ef 70       	andi	r30, 0x0F	; 15
    159c:	e7 70       	andi	r30, 0x07	; 7
    159e:	0e 2f       	mov	r16, r30
    15a0:	09 2b       	or	r16, r25
                    hm[ply].capture = board[to];
    15a2:	f1 2c       	mov	r15, r1
    15a4:	f7 01       	movw	r30, r14
    15a6:	e5 5d       	subi	r30, 0xD5	; 213
    15a8:	f9 4f       	sbci	r31, 0xF9	; 249
    15aa:	80 81       	ld	r24, Z
    15ac:	96 e1       	ldi	r25, 0x16	; 22
    15ae:	92 9f       	mul	r25, r18
    15b0:	d0 01       	movw	r26, r0
    15b2:	93 9f       	mul	r25, r19
    15b4:	b0 0d       	add	r27, r0
    15b6:	11 24       	eor	r1, r1
    15b8:	a9 5b       	subi	r26, 0xB9	; 185
    15ba:	bb 4f       	sbci	r27, 0xFB	; 251
    15bc:	52 96       	adiw	r26, 0x12	; 18
    15be:	8c 93       	st	X, r24
                    board[to] = piece;
    15c0:	00 83       	st	Z, r16
                    if (isAttacked(kingPos,other)) {
    15c2:	6c 2d       	mov	r22, r12
    15c4:	81 2f       	mov	r24, r17
    15c6:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    15ca:	88 23       	and	r24, r24
    15cc:	c9 f0       	breq	.+50     	; 0x1600 <nextMove+0x254>
                        board[hm[ply].actEntry->from] = PAWN|side;
    15ce:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    15d2:	d6 e1       	ldi	r29, 0x16	; 22
    15d4:	ed 9f       	mul	r30, r29
    15d6:	f0 01       	movw	r30, r0
    15d8:	11 24       	eor	r1, r1
    15da:	e9 5b       	subi	r30, 0xB9	; 185
    15dc:	fb 4f       	sbci	r31, 0xFB	; 251
    15de:	a2 81       	ldd	r26, Z+2	; 0x02
    15e0:	b3 81       	ldd	r27, Z+3	; 0x03
    15e2:	ac 91       	ld	r26, X
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	a5 5d       	subi	r26, 0xD5	; 213
    15e8:	b9 4f       	sbci	r27, 0xF9	; 249
    15ea:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    15ee:	81 60       	ori	r24, 0x01	; 1
    15f0:	8c 93       	st	X, r24
                        board[to] = hm[ply].capture;
    15f2:	82 89       	ldd	r24, Z+18	; 0x12
    15f4:	d7 01       	movw	r26, r14
    15f6:	a5 5d       	subi	r26, 0xD5	; 213
    15f8:	b9 4f       	sbci	r27, 0xF9	; 249
    15fa:	8c 93       	st	X, r24
                        hm[ply].capture = EMPTY;
    15fc:	12 8a       	std	Z+18, r1	; 0x12
                        break;
    15fe:	50 c3       	rjmp	.+1696   	; 0x1ca0 <nextMove+0x8f4>
                    }
                    if (side == WHITE)
    1600:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	e9 f4       	brne	.+58     	; 0x1642 <nextMove+0x296>
                        hm[ply+1].matWhite += pieceValues[piece];
    1608:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	e0 2f       	mov	r30, r16
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	e9 50       	subi	r30, 0x09	; 9
    161a:	fd 4f       	sbci	r31, 0xFD	; 253
    161c:	20 81       	ld	r18, Z
    161e:	31 81       	ldd	r19, Z+1	; 0x01
    1620:	46 e1       	ldi	r20, 0x16	; 22
    1622:	48 9f       	mul	r20, r24
    1624:	f0 01       	movw	r30, r0
    1626:	49 9f       	mul	r20, r25
    1628:	f0 0d       	add	r31, r0
    162a:	11 24       	eor	r1, r1
    162c:	e9 5b       	subi	r30, 0xB9	; 185
    162e:	fb 4f       	sbci	r31, 0xFB	; 251
    1630:	84 81       	ldd	r24, Z+4	; 0x04
    1632:	95 81       	ldd	r25, Z+5	; 0x05
    1634:	82 0f       	add	r24, r18
    1636:	93 1f       	adc	r25, r19
    1638:	95 83       	std	Z+5, r25	; 0x05
    163a:	84 83       	std	Z+4, r24	; 0x04
                    else
                        hm[ply+1].matBlack += pieceValues[piece];
                    foundMove = 1;
    163c:	dd 24       	eor	r13, r13
    163e:	d3 94       	inc	r13
    1640:	2f c3       	rjmp	.+1630   	; 0x1ca0 <nextMove+0x8f4>
                        break;
                    }
                    if (side == WHITE)
                        hm[ply+1].matWhite += pieceValues[piece];
                    else
                        hm[ply+1].matBlack += pieceValues[piece];
    1642:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	e0 2f       	mov	r30, r16
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	e9 50       	subi	r30, 0x09	; 9
    1654:	fd 4f       	sbci	r31, 0xFD	; 253
    1656:	20 81       	ld	r18, Z
    1658:	31 81       	ldd	r19, Z+1	; 0x01
    165a:	46 e1       	ldi	r20, 0x16	; 22
    165c:	48 9f       	mul	r20, r24
    165e:	f0 01       	movw	r30, r0
    1660:	49 9f       	mul	r20, r25
    1662:	f0 0d       	add	r31, r0
    1664:	11 24       	eor	r1, r1
    1666:	e9 5b       	subi	r30, 0xB9	; 185
    1668:	fb 4f       	sbci	r31, 0xFB	; 251
    166a:	86 81       	ldd	r24, Z+6	; 0x06
    166c:	97 81       	ldd	r25, Z+7	; 0x07
    166e:	82 0f       	add	r24, r18
    1670:	93 1f       	adc	r25, r19
    1672:	97 83       	std	Z+7, r25	; 0x07
    1674:	86 83       	std	Z+6, r24	; 0x06
                    foundMove = 1;
    1676:	dd 24       	eor	r13, r13
    1678:	d3 94       	inc	r13
    167a:	12 c3       	rjmp	.+1572   	; 0x1ca0 <nextMove+0x8f4>
                } else {
                    hm[ply].capture = board[hm[ply].actEntry->to];
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	e5 5d       	subi	r30, 0xD5	; 213
    1680:	f9 4f       	sbci	r31, 0xF9	; 249
    1682:	80 81       	ld	r24, Z
    1684:	96 e1       	ldi	r25, 0x16	; 22
    1686:	92 9f       	mul	r25, r18
    1688:	f0 01       	movw	r30, r0
    168a:	93 9f       	mul	r25, r19
    168c:	f0 0d       	add	r31, r0
    168e:	11 24       	eor	r1, r1
    1690:	e9 5b       	subi	r30, 0xB9	; 185
    1692:	fb 4f       	sbci	r31, 0xFB	; 251
    1694:	82 8b       	std	Z+18, r24	; 0x12
                    board[hm[ply].actEntry->to] = PAWN | side;
    1696:	02 80       	ldd	r0, Z+2	; 0x02
    1698:	f3 81       	ldd	r31, Z+3	; 0x03
    169a:	e0 2d       	mov	r30, r0
    169c:	e1 81       	ldd	r30, Z+1	; 0x01
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	e5 5d       	subi	r30, 0xD5	; 213
    16a2:	f9 4f       	sbci	r31, 0xF9	; 249
    16a4:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    16a8:	81 60       	ori	r24, 0x01	; 1
    16aa:	80 83       	st	Z, r24
                    if (isAttacked(kingPos,other)) {
    16ac:	6c 2d       	mov	r22, r12
    16ae:	81 2f       	mov	r24, r17
    16b0:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    16b4:	88 23       	and	r24, r24
    16b6:	f1 f0       	breq	.+60     	; 0x16f4 <nextMove+0x348>
                        board[hm[ply].actEntry->from] = PAWN | side;
    16b8:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    16bc:	86 e1       	ldi	r24, 0x16	; 22
    16be:	e8 9f       	mul	r30, r24
    16c0:	f0 01       	movw	r30, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	e9 5b       	subi	r30, 0xB9	; 185
    16c6:	fb 4f       	sbci	r31, 0xFB	; 251
    16c8:	22 81       	ldd	r18, Z+2	; 0x02
    16ca:	33 81       	ldd	r19, Z+3	; 0x03
    16cc:	d9 01       	movw	r26, r18
    16ce:	8c 91       	ld	r24, X
    16d0:	a8 2f       	mov	r26, r24
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	a5 5d       	subi	r26, 0xD5	; 213
    16d6:	b9 4f       	sbci	r27, 0xF9	; 249
    16d8:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    16dc:	81 60       	ori	r24, 0x01	; 1
    16de:	8c 93       	st	X, r24
                        board[hm[ply].actEntry->to] = hm[ply].capture;
    16e0:	e9 01       	movw	r28, r18
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	a8 2f       	mov	r26, r24
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	82 89       	ldd	r24, Z+18	; 0x12
    16ea:	a5 5d       	subi	r26, 0xD5	; 213
    16ec:	b9 4f       	sbci	r27, 0xF9	; 249
    16ee:	8c 93       	st	X, r24
                        hm[ply].capture = EMPTY;
    16f0:	12 8a       	std	Z+18, r1	; 0x12
                        break;
    16f2:	d6 c2       	rjmp	.+1452   	; 0x1ca0 <nextMove+0x8f4>
                    }
                    if (side == WHITE && (hm[ply].actEntry->to - hm[ply].actEntry->from == 0x20))
    16f4:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    16f8:	88 30       	cpi	r24, 0x08	; 8
    16fa:	31 f5       	brne	.+76     	; 0x1748 <nextMove+0x39c>
    16fc:	20 91 ac 06 	lds	r18, 0x06AC	; 0x8006ac <ply>
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	96 e1       	ldi	r25, 0x16	; 22
    1704:	92 9f       	mul	r25, r18
    1706:	f0 01       	movw	r30, r0
    1708:	93 9f       	mul	r25, r19
    170a:	f0 0d       	add	r31, r0
    170c:	11 24       	eor	r1, r1
    170e:	e9 5b       	subi	r30, 0xB9	; 185
    1710:	fb 4f       	sbci	r31, 0xFB	; 251
    1712:	02 80       	ldd	r0, Z+2	; 0x02
    1714:	f3 81       	ldd	r31, Z+3	; 0x03
    1716:	e0 2d       	mov	r30, r0
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	60 81       	ld	r22, Z
    171c:	49 2f       	mov	r20, r25
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	46 1b       	sub	r20, r22
    1722:	51 09       	sbc	r21, r1
    1724:	40 32       	cpi	r20, 0x20	; 32
    1726:	51 05       	cpc	r21, r1
    1728:	79 f4       	brne	.+30     	; 0x1748 <nextMove+0x39c>
                    hm[ply+1].ep = hm[ply].actEntry->to - 0x10;
    172a:	2f 5f       	subi	r18, 0xFF	; 255
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	86 e1       	ldi	r24, 0x16	; 22
    1730:	82 9f       	mul	r24, r18
    1732:	f0 01       	movw	r30, r0
    1734:	83 9f       	mul	r24, r19
    1736:	f0 0d       	add	r31, r0
    1738:	11 24       	eor	r1, r1
    173a:	e9 5b       	subi	r30, 0xB9	; 185
    173c:	fb 4f       	sbci	r31, 0xFB	; 251
    173e:	90 51       	subi	r25, 0x10	; 16
    1740:	91 8b       	std	Z+17, r25	; 0x11
                    else if (side == BLACK && (hm[ply].actEntry->from - hm[ply].actEntry->to == 0x20))
                    hm[ply+1].ep = hm[ply].actEntry->to + 0x10;
                    foundMove = 1;
    1742:	dd 24       	eor	r13, r13
    1744:	d3 94       	inc	r13
                        board[hm[ply].actEntry->to] = hm[ply].capture;
                        hm[ply].capture = EMPTY;
                        break;
                    }
                    if (side == WHITE && (hm[ply].actEntry->to - hm[ply].actEntry->from == 0x20))
                    hm[ply+1].ep = hm[ply].actEntry->to - 0x10;
    1746:	ac c2       	rjmp	.+1368   	; 0x1ca0 <nextMove+0x8f4>
                    else if (side == BLACK && (hm[ply].actEntry->from - hm[ply].actEntry->to == 0x20))
    1748:	80 31       	cpi	r24, 0x10	; 16
    174a:	09 f0       	breq	.+2      	; 0x174e <nextMove+0x3a2>
    174c:	a1 c2       	rjmp	.+1346   	; 0x1c90 <nextMove+0x8e4>
    174e:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	26 e1       	ldi	r18, 0x16	; 22
    1756:	28 9f       	mul	r18, r24
    1758:	f0 01       	movw	r30, r0
    175a:	29 9f       	mul	r18, r25
    175c:	f0 0d       	add	r31, r0
    175e:	11 24       	eor	r1, r1
    1760:	e9 5b       	subi	r30, 0xB9	; 185
    1762:	fb 4f       	sbci	r31, 0xFB	; 251
    1764:	02 80       	ldd	r0, Z+2	; 0x02
    1766:	f3 81       	ldd	r31, Z+3	; 0x03
    1768:	e0 2d       	mov	r30, r0
    176a:	20 81       	ld	r18, Z
    176c:	41 81       	ldd	r20, Z+1	; 0x01
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	24 1b       	sub	r18, r20
    1772:	31 09       	sbc	r19, r1
    1774:	20 32       	cpi	r18, 0x20	; 32
    1776:	31 05       	cpc	r19, r1
    1778:	09 f0       	breq	.+2      	; 0x177c <nextMove+0x3d0>
    177a:	8d c2       	rjmp	.+1306   	; 0x1c96 <nextMove+0x8ea>
                    hm[ply+1].ep = hm[ply].actEntry->to + 0x10;
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	26 e1       	ldi	r18, 0x16	; 22
    1780:	28 9f       	mul	r18, r24
    1782:	f0 01       	movw	r30, r0
    1784:	29 9f       	mul	r18, r25
    1786:	f0 0d       	add	r31, r0
    1788:	11 24       	eor	r1, r1
    178a:	e9 5b       	subi	r30, 0xB9	; 185
    178c:	fb 4f       	sbci	r31, 0xFB	; 251
    178e:	40 5f       	subi	r20, 0xF0	; 240
    1790:	41 8b       	std	Z+17, r20	; 0x11
                    foundMove = 1;
    1792:	dd 24       	eor	r13, r13
    1794:	d3 94       	inc	r13
    1796:	84 c2       	rjmp	.+1288   	; 0x1ca0 <nextMove+0x8f4>
                }
                break;
            case KING:
                if (side == WHITE_MOVE) {
    1798:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <side>
    179c:	98 30       	cpi	r25, 0x08	; 8
    179e:	09 f0       	breq	.+2      	; 0x17a2 <nextMove+0x3f6>
    17a0:	80 c0       	rjmp	.+256    	; 0x18a2 <nextMove+0x4f6>
                    if (hm[ply].actEntry->from == SQ_E1) {
    17a2:	84 30       	cpi	r24, 0x04	; 4
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <nextMove+0x3fc>
    17a6:	00 c1       	rjmp	.+512    	; 0x19a8 <nextMove+0x5fc>
                        hm[ply+1].flags&=~(FLAG_CS_WHITE|FLAG_CL_WHITE);
    17a8:	96 e1       	ldi	r25, 0x16	; 22
    17aa:	96 9f       	mul	r25, r22
    17ac:	f0 01       	movw	r30, r0
    17ae:	97 9f       	mul	r25, r23
    17b0:	f0 0d       	add	r31, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	e9 5b       	subi	r30, 0xB9	; 185
    17b6:	fb 4f       	sbci	r31, 0xFB	; 251
    17b8:	80 89       	ldd	r24, Z+16	; 0x10
    17ba:	8c 7f       	andi	r24, 0xFC	; 252
    17bc:	80 8b       	std	Z+16, r24	; 0x10
                        if (hm[ply].actEntry->to == SQ_G1 && !isAttacked(SQ_E1,other) && !isAttacked(SQ_F1,other) && !isAttacked(SQ_G1,other)) {  // short castle
    17be:	92 9f       	mul	r25, r18
    17c0:	f0 01       	movw	r30, r0
    17c2:	93 9f       	mul	r25, r19
    17c4:	f0 0d       	add	r31, r0
    17c6:	11 24       	eor	r1, r1
    17c8:	e9 5b       	subi	r30, 0xB9	; 185
    17ca:	fb 4f       	sbci	r31, 0xFB	; 251
    17cc:	02 80       	ldd	r0, Z+2	; 0x02
    17ce:	f3 81       	ldd	r31, Z+3	; 0x03
    17d0:	e0 2d       	mov	r30, r0
    17d2:	81 81       	ldd	r24, Z+1	; 0x01
    17d4:	86 30       	cpi	r24, 0x06	; 6
    17d6:	59 f5       	brne	.+86     	; 0x182e <nextMove+0x482>
    17d8:	6c 2d       	mov	r22, r12
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    17e0:	81 11       	cpse	r24, r1
    17e2:	25 c0       	rjmp	.+74     	; 0x182e <nextMove+0x482>
    17e4:	6c 2d       	mov	r22, r12
    17e6:	85 e0       	ldi	r24, 0x05	; 5
    17e8:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    17ec:	81 11       	cpse	r24, r1
    17ee:	1f c0       	rjmp	.+62     	; 0x182e <nextMove+0x482>
    17f0:	6c 2d       	mov	r22, r12
    17f2:	86 e0       	ldi	r24, 0x06	; 6
    17f4:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    17f8:	81 11       	cpse	r24, r1
    17fa:	19 c0       	rjmp	.+50     	; 0x182e <nextMove+0x482>
                            hm[ply+1].wKingPos = SQ_G1;
    17fc:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	26 e1       	ldi	r18, 0x16	; 22
    1806:	28 9f       	mul	r18, r24
    1808:	f0 01       	movw	r30, r0
    180a:	29 9f       	mul	r18, r25
    180c:	f0 0d       	add	r31, r0
    180e:	11 24       	eor	r1, r1
    1810:	e9 5b       	subi	r30, 0xB9	; 185
    1812:	fb 4f       	sbci	r31, 0xFB	; 251
    1814:	86 e0       	ldi	r24, 0x06	; 6
    1816:	85 8b       	std	Z+21, r24	; 0x15
                            board[SQ_G1] = WKING; board[SQ_E1] = EMPTY; board[SQ_F1] = WROOK; board[SQ_H1] = EMPTY;
    1818:	eb e2       	ldi	r30, 0x2B	; 43
    181a:	f6 e0       	ldi	r31, 0x06	; 6
    181c:	8e e0       	ldi	r24, 0x0E	; 14
    181e:	86 83       	std	Z+6, r24	; 0x06
    1820:	14 82       	std	Z+4, r1	; 0x04
    1822:	8c e0       	ldi	r24, 0x0C	; 12
    1824:	85 83       	std	Z+5, r24	; 0x05
    1826:	17 82       	std	Z+7, r1	; 0x07
                            foundMove=1;
    1828:	dd 24       	eor	r13, r13
    182a:	d3 94       	inc	r13
                            break;
    182c:	39 c2       	rjmp	.+1138   	; 0x1ca0 <nextMove+0x8f4>
                        }
                        else if (hm[ply].actEntry->to == SQ_C1 && !isAttacked(SQ_E1,other) && !isAttacked(SQ_D1,other) && !isAttacked(SQ_C1,other)) {  // long castle
    182e:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    1832:	d6 e1       	ldi	r29, 0x16	; 22
    1834:	ed 9f       	mul	r30, r29
    1836:	f0 01       	movw	r30, r0
    1838:	11 24       	eor	r1, r1
    183a:	e9 5b       	subi	r30, 0xB9	; 185
    183c:	fb 4f       	sbci	r31, 0xFB	; 251
    183e:	02 80       	ldd	r0, Z+2	; 0x02
    1840:	f3 81       	ldd	r31, Z+3	; 0x03
    1842:	e0 2d       	mov	r30, r0
    1844:	81 81       	ldd	r24, Z+1	; 0x01
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	09 f0       	breq	.+2      	; 0x184c <nextMove+0x4a0>
    184a:	ae c0       	rjmp	.+348    	; 0x19a8 <nextMove+0x5fc>
    184c:	6c 2d       	mov	r22, r12
    184e:	84 e0       	ldi	r24, 0x04	; 4
    1850:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    1854:	81 11       	cpse	r24, r1
    1856:	a8 c0       	rjmp	.+336    	; 0x19a8 <nextMove+0x5fc>
    1858:	6c 2d       	mov	r22, r12
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    1860:	81 11       	cpse	r24, r1
    1862:	a2 c0       	rjmp	.+324    	; 0x19a8 <nextMove+0x5fc>
    1864:	6c 2d       	mov	r22, r12
    1866:	82 e0       	ldi	r24, 0x02	; 2
    1868:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    186c:	81 11       	cpse	r24, r1
    186e:	9c c0       	rjmp	.+312    	; 0x19a8 <nextMove+0x5fc>
                            hm[ply+1].wKingPos = SQ_C1;
    1870:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	26 e1       	ldi	r18, 0x16	; 22
    187a:	28 9f       	mul	r18, r24
    187c:	f0 01       	movw	r30, r0
    187e:	29 9f       	mul	r18, r25
    1880:	f0 0d       	add	r31, r0
    1882:	11 24       	eor	r1, r1
    1884:	e9 5b       	subi	r30, 0xB9	; 185
    1886:	fb 4f       	sbci	r31, 0xFB	; 251
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	85 8b       	std	Z+21, r24	; 0x15
                            board[SQ_C1] = WKING; board[SQ_E1] = EMPTY; board[SQ_D1] = WROOK;  board[SQ_A1] = EMPTY;
    188c:	eb e2       	ldi	r30, 0x2B	; 43
    188e:	f6 e0       	ldi	r31, 0x06	; 6
    1890:	8e e0       	ldi	r24, 0x0E	; 14
    1892:	82 83       	std	Z+2, r24	; 0x02
    1894:	14 82       	std	Z+4, r1	; 0x04
    1896:	8c e0       	ldi	r24, 0x0C	; 12
    1898:	83 83       	std	Z+3, r24	; 0x03
    189a:	10 82       	st	Z, r1
                            foundMove=1;
    189c:	dd 24       	eor	r13, r13
    189e:	d3 94       	inc	r13
                            break;
    18a0:	ff c1       	rjmp	.+1022   	; 0x1ca0 <nextMove+0x8f4>
                        }
                    }
                }  else {
                    if (hm[ply].actEntry->from == SQ_E8) {
    18a2:	84 37       	cpi	r24, 0x74	; 116
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <nextMove+0x4fc>
    18a6:	80 c0       	rjmp	.+256    	; 0x19a8 <nextMove+0x5fc>
                        hm[ply+1].flags&=~(FLAG_CS_BLACK|FLAG_CL_BLACK);
    18a8:	96 e1       	ldi	r25, 0x16	; 22
    18aa:	96 9f       	mul	r25, r22
    18ac:	f0 01       	movw	r30, r0
    18ae:	97 9f       	mul	r25, r23
    18b0:	f0 0d       	add	r31, r0
    18b2:	11 24       	eor	r1, r1
    18b4:	e9 5b       	subi	r30, 0xB9	; 185
    18b6:	fb 4f       	sbci	r31, 0xFB	; 251
    18b8:	80 89       	ldd	r24, Z+16	; 0x10
    18ba:	83 7f       	andi	r24, 0xF3	; 243
    18bc:	80 8b       	std	Z+16, r24	; 0x10
                        if (hm[ply].actEntry->to == SQ_G8 && !isAttacked(SQ_E8,other) && !isAttacked(SQ_F8,other) && !isAttacked(SQ_G8,other)) {  // short castle
    18be:	92 9f       	mul	r25, r18
    18c0:	f0 01       	movw	r30, r0
    18c2:	93 9f       	mul	r25, r19
    18c4:	f0 0d       	add	r31, r0
    18c6:	11 24       	eor	r1, r1
    18c8:	e9 5b       	subi	r30, 0xB9	; 185
    18ca:	fb 4f       	sbci	r31, 0xFB	; 251
    18cc:	02 80       	ldd	r0, Z+2	; 0x02
    18ce:	f3 81       	ldd	r31, Z+3	; 0x03
    18d0:	e0 2d       	mov	r30, r0
    18d2:	81 81       	ldd	r24, Z+1	; 0x01
    18d4:	86 37       	cpi	r24, 0x76	; 118
    18d6:	69 f5       	brne	.+90     	; 0x1932 <nextMove+0x586>
    18d8:	6c 2d       	mov	r22, r12
    18da:	84 e7       	ldi	r24, 0x74	; 116
    18dc:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    18e0:	81 11       	cpse	r24, r1
    18e2:	27 c0       	rjmp	.+78     	; 0x1932 <nextMove+0x586>
    18e4:	6c 2d       	mov	r22, r12
    18e6:	85 e7       	ldi	r24, 0x75	; 117
    18e8:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    18ec:	81 11       	cpse	r24, r1
    18ee:	21 c0       	rjmp	.+66     	; 0x1932 <nextMove+0x586>
    18f0:	6c 2d       	mov	r22, r12
    18f2:	86 e7       	ldi	r24, 0x76	; 118
    18f4:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    18f8:	81 11       	cpse	r24, r1
    18fa:	1b c0       	rjmp	.+54     	; 0x1932 <nextMove+0x586>
                            hm[ply+1].bKingPos = SQ_G8;
    18fc:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	26 e1       	ldi	r18, 0x16	; 22
    1906:	28 9f       	mul	r18, r24
    1908:	f0 01       	movw	r30, r0
    190a:	29 9f       	mul	r18, r25
    190c:	f0 0d       	add	r31, r0
    190e:	11 24       	eor	r1, r1
    1910:	e9 5b       	subi	r30, 0xB9	; 185
    1912:	fb 4f       	sbci	r31, 0xFB	; 251
    1914:	86 e7       	ldi	r24, 0x76	; 118
    1916:	84 8b       	std	Z+20, r24	; 0x14
                            board[SQ_G8] = WKING; board[SQ_E8] = EMPTY; board[SQ_F8] = WROOK; board[SQ_H8] = EMPTY;
    1918:	8e e0       	ldi	r24, 0x0E	; 14
    191a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <board+0x76>
    191e:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <board+0x74>
    1922:	8c e0       	ldi	r24, 0x0C	; 12
    1924:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <board+0x75>
    1928:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <board+0x77>
                            foundMove=1;
    192c:	dd 24       	eor	r13, r13
    192e:	d3 94       	inc	r13
                            break;
    1930:	b7 c1       	rjmp	.+878    	; 0x1ca0 <nextMove+0x8f4>
                        } else if (hm[ply].actEntry->to == SQ_C8 && !isAttacked(SQ_E8,other) && !isAttacked(SQ_D8,other) && !isAttacked(SQ_C8,other)) {  // long castle
    1932:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    1936:	86 e1       	ldi	r24, 0x16	; 22
    1938:	e8 9f       	mul	r30, r24
    193a:	f0 01       	movw	r30, r0
    193c:	11 24       	eor	r1, r1
    193e:	e9 5b       	subi	r30, 0xB9	; 185
    1940:	fb 4f       	sbci	r31, 0xFB	; 251
    1942:	02 80       	ldd	r0, Z+2	; 0x02
    1944:	f3 81       	ldd	r31, Z+3	; 0x03
    1946:	e0 2d       	mov	r30, r0
    1948:	81 81       	ldd	r24, Z+1	; 0x01
    194a:	82 37       	cpi	r24, 0x72	; 114
    194c:	69 f5       	brne	.+90     	; 0x19a8 <nextMove+0x5fc>
    194e:	6c 2d       	mov	r22, r12
    1950:	84 e7       	ldi	r24, 0x74	; 116
    1952:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    1956:	81 11       	cpse	r24, r1
    1958:	27 c0       	rjmp	.+78     	; 0x19a8 <nextMove+0x5fc>
    195a:	6c 2d       	mov	r22, r12
    195c:	83 e7       	ldi	r24, 0x73	; 115
    195e:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    1962:	81 11       	cpse	r24, r1
    1964:	21 c0       	rjmp	.+66     	; 0x19a8 <nextMove+0x5fc>
    1966:	6c 2d       	mov	r22, r12
    1968:	82 e7       	ldi	r24, 0x72	; 114
    196a:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    196e:	81 11       	cpse	r24, r1
    1970:	1b c0       	rjmp	.+54     	; 0x19a8 <nextMove+0x5fc>
                            hm[ply+1].bKingPos = SQ_C8;
    1972:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	26 e1       	ldi	r18, 0x16	; 22
    197c:	28 9f       	mul	r18, r24
    197e:	f0 01       	movw	r30, r0
    1980:	29 9f       	mul	r18, r25
    1982:	f0 0d       	add	r31, r0
    1984:	11 24       	eor	r1, r1
    1986:	e9 5b       	subi	r30, 0xB9	; 185
    1988:	fb 4f       	sbci	r31, 0xFB	; 251
    198a:	82 e7       	ldi	r24, 0x72	; 114
    198c:	84 8b       	std	Z+20, r24	; 0x14
                            board[SQ_C8] = WKING; board[SQ_E8] = EMPTY; board[SQ_D8] = WROOK;  board[SQ_A8] = EMPTY;
    198e:	8e e0       	ldi	r24, 0x0E	; 14
    1990:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <board+0x72>
    1994:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <board+0x74>
    1998:	8c e0       	ldi	r24, 0x0C	; 12
    199a:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <board+0x73>
    199e:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <board+0x70>
                            foundMove=1;
    19a2:	dd 24       	eor	r13, r13
    19a4:	d3 94       	inc	r13
                            break;
    19a6:	7c c1       	rjmp	.+760    	; 0x1ca0 <nextMove+0x8f4>
                        }
                    }
                }
            case ROOK:
                if (side == WHITE_MOVE && hm[ply].actEntry->from == SQ_A1) hm[ply+1].flags&=~FLAG_CL_WHITE;
    19a8:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    19ac:	88 30       	cpi	r24, 0x08	; 8
    19ae:	f9 f4       	brne	.+62     	; 0x19ee <nextMove+0x642>
    19b0:	20 91 ac 06 	lds	r18, 0x06AC	; 0x8006ac <ply>
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	96 e1       	ldi	r25, 0x16	; 22
    19b8:	92 9f       	mul	r25, r18
    19ba:	f0 01       	movw	r30, r0
    19bc:	93 9f       	mul	r25, r19
    19be:	f0 0d       	add	r31, r0
    19c0:	11 24       	eor	r1, r1
    19c2:	e9 5b       	subi	r30, 0xB9	; 185
    19c4:	fb 4f       	sbci	r31, 0xFB	; 251
    19c6:	02 80       	ldd	r0, Z+2	; 0x02
    19c8:	f3 81       	ldd	r31, Z+3	; 0x03
    19ca:	e0 2d       	mov	r30, r0
    19cc:	90 81       	ld	r25, Z
    19ce:	91 11       	cpse	r25, r1
    19d0:	0e c0       	rjmp	.+28     	; 0x19ee <nextMove+0x642>
    19d2:	2f 5f       	subi	r18, 0xFF	; 255
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	86 e1       	ldi	r24, 0x16	; 22
    19d8:	82 9f       	mul	r24, r18
    19da:	f0 01       	movw	r30, r0
    19dc:	83 9f       	mul	r24, r19
    19de:	f0 0d       	add	r31, r0
    19e0:	11 24       	eor	r1, r1
    19e2:	e9 5b       	subi	r30, 0xB9	; 185
    19e4:	fb 4f       	sbci	r31, 0xFB	; 251
    19e6:	80 89       	ldd	r24, Z+16	; 0x10
    19e8:	8d 7f       	andi	r24, 0xFD	; 253
    19ea:	80 8b       	std	Z+16, r24	; 0x10
    19ec:	61 c0       	rjmp	.+194    	; 0x1ab0 <nextMove+0x704>
                else if (side == WHITE_MOVE && hm[ply].actEntry->from == SQ_H1) hm[ply+1].flags&=~FLAG_CS_WHITE;
    19ee:	88 30       	cpi	r24, 0x08	; 8
    19f0:	f9 f4       	brne	.+62     	; 0x1a30 <nextMove+0x684>
    19f2:	20 91 ac 06 	lds	r18, 0x06AC	; 0x8006ac <ply>
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	96 e1       	ldi	r25, 0x16	; 22
    19fa:	92 9f       	mul	r25, r18
    19fc:	f0 01       	movw	r30, r0
    19fe:	93 9f       	mul	r25, r19
    1a00:	f0 0d       	add	r31, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	e9 5b       	subi	r30, 0xB9	; 185
    1a06:	fb 4f       	sbci	r31, 0xFB	; 251
    1a08:	02 80       	ldd	r0, Z+2	; 0x02
    1a0a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a0c:	e0 2d       	mov	r30, r0
    1a0e:	90 81       	ld	r25, Z
    1a10:	97 30       	cpi	r25, 0x07	; 7
    1a12:	71 f4       	brne	.+28     	; 0x1a30 <nextMove+0x684>
    1a14:	2f 5f       	subi	r18, 0xFF	; 255
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	86 e1       	ldi	r24, 0x16	; 22
    1a1a:	82 9f       	mul	r24, r18
    1a1c:	f0 01       	movw	r30, r0
    1a1e:	83 9f       	mul	r24, r19
    1a20:	f0 0d       	add	r31, r0
    1a22:	11 24       	eor	r1, r1
    1a24:	e9 5b       	subi	r30, 0xB9	; 185
    1a26:	fb 4f       	sbci	r31, 0xFB	; 251
    1a28:	80 89       	ldd	r24, Z+16	; 0x10
    1a2a:	8e 7f       	andi	r24, 0xFE	; 254
    1a2c:	80 8b       	std	Z+16, r24	; 0x10
    1a2e:	40 c0       	rjmp	.+128    	; 0x1ab0 <nextMove+0x704>
                else if (side == BLACK_MOVE && hm[ply].actEntry->from == SQ_A8) hm[ply+1].flags&=~FLAG_CL_BLACK;
    1a30:	80 31       	cpi	r24, 0x10	; 16
    1a32:	f9 f4       	brne	.+62     	; 0x1a72 <nextMove+0x6c6>
    1a34:	20 91 ac 06 	lds	r18, 0x06AC	; 0x8006ac <ply>
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	96 e1       	ldi	r25, 0x16	; 22
    1a3c:	92 9f       	mul	r25, r18
    1a3e:	f0 01       	movw	r30, r0
    1a40:	93 9f       	mul	r25, r19
    1a42:	f0 0d       	add	r31, r0
    1a44:	11 24       	eor	r1, r1
    1a46:	e9 5b       	subi	r30, 0xB9	; 185
    1a48:	fb 4f       	sbci	r31, 0xFB	; 251
    1a4a:	02 80       	ldd	r0, Z+2	; 0x02
    1a4c:	f3 81       	ldd	r31, Z+3	; 0x03
    1a4e:	e0 2d       	mov	r30, r0
    1a50:	90 81       	ld	r25, Z
    1a52:	90 37       	cpi	r25, 0x70	; 112
    1a54:	71 f4       	brne	.+28     	; 0x1a72 <nextMove+0x6c6>
    1a56:	2f 5f       	subi	r18, 0xFF	; 255
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	86 e1       	ldi	r24, 0x16	; 22
    1a5c:	82 9f       	mul	r24, r18
    1a5e:	f0 01       	movw	r30, r0
    1a60:	83 9f       	mul	r24, r19
    1a62:	f0 0d       	add	r31, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	e9 5b       	subi	r30, 0xB9	; 185
    1a68:	fb 4f       	sbci	r31, 0xFB	; 251
    1a6a:	80 89       	ldd	r24, Z+16	; 0x10
    1a6c:	87 7f       	andi	r24, 0xF7	; 247
    1a6e:	80 8b       	std	Z+16, r24	; 0x10
    1a70:	1f c0       	rjmp	.+62     	; 0x1ab0 <nextMove+0x704>
                else if (side == BLACK_MOVE && hm[ply].actEntry->from == SQ_H8) hm[ply+1].flags&=~FLAG_CS_BLACK;
    1a72:	80 31       	cpi	r24, 0x10	; 16
    1a74:	e9 f4       	brne	.+58     	; 0x1ab0 <nextMove+0x704>
    1a76:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	26 e1       	ldi	r18, 0x16	; 22
    1a7e:	28 9f       	mul	r18, r24
    1a80:	f0 01       	movw	r30, r0
    1a82:	29 9f       	mul	r18, r25
    1a84:	f0 0d       	add	r31, r0
    1a86:	11 24       	eor	r1, r1
    1a88:	e9 5b       	subi	r30, 0xB9	; 185
    1a8a:	fb 4f       	sbci	r31, 0xFB	; 251
    1a8c:	02 80       	ldd	r0, Z+2	; 0x02
    1a8e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a90:	e0 2d       	mov	r30, r0
    1a92:	20 81       	ld	r18, Z
    1a94:	27 37       	cpi	r18, 0x77	; 119
    1a96:	61 f4       	brne	.+24     	; 0x1ab0 <nextMove+0x704>
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	26 e1       	ldi	r18, 0x16	; 22
    1a9c:	28 9f       	mul	r18, r24
    1a9e:	f0 01       	movw	r30, r0
    1aa0:	29 9f       	mul	r18, r25
    1aa2:	f0 0d       	add	r31, r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	e9 5b       	subi	r30, 0xB9	; 185
    1aa8:	fb 4f       	sbci	r31, 0xFB	; 251
    1aaa:	80 89       	ldd	r24, Z+16	; 0x10
    1aac:	8b 7f       	andi	r24, 0xFB	; 251
    1aae:	80 8b       	std	Z+16, r24	; 0x10
            case KNIGHT:
            case BISHOP:
            case QUEEN:
                if (board[hm[ply].actEntry->from] == WKING) {
    1ab0:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	26 e1       	ldi	r18, 0x16	; 22
    1ab8:	28 9f       	mul	r18, r24
    1aba:	f0 01       	movw	r30, r0
    1abc:	29 9f       	mul	r18, r25
    1abe:	f0 0d       	add	r31, r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	e9 5b       	subi	r30, 0xB9	; 185
    1ac4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ac6:	a2 81       	ldd	r26, Z+2	; 0x02
    1ac8:	b3 81       	ldd	r27, Z+3	; 0x03
    1aca:	ec 91       	ld	r30, X
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	e5 5d       	subi	r30, 0xD5	; 213
    1ad0:	f9 4f       	sbci	r31, 0xF9	; 249
    1ad2:	20 81       	ld	r18, Z
    1ad4:	2e 30       	cpi	r18, 0x0E	; 14
    1ad6:	99 f4       	brne	.+38     	; 0x1afe <nextMove+0x752>
                    hm[ply+1].wKingPos = board[hm[ply].actEntry->to];
    1ad8:	9c 01       	movw	r18, r24
    1ada:	2f 5f       	subi	r18, 0xFF	; 255
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	11 96       	adiw	r26, 0x01	; 1
    1ae0:	ec 91       	ld	r30, X
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	e5 5d       	subi	r30, 0xD5	; 213
    1ae6:	f9 4f       	sbci	r31, 0xF9	; 249
    1ae8:	10 81       	ld	r17, Z
    1aea:	46 e1       	ldi	r20, 0x16	; 22
    1aec:	42 9f       	mul	r20, r18
    1aee:	f0 01       	movw	r30, r0
    1af0:	43 9f       	mul	r20, r19
    1af2:	f0 0d       	add	r31, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	e9 5b       	subi	r30, 0xB9	; 185
    1af8:	fb 4f       	sbci	r31, 0xFB	; 251
    1afa:	15 8b       	std	Z+21, r17	; 0x15
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <nextMove+0x77a>
                    kingPos = hm[ply+1].wKingPos;
                } else if (board[hm[ply].actEntry->from] == BKING) {
    1afe:	26 31       	cpi	r18, 0x16	; 22
    1b00:	91 f4       	brne	.+36     	; 0x1b26 <nextMove+0x77a>
                    hm[ply+1].bKingPos = board[hm[ply].actEntry->to];
    1b02:	9c 01       	movw	r18, r24
    1b04:	2f 5f       	subi	r18, 0xFF	; 255
    1b06:	3f 4f       	sbci	r19, 0xFF	; 255
    1b08:	11 96       	adiw	r26, 0x01	; 1
    1b0a:	ec 91       	ld	r30, X
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	e5 5d       	subi	r30, 0xD5	; 213
    1b10:	f9 4f       	sbci	r31, 0xF9	; 249
    1b12:	10 81       	ld	r17, Z
    1b14:	46 e1       	ldi	r20, 0x16	; 22
    1b16:	42 9f       	mul	r20, r18
    1b18:	f0 01       	movw	r30, r0
    1b1a:	43 9f       	mul	r20, r19
    1b1c:	f0 0d       	add	r31, r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	e9 5b       	subi	r30, 0xB9	; 185
    1b22:	fb 4f       	sbci	r31, 0xFB	; 251
    1b24:	14 8b       	std	Z+20, r17	; 0x14
                    kingPos = hm[ply+1].bKingPos;
                }
                hm[ply].capture = board[hm[ply].actEntry->to];
    1b26:	26 e1       	ldi	r18, 0x16	; 22
    1b28:	28 9f       	mul	r18, r24
    1b2a:	f0 01       	movw	r30, r0
    1b2c:	29 9f       	mul	r18, r25
    1b2e:	f0 0d       	add	r31, r0
    1b30:	11 24       	eor	r1, r1
    1b32:	e9 5b       	subi	r30, 0xB9	; 185
    1b34:	fb 4f       	sbci	r31, 0xFB	; 251
    1b36:	a2 81       	ldd	r26, Z+2	; 0x02
    1b38:	b3 81       	ldd	r27, Z+3	; 0x03
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	ac 91       	ld	r26, X
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	a5 5d       	subi	r26, 0xD5	; 213
    1b42:	b9 4f       	sbci	r27, 0xF9	; 249
    1b44:	8c 91       	ld	r24, X
    1b46:	82 8b       	std	Z+18, r24	; 0x12
                board[hm[ply].actEntry->to] = board[hm[ply].actEntry->from];
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	11 96       	adiw	r26, 0x01	; 1
    1b50:	ec 91       	ld	r30, X
    1b52:	11 97       	sbiw	r26, 0x01	; 1
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	2c 91       	ld	r18, X
    1b58:	a2 2f       	mov	r26, r18
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	a5 5d       	subi	r26, 0xD5	; 213
    1b5e:	b9 4f       	sbci	r27, 0xF9	; 249
    1b60:	2c 91       	ld	r18, X
    1b62:	e5 5d       	subi	r30, 0xD5	; 213
    1b64:	f9 4f       	sbci	r31, 0xF9	; 249
    1b66:	20 83       	st	Z, r18
                board[hm[ply].actEntry->from] = EMPTY;
    1b68:	ec 01       	movw	r28, r24
    1b6a:	e8 81       	ld	r30, Y
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	e5 5d       	subi	r30, 0xD5	; 213
    1b70:	f9 4f       	sbci	r31, 0xF9	; 249
    1b72:	10 82       	st	Z, r1
                if (isAttacked(kingPos,other)) {
    1b74:	6c 2d       	mov	r22, r12
    1b76:	81 2f       	mov	r24, r17
    1b78:	0e 94 13 04 	call	0x826	; 0x826 <isAttacked>
    1b7c:	88 23       	and	r24, r24
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <nextMove+0x7d6>
    1b80:	8d c0       	rjmp	.+282    	; 0x1c9c <nextMove+0x8f0>
                    board[hm[ply].actEntry->from] = board[hm[ply].actEntry->to];
    1b82:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	66 e1       	ldi	r22, 0x16	; 22
    1b8a:	68 9f       	mul	r22, r24
    1b8c:	f0 01       	movw	r30, r0
    1b8e:	69 9f       	mul	r22, r25
    1b90:	f0 0d       	add	r31, r0
    1b92:	11 24       	eor	r1, r1
    1b94:	e9 5b       	subi	r30, 0xB9	; 185
    1b96:	fb 4f       	sbci	r31, 0xFB	; 251
    1b98:	42 81       	ldd	r20, Z+2	; 0x02
    1b9a:	53 81       	ldd	r21, Z+3	; 0x03
    1b9c:	da 01       	movw	r26, r20
    1b9e:	2c 91       	ld	r18, X
    1ba0:	a2 2f       	mov	r26, r18
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	ea 01       	movw	r28, r20
    1ba6:	29 81       	ldd	r18, Y+1	; 0x01
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	25 5d       	subi	r18, 0xD5	; 213
    1bac:	39 4f       	sbci	r19, 0xF9	; 249
    1bae:	e9 01       	movw	r28, r18
    1bb0:	28 81       	ld	r18, Y
    1bb2:	a5 5d       	subi	r26, 0xD5	; 213
    1bb4:	b9 4f       	sbci	r27, 0xF9	; 249
    1bb6:	2c 93       	st	X, r18
                    board[hm[ply].actEntry->to] = hm[ply].capture;
    1bb8:	ea 01       	movw	r28, r20
    1bba:	a9 81       	ldd	r26, Y+1	; 0x01
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	22 89       	ldd	r18, Z+18	; 0x12
    1bc0:	a5 5d       	subi	r26, 0xD5	; 213
    1bc2:	b9 4f       	sbci	r27, 0xF9	; 249
    1bc4:	2c 93       	st	X, r18
                    hm[ply].capture = EMPTY;
    1bc6:	12 8a       	std	Z+18, r1	; 0x12
                    hm[ply+1].wKingPos = hm[ply].wKingPos;
    1bc8:	ac 01       	movw	r20, r24
    1bca:	4f 5f       	subi	r20, 0xFF	; 255
    1bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bce:	25 89       	ldd	r18, Z+21	; 0x15
    1bd0:	64 9f       	mul	r22, r20
    1bd2:	d0 01       	movw	r26, r0
    1bd4:	65 9f       	mul	r22, r21
    1bd6:	b0 0d       	add	r27, r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	a9 5b       	subi	r26, 0xB9	; 185
    1bdc:	bb 4f       	sbci	r27, 0xFB	; 251
    1bde:	55 96       	adiw	r26, 0x15	; 21
    1be0:	2c 93       	st	X, r18
    1be2:	55 97       	sbiw	r26, 0x15	; 21
                    hm[ply+1].bKingPos = hm[ply].bKingPos;
    1be4:	24 89       	ldd	r18, Z+20	; 0x14
    1be6:	54 96       	adiw	r26, 0x14	; 20
    1be8:	2c 93       	st	X, r18
                    kingPos = (side == WHITE) ?  hm[ply].wKingPos : hm[ply].bKingPos;
    1bea:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <side>
    1bee:	28 30       	cpi	r18, 0x08	; 8
    1bf0:	51 f4       	brne	.+20     	; 0x1c06 <nextMove+0x85a>
    1bf2:	26 e1       	ldi	r18, 0x16	; 22
    1bf4:	28 9f       	mul	r18, r24
    1bf6:	f0 01       	movw	r30, r0
    1bf8:	29 9f       	mul	r18, r25
    1bfa:	f0 0d       	add	r31, r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	e9 5b       	subi	r30, 0xB9	; 185
    1c00:	fb 4f       	sbci	r31, 0xFB	; 251
    1c02:	15 89       	ldd	r17, Z+21	; 0x15
    1c04:	4d c0       	rjmp	.+154    	; 0x1ca0 <nextMove+0x8f4>
    1c06:	26 e1       	ldi	r18, 0x16	; 22
    1c08:	28 9f       	mul	r18, r24
    1c0a:	f0 01       	movw	r30, r0
    1c0c:	29 9f       	mul	r18, r25
    1c0e:	f0 0d       	add	r31, r0
    1c10:	11 24       	eor	r1, r1
    1c12:	e9 5b       	subi	r30, 0xB9	; 185
    1c14:	fb 4f       	sbci	r31, 0xFB	; 251
    1c16:	14 89       	ldd	r17, Z+20	; 0x14
    1c18:	43 c0       	rjmp	.+134    	; 0x1ca0 <nextMove+0x8f4>
                    foundMove = 1;
                }

                break;
            default:
                dbgSetColor(COLOR_RED);
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	0e 94 07 04 	call	0x80e	; 0x80e <dbgSetColor>
                dbgPuts("Found piece ");
    1c20:	89 eb       	ldi	r24, 0xB9	; 185
    1c22:	93 e0       	ldi	r25, 0x03	; 3
    1c24:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                dbgSendHexByte(board[hm[ply].actEntry->from]);
    1c28:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    1c2c:	c6 e1       	ldi	r28, 0x16	; 22
    1c2e:	ce 9f       	mul	r28, r30
    1c30:	f0 01       	movw	r30, r0
    1c32:	11 24       	eor	r1, r1
    1c34:	e9 5b       	subi	r30, 0xB9	; 185
    1c36:	fb 4f       	sbci	r31, 0xFB	; 251
    1c38:	02 80       	ldd	r0, Z+2	; 0x02
    1c3a:	f3 81       	ldd	r31, Z+3	; 0x03
    1c3c:	e0 2d       	mov	r30, r0
    1c3e:	e0 81       	ld	r30, Z
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	e5 5d       	subi	r30, 0xD5	; 213
    1c44:	f9 4f       	sbci	r31, 0xF9	; 249
    1c46:	80 81       	ld	r24, Z
    1c48:	0e 94 0a 04 	call	0x814	; 0x814 <dbgSendHexByte>
                dbgPuts("  on field ");
    1c4c:	86 ec       	ldi	r24, 0xC6	; 198
    1c4e:	93 e0       	ldi	r25, 0x03	; 3
    1c50:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                dbgSendHexByte(hm[ply].actEntry->from);
    1c54:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    1c58:	ce 9f       	mul	r28, r30
    1c5a:	f0 01       	movw	r30, r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	e9 5b       	subi	r30, 0xB9	; 185
    1c60:	fb 4f       	sbci	r31, 0xFB	; 251
    1c62:	02 80       	ldd	r0, Z+2	; 0x02
    1c64:	f3 81       	ldd	r31, Z+3	; 0x03
    1c66:	e0 2d       	mov	r30, r0
    1c68:	80 81       	ld	r24, Z
    1c6a:	0e 94 0a 04 	call	0x814	; 0x814 <dbgSendHexByte>
                dbgPuts("\n\r");
    1c6e:	89 e0       	ldi	r24, 0x09	; 9
    1c70:	94 e0       	ldi	r25, 0x04	; 4
    1c72:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                dbgSetColor(COLOR_WHITE);
    1c76:	87 e0       	ldi	r24, 0x07	; 7
    1c78:	0e 94 07 04 	call	0x80e	; 0x80e <dbgSetColor>
                printBoard();
    1c7c:	0e 94 4c 03 	call	0x698	; 0x698 <printBoard>
                criticalError = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <criticalError>
                foundMove = 0;
                return 0;
    1c86:	c0 e0       	ldi	r28, 0x00	; 0
    1c88:	b0 c0       	rjmp	.+352    	; 0x1dea <nextMove+0xa3e>
                        board[pawnHit] = PAWN|other;
                        board[hm[ply].actEntry->from] = PAWN|side;
                        hm[ply].capture = EMPTY;
                        break;
                    }
                    foundMove = 1;
    1c8a:	dd 24       	eor	r13, r13
    1c8c:	d3 94       	inc	r13
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <nextMove+0x8f4>
                    }
                    if (side == WHITE && (hm[ply].actEntry->to - hm[ply].actEntry->from == 0x20))
                    hm[ply+1].ep = hm[ply].actEntry->to - 0x10;
                    else if (side == BLACK && (hm[ply].actEntry->from - hm[ply].actEntry->to == 0x20))
                    hm[ply+1].ep = hm[ply].actEntry->to + 0x10;
                    foundMove = 1;
    1c90:	dd 24       	eor	r13, r13
    1c92:	d3 94       	inc	r13
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <nextMove+0x8f4>
    1c96:	dd 24       	eor	r13, r13
    1c98:	d3 94       	inc	r13
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <nextMove+0x8f4>
                    hm[ply+1].wKingPos = hm[ply].wKingPos;
                    hm[ply+1].bKingPos = hm[ply].bKingPos;
                    kingPos = (side == WHITE) ?  hm[ply].wKingPos : hm[ply].bKingPos;
                }
                else {
                    foundMove = 1;
    1c9c:	dd 24       	eor	r13, r13
    1c9e:	d3 94       	inc	r13
                criticalError = 1;
                foundMove = 0;
                return 0;
            }
        // selected and made one move
        if (foundMove) {
    1ca0:	dd 20       	and	r13, r13
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <nextMove+0x8fa>
    1ca4:	63 c0       	rjmp	.+198    	; 0x1d6c <nextMove+0x9c0>
            hm[ply].actFrom = hm[ply].actEntry->from;
    1ca6:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	26 e1       	ldi	r18, 0x16	; 22
    1cae:	28 9f       	mul	r18, r24
    1cb0:	f0 01       	movw	r30, r0
    1cb2:	29 9f       	mul	r18, r25
    1cb4:	f0 0d       	add	r31, r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	e9 5b       	subi	r30, 0xB9	; 185
    1cba:	fb 4f       	sbci	r31, 0xFB	; 251
    1cbc:	a2 81       	ldd	r26, Z+2	; 0x02
    1cbe:	b3 81       	ldd	r27, Z+3	; 0x03
    1cc0:	2c 91       	ld	r18, X
    1cc2:	26 87       	std	Z+14, r18	; 0x0e
            hm[ply].actTo = hm[ply].actEntry->to;
    1cc4:	11 96       	adiw	r26, 0x01	; 1
    1cc6:	2c 91       	ld	r18, X
    1cc8:	11 97       	sbiw	r26, 0x01	; 1
    1cca:	27 87       	std	Z+15, r18	; 0x0f
            hm[ply].actEntry++;
    1ccc:	9d 01       	movw	r18, r26
    1cce:	2c 5f       	subi	r18, 0xFC	; 252
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	33 83       	std	Z+3, r19	; 0x03
    1cd4:	22 83       	std	Z+2, r18	; 0x02
            // incremental material calculation
            if (side==WHITE) {
    1cd6:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <side>
    1cda:	28 30       	cpi	r18, 0x08	; 8
    1cdc:	09 f5       	brne	.+66     	; 0x1d20 <nextMove+0x974>
                hm[ply+1].matBlack -= pieceValues[hm[ply].capture];
    1cde:	ac 01       	movw	r20, r24
    1ce0:	4f 5f       	subi	r20, 0xFF	; 255
    1ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce4:	36 e1       	ldi	r19, 0x16	; 22
    1ce6:	38 9f       	mul	r19, r24
    1ce8:	f0 01       	movw	r30, r0
    1cea:	39 9f       	mul	r19, r25
    1cec:	f0 0d       	add	r31, r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	e9 5b       	subi	r30, 0xB9	; 185
    1cf2:	fb 4f       	sbci	r31, 0xFB	; 251
    1cf4:	e2 89       	ldd	r30, Z+18	; 0x12
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	ee 0f       	add	r30, r30
    1cfa:	ff 1f       	adc	r31, r31
    1cfc:	e9 50       	subi	r30, 0x09	; 9
    1cfe:	fd 4f       	sbci	r31, 0xFD	; 253
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	34 9f       	mul	r19, r20
    1d06:	f0 01       	movw	r30, r0
    1d08:	35 9f       	mul	r19, r21
    1d0a:	f0 0d       	add	r31, r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	e9 5b       	subi	r30, 0xB9	; 185
    1d10:	fb 4f       	sbci	r31, 0xFB	; 251
    1d12:	86 81       	ldd	r24, Z+6	; 0x06
    1d14:	97 81       	ldd	r25, Z+7	; 0x07
    1d16:	86 1b       	sub	r24, r22
    1d18:	97 0b       	sbc	r25, r23
    1d1a:	97 83       	std	Z+7, r25	; 0x07
    1d1c:	86 83       	std	Z+6, r24	; 0x06
    1d1e:	20 c0       	rjmp	.+64     	; 0x1d60 <nextMove+0x9b4>
            } else {
                hm[ply+1].matWhite -= pieceValues[hm[ply].capture];
    1d20:	ac 01       	movw	r20, r24
    1d22:	4f 5f       	subi	r20, 0xFF	; 255
    1d24:	5f 4f       	sbci	r21, 0xFF	; 255
    1d26:	36 e1       	ldi	r19, 0x16	; 22
    1d28:	38 9f       	mul	r19, r24
    1d2a:	f0 01       	movw	r30, r0
    1d2c:	39 9f       	mul	r19, r25
    1d2e:	f0 0d       	add	r31, r0
    1d30:	11 24       	eor	r1, r1
    1d32:	e9 5b       	subi	r30, 0xB9	; 185
    1d34:	fb 4f       	sbci	r31, 0xFB	; 251
    1d36:	e2 89       	ldd	r30, Z+18	; 0x12
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	ee 0f       	add	r30, r30
    1d3c:	ff 1f       	adc	r31, r31
    1d3e:	e9 50       	subi	r30, 0x09	; 9
    1d40:	fd 4f       	sbci	r31, 0xFD	; 253
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	34 9f       	mul	r19, r20
    1d48:	f0 01       	movw	r30, r0
    1d4a:	35 9f       	mul	r19, r21
    1d4c:	f0 0d       	add	r31, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	e9 5b       	subi	r30, 0xB9	; 185
    1d52:	fb 4f       	sbci	r31, 0xFB	; 251
    1d54:	84 81       	ldd	r24, Z+4	; 0x04
    1d56:	95 81       	ldd	r25, Z+5	; 0x05
    1d58:	86 1b       	sub	r24, r22
    1d5a:	97 0b       	sbc	r25, r23
    1d5c:	95 83       	std	Z+5, r25	; 0x05
    1d5e:	84 83       	std	Z+4, r24	; 0x04
            }
            // change side
            side = OTHER(side);
    1d60:	88 e1       	ldi	r24, 0x18	; 24
    1d62:	82 27       	eor	r24, r18
    1d64:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <side>
            break;
    1d68:	cd 2d       	mov	r28, r13
    1d6a:	3f c0       	rjmp	.+126    	; 0x1dea <nextMove+0xa3e>
        } else {
            hm[ply+1].flags = hm[ply].flags;
    1d6c:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	ac 01       	movw	r20, r24
    1d74:	4f 5f       	subi	r20, 0xFF	; 255
    1d76:	5f 4f       	sbci	r21, 0xFF	; 255
    1d78:	26 e1       	ldi	r18, 0x16	; 22
    1d7a:	28 9f       	mul	r18, r24
    1d7c:	f0 01       	movw	r30, r0
    1d7e:	29 9f       	mul	r18, r25
    1d80:	f0 0d       	add	r31, r0
    1d82:	11 24       	eor	r1, r1
    1d84:	e9 5b       	subi	r30, 0xB9	; 185
    1d86:	fb 4f       	sbci	r31, 0xFB	; 251
    1d88:	80 89       	ldd	r24, Z+16	; 0x10
    1d8a:	24 9f       	mul	r18, r20
    1d8c:	d0 01       	movw	r26, r0
    1d8e:	25 9f       	mul	r18, r21
    1d90:	b0 0d       	add	r27, r0
    1d92:	11 24       	eor	r1, r1
    1d94:	a9 5b       	subi	r26, 0xB9	; 185
    1d96:	bb 4f       	sbci	r27, 0xFB	; 251
    1d98:	50 96       	adiw	r26, 0x10	; 16
    1d9a:	8c 93       	st	X, r24
    1d9c:	50 97       	sbiw	r26, 0x10	; 16
            hm[ply].actEntry++;
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	04 96       	adiw	r24, 0x04	; 4
    1da4:	93 83       	std	Z+3, r25	; 0x03
    1da6:	82 83       	std	Z+2, r24	; 0x02
        }

        // no move found -> reset flags (needed?)
        hm[ply+1].flags = hm[ply].flags;
    1da8:	80 89       	ldd	r24, Z+16	; 0x10
    1daa:	50 96       	adiw	r26, 0x10	; 16
    1dac:	8c 93       	st	X, r24
    hm[ply+1].bKingPos = hm[ply].bKingPos;

    // try moves from moveList
    uint8_t kingPos = (side == WHITE) ? hm[ply].wKingPos : hm[ply].bKingPos;
    //uartPuts("selecting next move\n\r");
    while(hm[ply].actEntry < hm[ply+1].firstEntry) {
    1dae:	20 91 ac 06 	lds	r18, 0x06AC	; 0x8006ac <ply>
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	86 e1       	ldi	r24, 0x16	; 22
    1db6:	82 9f       	mul	r24, r18
    1db8:	f0 01       	movw	r30, r0
    1dba:	83 9f       	mul	r24, r19
    1dbc:	f0 0d       	add	r31, r0
    1dbe:	11 24       	eor	r1, r1
    1dc0:	e9 5b       	subi	r30, 0xB9	; 185
    1dc2:	fb 4f       	sbci	r31, 0xFB	; 251
    1dc4:	a2 81       	ldd	r26, Z+2	; 0x02
    1dc6:	b3 81       	ldd	r27, Z+3	; 0x03
    1dc8:	b9 01       	movw	r22, r18
    1dca:	6f 5f       	subi	r22, 0xFF	; 255
    1dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dce:	86 9f       	mul	r24, r22
    1dd0:	f0 01       	movw	r30, r0
    1dd2:	87 9f       	mul	r24, r23
    1dd4:	f0 0d       	add	r31, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	e9 5b       	subi	r30, 0xB9	; 185
    1dda:	fb 4f       	sbci	r31, 0xFB	; 251
    1ddc:	80 81       	ld	r24, Z
    1dde:	91 81       	ldd	r25, Z+1	; 0x01
    1de0:	a8 17       	cp	r26, r24
    1de2:	b9 07       	cpc	r27, r25
    1de4:	08 f4       	brcc	.+2      	; 0x1de8 <nextMove+0xa3c>
    1de6:	5b cb       	rjmp	.-2378   	; 0x149e <nextMove+0xf2>
    1de8:	cd 2d       	mov	r28, r13
    }
    //if (!checkBoard()) {
    //    uartPuts("Ende Makemove\n\r");
    //}
    return foundMove;
}
    1dea:	8c 2f       	mov	r24, r28
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	df 90       	pop	r13
    1dfa:	cf 90       	pop	r12
    1dfc:	08 95       	ret

00001dfe <backMove>:

void backMove() {
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    //checkBoard();
    Move *pt;
    pt = hm[ply].actEntry-1;
    1e02:	40 91 ac 06 	lds	r20, 0x06AC	; 0x8006ac <ply>
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	86 e1       	ldi	r24, 0x16	; 22
    1e0a:	84 9f       	mul	r24, r20
    1e0c:	f0 01       	movw	r30, r0
    1e0e:	85 9f       	mul	r24, r21
    1e10:	f0 0d       	add	r31, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	e9 5b       	subi	r30, 0xB9	; 185
    1e16:	fb 4f       	sbci	r31, 0xFB	; 251
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    side = OTHER(side);
    1e1c:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <side>
    1e20:	28 e1       	ldi	r18, 0x18	; 24
    1e22:	23 27       	eor	r18, r19
    1e24:	20 93 46 04 	sts	0x0446, r18	; 0x800446 <side>
    if (pt->to & PROMO_FLAG) { // take back promotions
    1e28:	fc 01       	movw	r30, r24
    1e2a:	34 97       	sbiw	r30, 0x04	; 4
    1e2c:	61 81       	ldd	r22, Z+1	; 0x01
    1e2e:	66 23       	and	r22, r22
    1e30:	4c f5       	brge	.+82     	; 0x1e84 <backMove+0x86>
        board[(pt->to&0xf) | (side == WHITE_MOVE) ? SQ_A8 : SQ_A1] = hm[ply].capture;
    1e32:	6f 70       	andi	r22, 0x0F	; 15
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	e1 e0       	ldi	r30, 0x01	; 1
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	28 30       	cpi	r18, 0x08	; 8
    1e3c:	11 f0       	breq	.+4      	; 0x1e42 <backMove+0x44>
    1e3e:	e0 e0       	ldi	r30, 0x00	; 0
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	6e 2b       	or	r22, r30
    1e44:	7f 2b       	or	r23, r31
    1e46:	61 15       	cp	r22, r1
    1e48:	71 05       	cpc	r23, r1
    1e4a:	11 f0       	breq	.+4      	; 0x1e50 <backMove+0x52>
    1e4c:	60 e7       	ldi	r22, 0x70	; 112
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	36 e1       	ldi	r19, 0x16	; 22
    1e52:	34 9f       	mul	r19, r20
    1e54:	d0 01       	movw	r26, r0
    1e56:	35 9f       	mul	r19, r21
    1e58:	b0 0d       	add	r27, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	a9 5b       	subi	r26, 0xB9	; 185
    1e5e:	bb 4f       	sbci	r27, 0xFB	; 251
    1e60:	52 96       	adiw	r26, 0x12	; 18
    1e62:	3c 91       	ld	r19, X
    1e64:	52 97       	sbiw	r26, 0x12	; 18
    1e66:	fb 01       	movw	r30, r22
    1e68:	e5 5d       	subi	r30, 0xD5	; 213
    1e6a:	f9 4f       	sbci	r31, 0xF9	; 249
    1e6c:	30 83       	st	Z, r19
        board[pt->from] = PAWN|side;
    1e6e:	fc 01       	movw	r30, r24
    1e70:	34 97       	sbiw	r30, 0x04	; 4
    1e72:	e0 81       	ld	r30, Z
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	e5 5d       	subi	r30, 0xD5	; 213
    1e78:	f9 4f       	sbci	r31, 0xF9	; 249
    1e7a:	21 60       	ori	r18, 0x01	; 1
    1e7c:	20 83       	st	Z, r18
        hm[ply].capture = EMPTY;
    1e7e:	52 96       	adiw	r26, 0x12	; 18
    1e80:	1c 92       	st	X, r1
    1e82:	a4 c0       	rjmp	.+328    	; 0x1fcc <backMove+0x1ce>
    } else if ((board[pt->to] & 7) == PAWN  && pt->to == hm[ply].ep) {
    1e84:	e6 2f       	mov	r30, r22
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	df 01       	movw	r26, r30
    1e8a:	a5 5d       	subi	r26, 0xD5	; 213
    1e8c:	b9 4f       	sbci	r27, 0xF9	; 249
    1e8e:	3c 91       	ld	r19, X
    1e90:	73 2f       	mov	r23, r19
    1e92:	77 70       	andi	r23, 0x07	; 7
    1e94:	71 30       	cpi	r23, 0x01	; 1
    1e96:	41 f5       	brne	.+80     	; 0x1ee8 <backMove+0xea>
    1e98:	76 e1       	ldi	r23, 0x16	; 22
    1e9a:	74 9f       	mul	r23, r20
    1e9c:	d0 01       	movw	r26, r0
    1e9e:	75 9f       	mul	r23, r21
    1ea0:	b0 0d       	add	r27, r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	a9 5b       	subi	r26, 0xB9	; 185
    1ea6:	bb 4f       	sbci	r27, 0xFB	; 251
    1ea8:	51 96       	adiw	r26, 0x11	; 17
    1eaa:	7c 91       	ld	r23, X
    1eac:	67 13       	cpse	r22, r23
    1eae:	1c c0       	rjmp	.+56     	; 0x1ee8 <backMove+0xea>
        board[pt->to] = EMPTY;
    1eb0:	e5 5d       	subi	r30, 0xD5	; 213
    1eb2:	f9 4f       	sbci	r31, 0xF9	; 249
    1eb4:	10 82       	st	Z, r1
        board[pt->from] = PAWN | side;
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	34 97       	sbiw	r30, 0x04	; 4
    1eba:	e0 81       	ld	r30, Z
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	e5 5d       	subi	r30, 0xD5	; 213
    1ec0:	f9 4f       	sbci	r31, 0xF9	; 249
    1ec2:	82 2f       	mov	r24, r18
    1ec4:	81 60       	ori	r24, 0x01	; 1
    1ec6:	80 83       	st	Z, r24
        if (side == WHITE)
    1ec8:	28 30       	cpi	r18, 0x08	; 8
    1eca:	39 f4       	brne	.+14     	; 0x1eda <backMove+0xdc>
            board[hm[ply].ep-0x10]=BPAWN;
    1ecc:	e7 2f       	mov	r30, r23
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	e5 5e       	subi	r30, 0xE5	; 229
    1ed2:	f9 4f       	sbci	r31, 0xF9	; 249
    1ed4:	81 e1       	ldi	r24, 0x11	; 17
    1ed6:	80 83       	st	Z, r24
    1ed8:	79 c0       	rjmp	.+242    	; 0x1fcc <backMove+0x1ce>
        else
            board[hm[ply].ep+0x10]=WPAWN;
    1eda:	e7 2f       	mov	r30, r23
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	e5 5c       	subi	r30, 0xC5	; 197
    1ee0:	f9 4f       	sbci	r31, 0xF9	; 249
    1ee2:	89 e0       	ldi	r24, 0x09	; 9
    1ee4:	80 83       	st	Z, r24
    1ee6:	72 c0       	rjmp	.+228    	; 0x1fcc <backMove+0x1ce>
    } else if (board[pt->to] == WKING && pt->from == SQ_E1) {
    1ee8:	3e 30       	cpi	r19, 0x0E	; 14
    1eea:	51 f5       	brne	.+84     	; 0x1f40 <backMove+0x142>
    1eec:	fc 01       	movw	r30, r24
    1eee:	34 97       	sbiw	r30, 0x04	; 4
    1ef0:	20 81       	ld	r18, Z
    1ef2:	24 30       	cpi	r18, 0x04	; 4
    1ef4:	29 f5       	brne	.+74     	; 0x1f40 <backMove+0x142>
        board[SQ_E1] = WKING;
    1ef6:	2e e0       	ldi	r18, 0x0E	; 14
    1ef8:	20 93 2f 06 	sts	0x062F, r18	; 0x80062f <board+0x4>
        board[pt->to] = hm[ply].capture;
    1efc:	ef 01       	movw	r28, r30
    1efe:	e1 81       	ldd	r30, Z+1	; 0x01
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	86 e1       	ldi	r24, 0x16	; 22
    1f04:	84 9f       	mul	r24, r20
    1f06:	d0 01       	movw	r26, r0
    1f08:	85 9f       	mul	r24, r21
    1f0a:	b0 0d       	add	r27, r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	a9 5b       	subi	r26, 0xB9	; 185
    1f10:	bb 4f       	sbci	r27, 0xFB	; 251
    1f12:	52 96       	adiw	r26, 0x12	; 18
    1f14:	8c 91       	ld	r24, X
    1f16:	e5 5d       	subi	r30, 0xD5	; 213
    1f18:	f9 4f       	sbci	r31, 0xF9	; 249
    1f1a:	80 83       	st	Z, r24
        if (pt->to == SQ_C1) {
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	31 f4       	brne	.+12     	; 0x1f2e <backMove+0x130>
            board[SQ_A1] = WROOK;  board[SQ_D1] = EMPTY;
    1f22:	eb e2       	ldi	r30, 0x2B	; 43
    1f24:	f6 e0       	ldi	r31, 0x06	; 6
    1f26:	8c e0       	ldi	r24, 0x0C	; 12
    1f28:	80 83       	st	Z, r24
    1f2a:	13 82       	std	Z+3, r1	; 0x03
    1f2c:	4f c0       	rjmp	.+158    	; 0x1fcc <backMove+0x1ce>
        }  else if (pt->to == SQ_G1)  {
    1f2e:	86 30       	cpi	r24, 0x06	; 6
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <backMove+0x136>
    1f32:	4c c0       	rjmp	.+152    	; 0x1fcc <backMove+0x1ce>
            board[SQ_H1] = WROOK;  board[SQ_F1] = EMPTY;
    1f34:	eb e2       	ldi	r30, 0x2B	; 43
    1f36:	f6 e0       	ldi	r31, 0x06	; 6
    1f38:	8c e0       	ldi	r24, 0x0C	; 12
    1f3a:	87 83       	std	Z+7, r24	; 0x07
    1f3c:	15 82       	std	Z+5, r1	; 0x05
    1f3e:	46 c0       	rjmp	.+140    	; 0x1fcc <backMove+0x1ce>
        }
    }  else if (board[pt->to] == BKING && pt->from == SQ_E8) {
    1f40:	36 31       	cpi	r19, 0x16	; 22
    1f42:	59 f5       	brne	.+86     	; 0x1f9a <backMove+0x19c>
    1f44:	fc 01       	movw	r30, r24
    1f46:	34 97       	sbiw	r30, 0x04	; 4
    1f48:	20 81       	ld	r18, Z
    1f4a:	24 37       	cpi	r18, 0x74	; 116
    1f4c:	31 f5       	brne	.+76     	; 0x1f9a <backMove+0x19c>
        board[SQ_E8] = BKING;
    1f4e:	26 e1       	ldi	r18, 0x16	; 22
    1f50:	20 93 9f 06 	sts	0x069F, r18	; 0x80069f <board+0x74>
        board[pt->to] = hm[ply].capture;
    1f54:	ef 01       	movw	r28, r30
    1f56:	e1 81       	ldd	r30, Z+1	; 0x01
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	24 9f       	mul	r18, r20
    1f5c:	d0 01       	movw	r26, r0
    1f5e:	25 9f       	mul	r18, r21
    1f60:	b0 0d       	add	r27, r0
    1f62:	11 24       	eor	r1, r1
    1f64:	a9 5b       	subi	r26, 0xB9	; 185
    1f66:	bb 4f       	sbci	r27, 0xFB	; 251
    1f68:	52 96       	adiw	r26, 0x12	; 18
    1f6a:	8c 91       	ld	r24, X
    1f6c:	52 97       	sbiw	r26, 0x12	; 18
    1f6e:	e5 5d       	subi	r30, 0xD5	; 213
    1f70:	f9 4f       	sbci	r31, 0xF9	; 249
    1f72:	80 83       	st	Z, r24
        hm[ply].capture = EMPTY;
    1f74:	52 96       	adiw	r26, 0x12	; 18
    1f76:	1c 92       	st	X, r1
        if (pt->to == SQ_C8) {
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	82 37       	cpi	r24, 0x72	; 114
    1f7c:	31 f4       	brne	.+12     	; 0x1f8a <backMove+0x18c>
            board[SQ_A8] = BROOK;  board[SQ_D8] = EMPTY;
    1f7e:	84 e1       	ldi	r24, 0x14	; 20
    1f80:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <board+0x70>
    1f84:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <board+0x73>
    1f88:	21 c0       	rjmp	.+66     	; 0x1fcc <backMove+0x1ce>
        }  else if (pt->to == SQ_G8) {
    1f8a:	86 37       	cpi	r24, 0x76	; 118
    1f8c:	f9 f4       	brne	.+62     	; 0x1fcc <backMove+0x1ce>
            board[SQ_H8] = BROOK;  board[SQ_F8] = EMPTY;
    1f8e:	84 e1       	ldi	r24, 0x14	; 20
    1f90:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <board+0x77>
    1f94:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <board+0x75>
    1f98:	19 c0       	rjmp	.+50     	; 0x1fcc <backMove+0x1ce>
        }
    }  else {
        board[pt->from] = board[pt->to];
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	34 97       	sbiw	r30, 0x04	; 4
    1f9e:	a0 81       	ld	r26, Z
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	a5 5d       	subi	r26, 0xD5	; 213
    1fa4:	b9 4f       	sbci	r27, 0xF9	; 249
    1fa6:	3c 93       	st	X, r19
        board[pt->to] = hm[ply].capture;
    1fa8:	e1 81       	ldd	r30, Z+1	; 0x01
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	86 e1       	ldi	r24, 0x16	; 22
    1fae:	84 9f       	mul	r24, r20
    1fb0:	d0 01       	movw	r26, r0
    1fb2:	85 9f       	mul	r24, r21
    1fb4:	b0 0d       	add	r27, r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	a9 5b       	subi	r26, 0xB9	; 185
    1fba:	bb 4f       	sbci	r27, 0xFB	; 251
    1fbc:	52 96       	adiw	r26, 0x12	; 18
    1fbe:	8c 91       	ld	r24, X
    1fc0:	52 97       	sbiw	r26, 0x12	; 18
    1fc2:	e5 5d       	subi	r30, 0xD5	; 213
    1fc4:	f9 4f       	sbci	r31, 0xF9	; 249
    1fc6:	80 83       	st	Z, r24
        hm[ply].capture = EMPTY;
    1fc8:	52 96       	adiw	r26, 0x12	; 18
    1fca:	1c 92       	st	X, r1
    }
    //checkBoard();
}
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <doMove>:




void doMove(uint8_t from, uint8_t to) {
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    hm[0].bestFrom= 0xff;
    1fd6:	e7 e4       	ldi	r30, 0x47	; 71
    1fd8:	f4 e0       	ldi	r31, 0x04	; 4
    1fda:	9f ef       	ldi	r25, 0xFF	; 255
    1fdc:	94 87       	std	Z+12, r25	; 0x0c
    hm[0].actFrom = 0xff;
    1fde:	96 87       	std	Z+14, r25	; 0x0e
    hm[0].actEntry = hm[0].firstEntry;
    1fe0:	20 81       	ld	r18, Z
    1fe2:	31 81       	ldd	r19, Z+1	; 0x01
    1fe4:	33 83       	std	Z+3, r19	; 0x03
    1fe6:	22 83       	std	Z+2, r18	; 0x02
    uint8_t ep = hm[0].ep;
    1fe8:	31 89       	ldd	r19, Z+17	; 0x11
    hm[0].ep   = hm[1].ep;
    1fea:	97 a1       	ldd	r25, Z+39	; 0x27
    1fec:	91 8b       	std	Z+17, r25	; 0x11
    hm[0].capture = EMPTY;
    1fee:	12 8a       	std	Z+18, r1	; 0x12
    switch(board[from]&7) {
    1ff0:	e8 2f       	mov	r30, r24
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	ef 01       	movw	r28, r30
    1ff6:	c5 5d       	subi	r28, 0xD5	; 213
    1ff8:	d9 4f       	sbci	r29, 0xF9	; 249
    1ffa:	28 81       	ld	r18, Y
    1ffc:	92 2f       	mov	r25, r18
    1ffe:	97 70       	andi	r25, 0x07	; 7
    2000:	94 30       	cpi	r25, 0x04	; 4
    2002:	38 f4       	brcc	.+14     	; 0x2012 <doMove+0x40>
    2004:	92 30       	cpi	r25, 0x02	; 2
    2006:	08 f0       	brcs	.+2      	; 0x200a <doMove+0x38>
    2008:	40 c0       	rjmp	.+128    	; 0x208a <doMove+0xb8>
    200a:	91 30       	cpi	r25, 0x01	; 1
    200c:	09 f4       	brne	.+2      	; 0x2010 <doMove+0x3e>
    200e:	49 c0       	rjmp	.+146    	; 0x20a2 <doMove+0xd0>
    2010:	1f c1       	rjmp	.+574    	; 0x2250 <doMove+0x27e>
    2012:	95 30       	cpi	r25, 0x05	; 5
    2014:	d1 f1       	breq	.+116    	; 0x208a <doMove+0xb8>
    2016:	20 f0       	brcs	.+8      	; 0x2020 <doMove+0x4e>
    2018:	96 30       	cpi	r25, 0x06	; 6
    201a:	09 f4       	brne	.+2      	; 0x201e <doMove+0x4c>
    201c:	99 c0       	rjmp	.+306    	; 0x2150 <doMove+0x17e>
    201e:	18 c1       	rjmp	.+560    	; 0x2250 <doMove+0x27e>
        case ROOK:
            if (side == WHITE && from == SQ_A1)
    2020:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <side>
    2024:	98 30       	cpi	r25, 0x08	; 8
    2026:	59 f4       	brne	.+22     	; 0x203e <doMove+0x6c>
    2028:	81 11       	cpse	r24, r1
    202a:	09 c0       	rjmp	.+18     	; 0x203e <doMove+0x6c>
                hm[0].flags&=~(FLAG_CL_WHITE);
    202c:	a7 e4       	ldi	r26, 0x47	; 71
    202e:	b4 e0       	ldi	r27, 0x04	; 4
    2030:	50 96       	adiw	r26, 0x10	; 16
    2032:	8c 91       	ld	r24, X
    2034:	50 97       	sbiw	r26, 0x10	; 16
    2036:	8d 7f       	andi	r24, 0xFD	; 253
    2038:	50 96       	adiw	r26, 0x10	; 16
    203a:	8c 93       	st	X, r24
    203c:	26 c0       	rjmp	.+76     	; 0x208a <doMove+0xb8>
            else if (side == WHITE && from == SQ_H1)
    203e:	98 30       	cpi	r25, 0x08	; 8
    2040:	59 f4       	brne	.+22     	; 0x2058 <doMove+0x86>
    2042:	87 30       	cpi	r24, 0x07	; 7
    2044:	49 f4       	brne	.+18     	; 0x2058 <doMove+0x86>
                hm[0].flags&=~(FLAG_CS_WHITE);
    2046:	a7 e4       	ldi	r26, 0x47	; 71
    2048:	b4 e0       	ldi	r27, 0x04	; 4
    204a:	50 96       	adiw	r26, 0x10	; 16
    204c:	8c 91       	ld	r24, X
    204e:	50 97       	sbiw	r26, 0x10	; 16
    2050:	8e 7f       	andi	r24, 0xFE	; 254
    2052:	50 96       	adiw	r26, 0x10	; 16
    2054:	8c 93       	st	X, r24
    2056:	19 c0       	rjmp	.+50     	; 0x208a <doMove+0xb8>
            else if (side == BLACK && from == SQ_A8)
    2058:	90 31       	cpi	r25, 0x10	; 16
    205a:	59 f4       	brne	.+22     	; 0x2072 <doMove+0xa0>
    205c:	80 37       	cpi	r24, 0x70	; 112
    205e:	49 f4       	brne	.+18     	; 0x2072 <doMove+0xa0>
                hm[0].flags&=~(FLAG_CL_BLACK);
    2060:	a7 e4       	ldi	r26, 0x47	; 71
    2062:	b4 e0       	ldi	r27, 0x04	; 4
    2064:	50 96       	adiw	r26, 0x10	; 16
    2066:	8c 91       	ld	r24, X
    2068:	50 97       	sbiw	r26, 0x10	; 16
    206a:	87 7f       	andi	r24, 0xF7	; 247
    206c:	50 96       	adiw	r26, 0x10	; 16
    206e:	8c 93       	st	X, r24
    2070:	0c c0       	rjmp	.+24     	; 0x208a <doMove+0xb8>
            else if (side == BLACK && from == SQ_H8)
    2072:	90 31       	cpi	r25, 0x10	; 16
    2074:	51 f4       	brne	.+20     	; 0x208a <doMove+0xb8>
    2076:	87 37       	cpi	r24, 0x77	; 119
    2078:	41 f4       	brne	.+16     	; 0x208a <doMove+0xb8>
                hm[0].flags&=~(FLAG_CS_BLACK);
    207a:	a7 e4       	ldi	r26, 0x47	; 71
    207c:	b4 e0       	ldi	r27, 0x04	; 4
    207e:	50 96       	adiw	r26, 0x10	; 16
    2080:	8c 91       	ld	r24, X
    2082:	50 97       	sbiw	r26, 0x10	; 16
    2084:	8b 7f       	andi	r24, 0xFB	; 251
    2086:	50 96       	adiw	r26, 0x10	; 16
    2088:	8c 93       	st	X, r24
        case KNIGHT:
        case BISHOP:
        case QUEEN:
            hm[0].capture = board[to];
    208a:	a6 2f       	mov	r26, r22
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	a5 5d       	subi	r26, 0xD5	; 213
    2090:	b9 4f       	sbci	r27, 0xF9	; 249
    2092:	8c 91       	ld	r24, X
    2094:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <hm+0x12>
            board[to] = board[from];
    2098:	2c 93       	st	X, r18
            board[from] = EMPTY;
    209a:	e5 5d       	subi	r30, 0xD5	; 213
    209c:	f9 4f       	sbci	r31, 0xF9	; 249
    209e:	10 82       	st	Z, r1
            break;
    20a0:	d7 c0       	rjmp	.+430    	; 0x2250 <doMove+0x27e>
        case PAWN:
            if (to & PROMO_FLAG) {
    20a2:	66 23       	and	r22, r22
    20a4:	fc f4       	brge	.+62     	; 0x20e4 <doMove+0x112>
                uint8_t pto = (to & 0xf) | ((side == WHITE ) ? SQ_A8 : SQ_A1); // or higher bits of line
    20a6:	a6 2f       	mov	r26, r22
    20a8:	af 70       	andi	r26, 0x0F	; 15
    20aa:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    20ae:	88 30       	cpi	r24, 0x08	; 8
    20b0:	11 f4       	brne	.+4      	; 0x20b6 <doMove+0xe4>
    20b2:	e0 e7       	ldi	r30, 0x70	; 112
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <doMove+0xe6>
    20b6:	e0 e0       	ldi	r30, 0x00	; 0
    20b8:	ae 2b       	or	r26, r30
                uint8_t piece = ((pto >> 4) & 0x7) | side; // piece is included in <to> part of the move
    20ba:	9a 2f       	mov	r25, r26
    20bc:	92 95       	swap	r25
    20be:	9f 70       	andi	r25, 0x0F	; 15
    20c0:	98 2b       	or	r25, r24
                hm[ply].capture = board[pto];
    20c2:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    20c6:	ea 2f       	mov	r30, r26
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	e5 5d       	subi	r30, 0xD5	; 213
    20cc:	f9 4f       	sbci	r31, 0xF9	; 249
    20ce:	20 81       	ld	r18, Z
    20d0:	36 e1       	ldi	r19, 0x16	; 22
    20d2:	83 9f       	mul	r24, r19
    20d4:	d0 01       	movw	r26, r0
    20d6:	11 24       	eor	r1, r1
    20d8:	a9 5b       	subi	r26, 0xB9	; 185
    20da:	bb 4f       	sbci	r27, 0xFB	; 251
    20dc:	52 96       	adiw	r26, 0x12	; 18
    20de:	2c 93       	st	X, r18
                board[pto] = piece;
    20e0:	90 83       	st	Z, r25
    20e2:	b6 c0       	rjmp	.+364    	; 0x2250 <doMove+0x27e>
            } else {
                hm[0].capture = board[to];
    20e4:	46 2f       	mov	r20, r22
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	da 01       	movw	r26, r20
    20ea:	a5 5d       	subi	r26, 0xD5	; 213
    20ec:	b9 4f       	sbci	r27, 0xF9	; 249
    20ee:	8c 91       	ld	r24, X
    20f0:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <hm+0x12>
                board[to] = PAWN | side;
    20f4:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    20f8:	98 2f       	mov	r25, r24
    20fa:	91 60       	ori	r25, 0x01	; 1
    20fc:	9c 93       	st	X, r25
                board[from] = EMPTY;
    20fe:	df 01       	movw	r26, r30
    2100:	a5 5d       	subi	r26, 0xD5	; 213
    2102:	b9 4f       	sbci	r27, 0xF9	; 249
    2104:	1c 92       	st	X, r1
                if (to == ep)
    2106:	36 13       	cpse	r19, r22
    2108:	0a c0       	rjmp	.+20     	; 0x211e <doMove+0x14c>
                    board[side == WHITE ? to-0x10 : to+0x10] = EMPTY;
    210a:	88 30       	cpi	r24, 0x08	; 8
    210c:	19 f4       	brne	.+6      	; 0x2114 <doMove+0x142>
    210e:	da 01       	movw	r26, r20
    2110:	50 97       	sbiw	r26, 0x10	; 16
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <doMove+0x146>
    2114:	da 01       	movw	r26, r20
    2116:	50 96       	adiw	r26, 0x10	; 16
    2118:	a5 5d       	subi	r26, 0xD5	; 213
    211a:	b9 4f       	sbci	r27, 0xF9	; 249
    211c:	1c 92       	st	X, r1
                hm[0].ep = (((side == WHITE) && ((from-to)==0x20)) || (side == BLACK && ((to-from)==0x20))) ? to : 0xff;
    211e:	88 30       	cpi	r24, 0x08	; 8
    2120:	31 f4       	brne	.+12     	; 0x212e <doMove+0x15c>
    2122:	9f 01       	movw	r18, r30
    2124:	24 1b       	sub	r18, r20
    2126:	35 0b       	sbc	r19, r21
    2128:	20 32       	cpi	r18, 0x20	; 32
    212a:	31 05       	cpc	r19, r1
    212c:	49 f0       	breq	.+18     	; 0x2140 <doMove+0x16e>
    212e:	80 31       	cpi	r24, 0x10	; 16
    2130:	49 f4       	brne	.+18     	; 0x2144 <doMove+0x172>
    2132:	4e 1b       	sub	r20, r30
    2134:	5f 0b       	sbc	r21, r31
    2136:	40 32       	cpi	r20, 0x20	; 32
    2138:	51 05       	cpc	r21, r1
    213a:	31 f0       	breq	.+12     	; 0x2148 <doMove+0x176>
    213c:	af ef       	ldi	r26, 0xFF	; 255
    213e:	05 c0       	rjmp	.+10     	; 0x214a <doMove+0x178>
    2140:	a6 2f       	mov	r26, r22
    2142:	03 c0       	rjmp	.+6      	; 0x214a <doMove+0x178>
    2144:	af ef       	ldi	r26, 0xFF	; 255
    2146:	01 c0       	rjmp	.+2      	; 0x214a <doMove+0x178>
    2148:	a6 2f       	mov	r26, r22
    214a:	a0 93 58 04 	sts	0x0458, r26	; 0x800458 <hm+0x11>
    214e:	80 c0       	rjmp	.+256    	; 0x2250 <doMove+0x27e>
            }
            break;
        case KING:
            if (side == WHITE_MOVE) {
    2150:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <side>
    2154:	98 30       	cpi	r25, 0x08	; 8
    2156:	d1 f5       	brne	.+116    	; 0x21cc <doMove+0x1fa>
                if (from == SQ_E1) {
    2158:	84 30       	cpi	r24, 0x04	; 4
    215a:	a9 f5       	brne	.+106    	; 0x21c6 <doMove+0x1f4>
                    hm[ply+1].flags&=~(FLAG_CS_WHITE|FLAG_CL_WHITE);
    215c:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	ac 01       	movw	r20, r24
    2164:	4f 5f       	subi	r20, 0xFF	; 255
    2166:	5f 4f       	sbci	r21, 0xFF	; 255
    2168:	36 e1       	ldi	r19, 0x16	; 22
    216a:	34 9f       	mul	r19, r20
    216c:	d0 01       	movw	r26, r0
    216e:	35 9f       	mul	r19, r21
    2170:	b0 0d       	add	r27, r0
    2172:	11 24       	eor	r1, r1
    2174:	a9 5b       	subi	r26, 0xB9	; 185
    2176:	bb 4f       	sbci	r27, 0xFB	; 251
    2178:	50 96       	adiw	r26, 0x10	; 16
    217a:	2c 91       	ld	r18, X
    217c:	50 97       	sbiw	r26, 0x10	; 16
    217e:	2c 7f       	andi	r18, 0xFC	; 252
    2180:	50 96       	adiw	r26, 0x10	; 16
    2182:	2c 93       	st	X, r18
                    if (hm[ply].actEntry->to == SQ_G1) {  // short castle
    2184:	38 9f       	mul	r19, r24
    2186:	d0 01       	movw	r26, r0
    2188:	39 9f       	mul	r19, r25
    218a:	b0 0d       	add	r27, r0
    218c:	11 24       	eor	r1, r1
    218e:	a9 5b       	subi	r26, 0xB9	; 185
    2190:	bb 4f       	sbci	r27, 0xFB	; 251
    2192:	12 96       	adiw	r26, 0x02	; 2
    2194:	0d 90       	ld	r0, X+
    2196:	bc 91       	ld	r27, X
    2198:	a0 2d       	mov	r26, r0
    219a:	11 96       	adiw	r26, 0x01	; 1
    219c:	8c 91       	ld	r24, X
    219e:	86 30       	cpi	r24, 0x06	; 6
    21a0:	49 f4       	brne	.+18     	; 0x21b4 <doMove+0x1e2>
                        board[SQ_F1] = WROOK; board[SQ_H1] = EMPTY;
    21a2:	ab e2       	ldi	r26, 0x2B	; 43
    21a4:	b6 e0       	ldi	r27, 0x06	; 6
    21a6:	8c e0       	ldi	r24, 0x0C	; 12
    21a8:	15 96       	adiw	r26, 0x05	; 5
    21aa:	8c 93       	st	X, r24
    21ac:	15 97       	sbiw	r26, 0x05	; 5
    21ae:	17 96       	adiw	r26, 0x07	; 7
    21b0:	1c 92       	st	X, r1
    21b2:	09 c0       	rjmp	.+18     	; 0x21c6 <doMove+0x1f4>
                    } else if (hm[ply].actEntry->to == SQ_C1) {  // long castle
    21b4:	82 30       	cpi	r24, 0x02	; 2
    21b6:	39 f4       	brne	.+14     	; 0x21c6 <doMove+0x1f4>
                        board[SQ_D1] = WROOK;  board[SQ_A1] = EMPTY;
    21b8:	ab e2       	ldi	r26, 0x2B	; 43
    21ba:	b6 e0       	ldi	r27, 0x06	; 6
    21bc:	8c e0       	ldi	r24, 0x0C	; 12
    21be:	13 96       	adiw	r26, 0x03	; 3
    21c0:	8c 93       	st	X, r24
    21c2:	13 97       	sbiw	r26, 0x03	; 3
    21c4:	1c 92       	st	X, r1
                    }
                }
                hm[0].wKingPos = to;
    21c6:	60 93 5c 04 	sts	0x045C, r22	; 0x80045c <hm+0x15>
    21ca:	36 c0       	rjmp	.+108    	; 0x2238 <doMove+0x266>
            } else {
                if (hm[ply].actEntry->from == SQ_E8) {
    21cc:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	26 e1       	ldi	r18, 0x16	; 22
    21d4:	28 9f       	mul	r18, r24
    21d6:	e0 01       	movw	r28, r0
    21d8:	29 9f       	mul	r18, r25
    21da:	d0 0d       	add	r29, r0
    21dc:	11 24       	eor	r1, r1
    21de:	c9 5b       	subi	r28, 0xB9	; 185
    21e0:	db 4f       	sbci	r29, 0xFB	; 251
    21e2:	aa 81       	ldd	r26, Y+2	; 0x02
    21e4:	bb 81       	ldd	r27, Y+3	; 0x03
    21e6:	2c 91       	ld	r18, X
    21e8:	24 37       	cpi	r18, 0x74	; 116
    21ea:	21 f5       	brne	.+72     	; 0x2234 <doMove+0x262>
                    hm[ply+1].flags&=~(FLAG_CS_BLACK|FLAG_CL_BLACK);
    21ec:	ac 01       	movw	r20, r24
    21ee:	4f 5f       	subi	r20, 0xFF	; 255
    21f0:	5f 4f       	sbci	r21, 0xFF	; 255
    21f2:	36 e1       	ldi	r19, 0x16	; 22
    21f4:	34 9f       	mul	r19, r20
    21f6:	d0 01       	movw	r26, r0
    21f8:	35 9f       	mul	r19, r21
    21fa:	b0 0d       	add	r27, r0
    21fc:	11 24       	eor	r1, r1
    21fe:	a9 5b       	subi	r26, 0xB9	; 185
    2200:	bb 4f       	sbci	r27, 0xFB	; 251
    2202:	50 96       	adiw	r26, 0x10	; 16
    2204:	2c 91       	ld	r18, X
    2206:	50 97       	sbiw	r26, 0x10	; 16
    2208:	23 7f       	andi	r18, 0xF3	; 243
    220a:	50 96       	adiw	r26, 0x10	; 16
    220c:	2c 93       	st	X, r18
                    if (hm[ply].actEntry->to == SQ_G8 ) { // short castle
    220e:	aa 81       	ldd	r26, Y+2	; 0x02
    2210:	bb 81       	ldd	r27, Y+3	; 0x03
    2212:	11 96       	adiw	r26, 0x01	; 1
    2214:	8c 91       	ld	r24, X
    2216:	86 37       	cpi	r24, 0x76	; 118
    2218:	31 f4       	brne	.+12     	; 0x2226 <doMove+0x254>
                        board[SQ_F8] = WROOK; board[SQ_H8] = EMPTY;
    221a:	8c e0       	ldi	r24, 0x0C	; 12
    221c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <board+0x75>
    2220:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <board+0x77>
    2224:	07 c0       	rjmp	.+14     	; 0x2234 <doMove+0x262>
                    } else if (hm[ply].actEntry->to == SQ_C8 ) { // long castle
    2226:	82 37       	cpi	r24, 0x72	; 114
    2228:	29 f4       	brne	.+10     	; 0x2234 <doMove+0x262>
                        board[SQ_D8] = WROOK;  board[SQ_A8] = EMPTY;
    222a:	8c e0       	ldi	r24, 0x0C	; 12
    222c:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <board+0x73>
    2230:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <board+0x70>
                    }
                }
                hm[0].bKingPos = to;
    2234:	60 93 5b 04 	sts	0x045B, r22	; 0x80045b <hm+0x14>
            }
            hm[0].capture = board[to];
    2238:	a6 2f       	mov	r26, r22
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	a5 5d       	subi	r26, 0xD5	; 213
    223e:	b9 4f       	sbci	r27, 0xF9	; 249
    2240:	8c 91       	ld	r24, X
    2242:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <hm+0x12>
            board[to]   = board[from];
    2246:	e5 5d       	subi	r30, 0xD5	; 213
    2248:	f9 4f       	sbci	r31, 0xF9	; 249
    224a:	80 81       	ld	r24, Z
    224c:	8c 93       	st	X, r24
            board[from] = EMPTY;
    224e:	10 82       	st	Z, r1
            break;

    }
    getMaterial(0);
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <getMaterial>
    side = OTHER(side);
    2256:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <side>
    225a:	88 e1       	ldi	r24, 0x18	; 24
    225c:	89 27       	eor	r24, r25
    225e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <side>
    hm[0].movesGenerated = 0;
    2262:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <hm+0x13>
}
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	08 95       	ret

0000226c <qsearch>:
    }
    return  bestScore;

}

int16_t qsearch(int16_t al, int16_t be) {
    226c:	ef 92       	push	r14
    226e:	ff 92       	push	r15
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	ec 01       	movw	r28, r24
    227a:	7b 01       	movw	r14, r22
    int16_t score = eval();
    227c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <eval>
    2280:	8c 01       	movw	r16, r24
    nodes++;
    2282:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <nodes>
    2286:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <nodes+0x1>
    228a:	a0 91 b1 06 	lds	r26, 0x06B1	; 0x8006b1 <nodes+0x2>
    228e:	b0 91 b2 06 	lds	r27, 0x06B2	; 0x8006b2 <nodes+0x3>
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	a1 1d       	adc	r26, r1
    2296:	b1 1d       	adc	r27, r1
    2298:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <nodes>
    229c:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <nodes+0x1>
    22a0:	a0 93 b1 06 	sts	0x06B1, r26	; 0x8006b1 <nodes+0x2>
    22a4:	b0 93 b2 06 	sts	0x06B2, r27	; 0x8006b2 <nodes+0x3>
    if (score >= be) return score;
    22a8:	0e 15       	cp	r16, r14
    22aa:	1f 05       	cpc	r17, r15
    22ac:	0c f0       	brlt	.+2      	; 0x22b0 <qsearch+0x44>
    22ae:	4b c0       	rjmp	.+150    	; 0x2346 <qsearch+0xda>
    if (score > al) al = score;
    22b0:	c0 17       	cp	r28, r16
    22b2:	d1 07       	cpc	r29, r17
    22b4:	0c f0       	brlt	.+2      	; 0x22b8 <qsearch+0x4c>
    22b6:	8e 01       	movw	r16, r28
    if (ply >  MAX_HMCOUNT-2) return al;
    22b8:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    22bc:	e5 31       	cpi	r30, 0x15	; 21
    22be:	08 f0       	brcs	.+2      	; 0x22c2 <qsearch+0x56>
    22c0:	42 c0       	rjmp	.+132    	; 0x2346 <qsearch+0xda>
    hm[ply].movesGenerated=0;
    22c2:	86 e1       	ldi	r24, 0x16	; 22
    22c4:	e8 9f       	mul	r30, r24
    22c6:	f0 01       	movw	r30, r0
    22c8:	11 24       	eor	r1, r1
    22ca:	e9 5b       	subi	r30, 0xB9	; 185
    22cc:	fb 4f       	sbci	r31, 0xFB	; 251
    22ce:	13 8a       	std	Z+19, r1	; 0x13
    //uartPuts("  bKing= ");
    //uartSendHexByte(hm[ply].bKingPos);
    //uartPuts("  wKing= ");
    //uartSendHexByte(hm[ply].wKingPos);
    //newLine();
    while(nextMove(1)) {
    22d0:	30 c0       	rjmp	.+96     	; 0x2332 <qsearch+0xc6>
        //uartPuts(" ply: ");
        //uartSendHexByte(ply);
        //uartPuts(" - ");
        //printMove(hm[ply].actFrom,hm[ply].actTo); newLine();
        if (criticalError) { backMove(); dbgPuts("ERROR \n\r"); break; }
    22d2:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <criticalError>
    22d6:	88 23       	and	r24, r24
    22d8:	39 f0       	breq	.+14     	; 0x22e8 <qsearch+0x7c>
    22da:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <backMove>
    22de:	82 ed       	ldi	r24, 0xD2	; 210
    22e0:	93 e0       	ldi	r25, 0x03	; 3
    22e2:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
    22e6:	2f c0       	rjmp	.+94     	; 0x2346 <qsearch+0xda>
            uartPuts("Stellung ohne Schach\n\r");
            printBoard();
            while(1);
        }
        */
        ply++; score = -qsearch(-be,-al); ply--;
    22e8:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    22ec:	8f 5f       	subi	r24, 0xFF	; 255
    22ee:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <ply>
    22f2:	66 27       	eor	r22, r22
    22f4:	77 27       	eor	r23, r23
    22f6:	60 1b       	sub	r22, r16
    22f8:	71 0b       	sbc	r23, r17
    22fa:	88 27       	eor	r24, r24
    22fc:	99 27       	eor	r25, r25
    22fe:	8e 19       	sub	r24, r14
    2300:	9f 09       	sbc	r25, r15
    2302:	0e 94 36 11 	call	0x226c	; 0x226c <qsearch>
    2306:	cc 27       	eor	r28, r28
    2308:	dd 27       	eor	r29, r29
    230a:	c8 1b       	sub	r28, r24
    230c:	d9 0b       	sbc	r29, r25
    230e:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    2312:	81 50       	subi	r24, 0x01	; 1
    2314:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <ply>
        backMove();
    2318:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <backMove>
        if (score > be || criticalError) {
    231c:	ec 16       	cp	r14, r28
    231e:	fd 06       	cpc	r15, r29
    2320:	7c f0       	brlt	.+30     	; 0x2340 <qsearch+0xd4>
    2322:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <criticalError>
    2326:	81 11       	cpse	r24, r1
    2328:	0d c0       	rjmp	.+26     	; 0x2344 <qsearch+0xd8>
            return score;
        }
        if (score>al) {
    232a:	0c 17       	cp	r16, r28
    232c:	1d 07       	cpc	r17, r29
    232e:	0c f4       	brge	.+2      	; 0x2332 <qsearch+0xc6>
            al = score;
    2330:	8e 01       	movw	r16, r28
    //uartPuts("  bKing= ");
    //uartSendHexByte(hm[ply].bKingPos);
    //uartPuts("  wKing= ");
    //uartSendHexByte(hm[ply].wKingPos);
    //newLine();
    while(nextMove(1)) {
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	0e 94 d6 09 	call	0x13ac	; 0x13ac <nextMove>
    233a:	81 11       	cpse	r24, r1
    233c:	ca cf       	rjmp	.-108    	; 0x22d2 <qsearch+0x66>
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <qsearch+0xda>
        }
        */
        ply++; score = -qsearch(-be,-al); ply--;
        backMove();
        if (score > be || criticalError) {
            return score;
    2340:	8e 01       	movw	r16, r28
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <qsearch+0xda>
    2344:	8e 01       	movw	r16, r28
        if (score>al) {
            al = score;
        }
    }
    return al;
}
    2346:	c8 01       	movw	r24, r16
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	08 95       	ret

00002356 <negaMax>:
        dbgSendDec16(bestScore);
        dbgPuts("\n\r");
    }
    return bestScore;
}
int16_t  negaMax(int16_t al, int16_t be) {
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	7c 01       	movw	r14, r24
    236a:	8b 01       	movw	r16, r22
    int16_t bestScore = -INFINTE_VAL;
    int16_t score;
    uint8_t foundMove=0;
    if (ply>=plyMax) return qsearch(al,be);
    236c:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    2370:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <plyMax>
    2374:	e8 17       	cp	r30, r24
    2376:	20 f0       	brcs	.+8      	; 0x2380 <negaMax+0x2a>
    2378:	c7 01       	movw	r24, r14
    237a:	0e 94 36 11 	call	0x226c	; 0x226c <qsearch>
    237e:	4c c0       	rjmp	.+152    	; 0x2418 <negaMax+0xc2>
    hm[ply].movesGenerated=0;
    2380:	86 e1       	ldi	r24, 0x16	; 22
    2382:	e8 9f       	mul	r30, r24
    2384:	f0 01       	movw	r30, r0
    2386:	11 24       	eor	r1, r1
    2388:	e9 5b       	subi	r30, 0xB9	; 185
    238a:	fb 4f       	sbci	r31, 0xFB	; 251
    238c:	13 8a       	std	Z+19, r1	; 0x13
    return bestScore;
}
int16_t  negaMax(int16_t al, int16_t be) {
    int16_t bestScore = -INFINTE_VAL;
    int16_t score;
    uint8_t foundMove=0;
    238e:	b1 2c       	mov	r11, r1
        dbgPuts("\n\r");
    }
    return bestScore;
}
int16_t  negaMax(int16_t al, int16_t be) {
    int16_t bestScore = -INFINTE_VAL;
    2390:	c0 e0       	ldi	r28, 0x00	; 0
    2392:	d3 e8       	ldi	r29, 0x83	; 131
    int16_t score;
    uint8_t foundMove=0;
    if (ply>=plyMax) return qsearch(al,be);
    hm[ply].movesGenerated=0;
    while (nextMove(0)) {
    2394:	31 c0       	rjmp	.+98     	; 0x23f8 <negaMax+0xa2>
        foundMove = 1;
        ply++; score = -negaMax(-be,-al); ply--;
    2396:	90 91 ac 06 	lds	r25, 0x06AC	; 0x8006ac <ply>
    239a:	9f 5f       	subi	r25, 0xFF	; 255
    239c:	90 93 ac 06 	sts	0x06AC, r25	; 0x8006ac <ply>
    23a0:	66 27       	eor	r22, r22
    23a2:	77 27       	eor	r23, r23
    23a4:	6e 19       	sub	r22, r14
    23a6:	7f 09       	sbc	r23, r15
    23a8:	88 27       	eor	r24, r24
    23aa:	99 27       	eor	r25, r25
    23ac:	80 1b       	sub	r24, r16
    23ae:	91 0b       	sbc	r25, r17
    23b0:	0e 94 ab 11 	call	0x2356	; 0x2356 <negaMax>
    23b4:	cc 24       	eor	r12, r12
    23b6:	dd 24       	eor	r13, r13
    23b8:	c8 1a       	sub	r12, r24
    23ba:	d9 0a       	sbc	r13, r25
    23bc:	90 91 ac 06 	lds	r25, 0x06AC	; 0x8006ac <ply>
    23c0:	91 50       	subi	r25, 0x01	; 1
    23c2:	90 93 ac 06 	sts	0x06AC, r25	; 0x8006ac <ply>
        backMove();
    23c6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <backMove>
    int16_t score;
    uint8_t foundMove=0;
    if (ply>=plyMax) return qsearch(al,be);
    hm[ply].movesGenerated=0;
    while (nextMove(0)) {
        foundMove = 1;
    23ca:	bb 24       	eor	r11, r11
    23cc:	b3 94       	inc	r11
        ply++; score = -negaMax(-be,-al); ply--;
        backMove();
        if (score>bestScore) {
    23ce:	cc 15       	cp	r28, r12
    23d0:	dd 05       	cpc	r29, r13
    23d2:	94 f4       	brge	.+36     	; 0x23f8 <negaMax+0xa2>
            hm[ply].bestFrom = hm[ply].actFrom;
    23d4:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <ply>
    23d8:	86 e1       	ldi	r24, 0x16	; 22
    23da:	e8 9f       	mul	r30, r24
    23dc:	f0 01       	movw	r30, r0
    23de:	11 24       	eor	r1, r1
    23e0:	e9 5b       	subi	r30, 0xB9	; 185
    23e2:	fb 4f       	sbci	r31, 0xFB	; 251
    23e4:	86 85       	ldd	r24, Z+14	; 0x0e
    23e6:	84 87       	std	Z+12, r24	; 0x0c
            hm[ply].bestTo = hm[ply].actTo;
    23e8:	87 85       	ldd	r24, Z+15	; 0x0f
    23ea:	85 87       	std	Z+13, r24	; 0x0d
            hm[ply].bestValue = score;
    23ec:	d3 86       	std	Z+11, r13	; 0x0b
    23ee:	c2 86       	std	Z+10, r12	; 0x0a
            bestScore = score;
            if (bestScore>be) return bestScore;
    23f0:	0c 15       	cp	r16, r12
    23f2:	1d 05       	cpc	r17, r13
    23f4:	74 f0       	brlt	.+28     	; 0x2412 <negaMax+0xbc>
        backMove();
        if (score>bestScore) {
            hm[ply].bestFrom = hm[ply].actFrom;
            hm[ply].bestTo = hm[ply].actTo;
            hm[ply].bestValue = score;
            bestScore = score;
    23f6:	e6 01       	movw	r28, r12
    int16_t bestScore = -INFINTE_VAL;
    int16_t score;
    uint8_t foundMove=0;
    if (ply>=plyMax) return qsearch(al,be);
    hm[ply].movesGenerated=0;
    while (nextMove(0)) {
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <nextMove>
    2400:	81 11       	cpse	r24, r1
    2402:	c9 cf       	rjmp	.-110    	; 0x2396 <negaMax+0x40>
            hm[ply].bestValue = score;
            bestScore = score;
            if (bestScore>be) return bestScore;
        }
    }
    if (!foundMove) {
    2404:	b1 10       	cpse	r11, r1
    2406:	07 c0       	rjmp	.+14     	; 0x2416 <negaMax+0xc0>
        bestScore = -INFINTE_VAL+ply;
    2408:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9d 57       	subi	r25, 0x7D	; 125
    2410:	03 c0       	rjmp	.+6      	; 0x2418 <negaMax+0xc2>
        if (score>bestScore) {
            hm[ply].bestFrom = hm[ply].actFrom;
            hm[ply].bestTo = hm[ply].actTo;
            hm[ply].bestValue = score;
            bestScore = score;
            if (bestScore>be) return bestScore;
    2412:	c6 01       	movw	r24, r12
    2414:	01 c0       	rjmp	.+2      	; 0x2418 <negaMax+0xc2>
    2416:	ce 01       	movw	r24, r28
    if (!foundMove) {
        bestScore = -INFINTE_VAL+ply;
    }
    return  bestScore;

}
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	ff 90       	pop	r15
    2422:	ef 90       	pop	r14
    2424:	df 90       	pop	r13
    2426:	cf 90       	pop	r12
    2428:	bf 90       	pop	r11
    242a:	08 95       	ret

0000242c <calculateMove>:
#include "eval.h"
#include "movemake.h"
#include "../user.h"
int16_t negaMax(int16_t al, int16_t be);
int16_t qsearch(int16_t al, int16_t be);
int16_t calculateMove() {
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    int16_t bestScore = -INFINTE_VAL;
    int16_t al, be;
    int16_t score;
    uint8_t foundMove = 0;
    criticalError = 0;
    2434:	10 92 ab 06 	sts	0x06AB, r1	; 0x8006ab <criticalError>
    dbgPuts("\n\rStart thinking ...\n\r");
    2438:	8b ed       	ldi	r24, 0xDB	; 219
    243a:	93 e0       	ldi	r25, 0x03	; 3
    243c:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
    maxDepth=3;
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	80 93 65 0b 	sts	0x0B65, r24	; 0x800b65 <maxDepth>
    nodes = 0;
    2446:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <nodes>
    244a:	10 92 b0 06 	sts	0x06B0, r1	; 0x8006b0 <nodes+0x1>
    244e:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <nodes+0x2>
    2452:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <nodes+0x3>
    for (plyMax = 1; plyMax<=maxDepth; plyMax++) {
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <plyMax>
int16_t qsearch(int16_t al, int16_t be);
int16_t calculateMove() {
    int16_t bestScore = -INFINTE_VAL;
    int16_t al, be;
    int16_t score;
    uint8_t foundMove = 0;
    245c:	c0 e0       	ldi	r28, 0x00	; 0
#include "movemake.h"
#include "../user.h"
int16_t negaMax(int16_t al, int16_t be);
int16_t qsearch(int16_t al, int16_t be);
int16_t calculateMove() {
    int16_t bestScore = -INFINTE_VAL;
    245e:	00 e0       	ldi	r16, 0x00	; 0
    2460:	13 e8       	ldi	r17, 0x83	; 131
    uint8_t foundMove = 0;
    criticalError = 0;
    dbgPuts("\n\rStart thinking ...\n\r");
    maxDepth=3;
    nodes = 0;
    for (plyMax = 1; plyMax<=maxDepth; plyMax++) {
    2462:	63 c0       	rjmp	.+198    	; 0x252a <calculateMove+0xfe>
        foundMove = 0;
        al = -INFINTE_VAL;
        be = INFINTE_VAL;
        dbgPuts("Ply ");
    2464:	82 ef       	ldi	r24, 0xF2	; 242
    2466:	93 e0       	ldi	r25, 0x03	; 3
    2468:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
        dbgSendDec16(plyMax);
    246c:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <plyMax>
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 0d 04 	call	0x81a	; 0x81a <dbgSendDec16>
        dbgNewLine();
    2476:	0e 94 10 04 	call	0x820	; 0x820 <dbgNewLine>
        hm[0].movesGenerated=0;
    247a:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <hm+0x13>
    criticalError = 0;
    dbgPuts("\n\rStart thinking ...\n\r");
    maxDepth=3;
    nodes = 0;
    for (plyMax = 1; plyMax<=maxDepth; plyMax++) {
        foundMove = 0;
    247e:	c0 e0       	ldi	r28, 0x00	; 0
        be = INFINTE_VAL;
        dbgPuts("Ply ");
        dbgSendDec16(plyMax);
        dbgNewLine();
        hm[0].movesGenerated=0;
        while (nextMove(0)) {
    2480:	41 c0       	rjmp	.+130    	; 0x2504 <calculateMove+0xd8>
            //printMove(hm[ply].actFrom,hm[ply].actTo);newLine();
            ply++; score = -negaMax(-be,-al); ply--;
    2482:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <ply>
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	7d e7       	ldi	r23, 0x7D	; 125
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	93 e8       	ldi	r25, 0x83	; 131
    2494:	0e 94 ab 11 	call	0x2356	; 0x2356 <negaMax>
    2498:	cc 27       	eor	r28, r28
    249a:	dd 27       	eor	r29, r29
    249c:	c8 1b       	sub	r28, r24
    249e:	d9 0b       	sbc	r29, r25
    24a0:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <ply>
    24a4:	81 50       	subi	r24, 0x01	; 1
    24a6:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <ply>
            backMove();
    24aa:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <backMove>
            //printBoard();
            if (score>bestScore) {
    24ae:	0c 17       	cp	r16, r28
    24b0:	1d 07       	cpc	r17, r29
    24b2:	1c f5       	brge	.+70     	; 0x24fa <calculateMove+0xce>
                dbgSendDec16(plyMax);
    24b4:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <plyMax>
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 0d 04 	call	0x81a	; 0x81a <dbgSendDec16>
                dbgPuts(" ");
    24be:	88 e4       	ldi	r24, 0x48	; 72
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                printMove(hm[0].actFrom,hm[0].actTo);
    24c6:	07 e4       	ldi	r16, 0x47	; 71
    24c8:	14 e0       	ldi	r17, 0x04	; 4
    24ca:	f8 01       	movw	r30, r16
    24cc:	67 85       	ldd	r22, Z+15	; 0x0f
    24ce:	86 85       	ldd	r24, Z+14	; 0x0e
    24d0:	0e 94 33 03 	call	0x666	; 0x666 <printMove>
                dbgPuts(" ");
    24d4:	88 e4       	ldi	r24, 0x48	; 72
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                dbgSendDec16(score);
    24dc:	ce 01       	movw	r24, r28
    24de:	0e 94 0d 04 	call	0x81a	; 0x81a <dbgSendDec16>
                dbgPuts("\n\r");
    24e2:	89 e0       	ldi	r24, 0x09	; 9
    24e4:	94 e0       	ldi	r25, 0x04	; 4
    24e6:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
                hm[0].bestFrom = hm[0].actFrom;
    24ea:	f8 01       	movw	r30, r16
    24ec:	86 85       	ldd	r24, Z+14	; 0x0e
    24ee:	84 87       	std	Z+12, r24	; 0x0c
                hm[0].bestTo = hm[0].actTo;
    24f0:	87 85       	ldd	r24, Z+15	; 0x0f
    24f2:	85 87       	std	Z+13, r24	; 0x0d
                hm[0].bestValue = score;
    24f4:	d3 87       	std	Z+11, r29	; 0x0b
    24f6:	c2 87       	std	Z+10, r28	; 0x0a
                bestScore = score;
    24f8:	8e 01       	movw	r16, r28
            }
            //printMovelist(0);
            foundMove = 1;
            if (criticalError) break;
    24fa:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <criticalError>
                hm[0].bestTo = hm[0].actTo;
                hm[0].bestValue = score;
                bestScore = score;
            }
            //printMovelist(0);
            foundMove = 1;
    24fe:	c1 e0       	ldi	r28, 0x01	; 1
            if (criticalError) break;
    2500:	81 11       	cpse	r24, r1
    2502:	07 c0       	rjmp	.+14     	; 0x2512 <calculateMove+0xe6>
        be = INFINTE_VAL;
        dbgPuts("Ply ");
        dbgSendDec16(plyMax);
        dbgNewLine();
        hm[0].movesGenerated=0;
        while (nextMove(0)) {
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 94 d6 09 	call	0x13ac	; 0x13ac <nextMove>
    250c:	81 11       	cpse	r24, r1
    250e:	b9 cf       	rjmp	.-142    	; 0x2482 <calculateMove+0x56>
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <calculateMove+0xe8>
                hm[0].bestTo = hm[0].actTo;
                hm[0].bestValue = score;
                bestScore = score;
            }
            //printMovelist(0);
            foundMove = 1;
    2512:	c1 e0       	ldi	r28, 0x01	; 1
            if (criticalError) break;
        }
        if (!foundMove || criticalError) break;
    2514:	cc 23       	and	r28, r28
    2516:	81 f0       	breq	.+32     	; 0x2538 <calculateMove+0x10c>
    2518:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <criticalError>
    251c:	81 11       	cpse	r24, r1
    251e:	0c c0       	rjmp	.+24     	; 0x2538 <calculateMove+0x10c>
    uint8_t foundMove = 0;
    criticalError = 0;
    dbgPuts("\n\rStart thinking ...\n\r");
    maxDepth=3;
    nodes = 0;
    for (plyMax = 1; plyMax<=maxDepth; plyMax++) {
    2520:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <plyMax>
    2524:	8f 5f       	subi	r24, 0xFF	; 255
    2526:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <plyMax>
    252a:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <plyMax>
    252e:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <maxDepth>
    2532:	89 17       	cp	r24, r25
    2534:	08 f0       	brcs	.+2      	; 0x2538 <calculateMove+0x10c>
    2536:	96 cf       	rjmp	.-212    	; 0x2464 <calculateMove+0x38>
            foundMove = 1;
            if (criticalError) break;
        }
        if (!foundMove || criticalError) break;
    }
    if (!foundMove) {
    2538:	c1 11       	cpse	r28, r1
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <calculateMove+0x12c>
        if (side == WHITE) {
    253c:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <side>
    2540:	88 30       	cpi	r24, 0x08	; 8
    2542:	29 f4       	brne	.+10     	; 0x254e <calculateMove+0x122>
            dbgPuts("White is mate !!! \n\r");
    2544:	87 ef       	ldi	r24, 0xF7	; 247
    2546:	93 e0       	ldi	r25, 0x03	; 3
    2548:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
    254c:	10 c0       	rjmp	.+32     	; 0x256e <calculateMove+0x142>
        } else {
            dbgPuts("Black is mate !!! \n\r");
    254e:	8c e0       	ldi	r24, 0x0C	; 12
    2550:	94 e0       	ldi	r25, 0x04	; 4
    2552:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
    2556:	0b c0       	rjmp	.+22     	; 0x256e <calculateMove+0x142>
        }
    } else {
        dbgPuts("\n\r... end thinking best score = ");
    2558:	81 e2       	ldi	r24, 0x21	; 33
    255a:	94 e0       	ldi	r25, 0x04	; 4
    255c:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
        dbgSendDec16(bestScore);
    2560:	c8 01       	movw	r24, r16
    2562:	0e 94 0d 04 	call	0x81a	; 0x81a <dbgSendDec16>
        dbgPuts("\n\r");
    2566:	89 e0       	ldi	r24, 0x09	; 9
    2568:	94 e0       	ldi	r25, 0x04	; 4
    256a:	0e 94 04 04 	call	0x808	; 0x808 <dbgPuts>
    }
    return bestScore;
}
    256e:	c8 01       	movw	r24, r16
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	08 95       	ret

0000257a <__divmodhi4>:
    257a:	97 fb       	bst	r25, 7
    257c:	07 2e       	mov	r0, r23
    257e:	16 f4       	brtc	.+4      	; 0x2584 <__divmodhi4+0xa>
    2580:	00 94       	com	r0
    2582:	07 d0       	rcall	.+14     	; 0x2592 <__divmodhi4_neg1>
    2584:	77 fd       	sbrc	r23, 7
    2586:	09 d0       	rcall	.+18     	; 0x259a <__divmodhi4_neg2>
    2588:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__udivmodhi4>
    258c:	07 fc       	sbrc	r0, 7
    258e:	05 d0       	rcall	.+10     	; 0x259a <__divmodhi4_neg2>
    2590:	3e f4       	brtc	.+14     	; 0x25a0 <__divmodhi4_exit>

00002592 <__divmodhi4_neg1>:
    2592:	90 95       	com	r25
    2594:	81 95       	neg	r24
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	08 95       	ret

0000259a <__divmodhi4_neg2>:
    259a:	70 95       	com	r23
    259c:	61 95       	neg	r22
    259e:	7f 4f       	sbci	r23, 0xFF	; 255

000025a0 <__divmodhi4_exit>:
    25a0:	08 95       	ret

000025a2 <__divmodsi4>:
    25a2:	05 2e       	mov	r0, r21
    25a4:	97 fb       	bst	r25, 7
    25a6:	1e f4       	brtc	.+6      	; 0x25ae <__divmodsi4+0xc>
    25a8:	00 94       	com	r0
    25aa:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__negsi2>
    25ae:	57 fd       	sbrc	r21, 7
    25b0:	07 d0       	rcall	.+14     	; 0x25c0 <__divmodsi4_neg2>
    25b2:	0e 94 0f 13 	call	0x261e	; 0x261e <__udivmodsi4>
    25b6:	07 fc       	sbrc	r0, 7
    25b8:	03 d0       	rcall	.+6      	; 0x25c0 <__divmodsi4_neg2>
    25ba:	4e f4       	brtc	.+18     	; 0x25ce <__divmodsi4_exit>
    25bc:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__negsi2>

000025c0 <__divmodsi4_neg2>:
    25c0:	50 95       	com	r21
    25c2:	40 95       	com	r20
    25c4:	30 95       	com	r19
    25c6:	21 95       	neg	r18
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	4f 4f       	sbci	r20, 0xFF	; 255
    25cc:	5f 4f       	sbci	r21, 0xFF	; 255

000025ce <__divmodsi4_exit>:
    25ce:	08 95       	ret

000025d0 <__negsi2>:
    25d0:	90 95       	com	r25
    25d2:	80 95       	com	r24
    25d4:	70 95       	com	r23
    25d6:	61 95       	neg	r22
    25d8:	7f 4f       	sbci	r23, 0xFF	; 255
    25da:	8f 4f       	sbci	r24, 0xFF	; 255
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
    25de:	08 95       	ret

000025e0 <__muluhisi3>:
    25e0:	0e 94 31 13 	call	0x2662	; 0x2662 <__umulhisi3>
    25e4:	a5 9f       	mul	r26, r21
    25e6:	90 0d       	add	r25, r0
    25e8:	b4 9f       	mul	r27, r20
    25ea:	90 0d       	add	r25, r0
    25ec:	a4 9f       	mul	r26, r20
    25ee:	80 0d       	add	r24, r0
    25f0:	91 1d       	adc	r25, r1
    25f2:	11 24       	eor	r1, r1
    25f4:	08 95       	ret

000025f6 <__udivmodhi4>:
    25f6:	aa 1b       	sub	r26, r26
    25f8:	bb 1b       	sub	r27, r27
    25fa:	51 e1       	ldi	r21, 0x11	; 17
    25fc:	07 c0       	rjmp	.+14     	; 0x260c <__udivmodhi4_ep>

000025fe <__udivmodhi4_loop>:
    25fe:	aa 1f       	adc	r26, r26
    2600:	bb 1f       	adc	r27, r27
    2602:	a6 17       	cp	r26, r22
    2604:	b7 07       	cpc	r27, r23
    2606:	10 f0       	brcs	.+4      	; 0x260c <__udivmodhi4_ep>
    2608:	a6 1b       	sub	r26, r22
    260a:	b7 0b       	sbc	r27, r23

0000260c <__udivmodhi4_ep>:
    260c:	88 1f       	adc	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	5a 95       	dec	r21
    2612:	a9 f7       	brne	.-22     	; 0x25fe <__udivmodhi4_loop>
    2614:	80 95       	com	r24
    2616:	90 95       	com	r25
    2618:	bc 01       	movw	r22, r24
    261a:	cd 01       	movw	r24, r26
    261c:	08 95       	ret

0000261e <__udivmodsi4>:
    261e:	a1 e2       	ldi	r26, 0x21	; 33
    2620:	1a 2e       	mov	r1, r26
    2622:	aa 1b       	sub	r26, r26
    2624:	bb 1b       	sub	r27, r27
    2626:	fd 01       	movw	r30, r26
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <__udivmodsi4_ep>

0000262a <__udivmodsi4_loop>:
    262a:	aa 1f       	adc	r26, r26
    262c:	bb 1f       	adc	r27, r27
    262e:	ee 1f       	adc	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	a2 17       	cp	r26, r18
    2634:	b3 07       	cpc	r27, r19
    2636:	e4 07       	cpc	r30, r20
    2638:	f5 07       	cpc	r31, r21
    263a:	20 f0       	brcs	.+8      	; 0x2644 <__udivmodsi4_ep>
    263c:	a2 1b       	sub	r26, r18
    263e:	b3 0b       	sbc	r27, r19
    2640:	e4 0b       	sbc	r30, r20
    2642:	f5 0b       	sbc	r31, r21

00002644 <__udivmodsi4_ep>:
    2644:	66 1f       	adc	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	88 1f       	adc	r24, r24
    264a:	99 1f       	adc	r25, r25
    264c:	1a 94       	dec	r1
    264e:	69 f7       	brne	.-38     	; 0x262a <__udivmodsi4_loop>
    2650:	60 95       	com	r22
    2652:	70 95       	com	r23
    2654:	80 95       	com	r24
    2656:	90 95       	com	r25
    2658:	9b 01       	movw	r18, r22
    265a:	ac 01       	movw	r20, r24
    265c:	bd 01       	movw	r22, r26
    265e:	cf 01       	movw	r24, r30
    2660:	08 95       	ret

00002662 <__umulhisi3>:
    2662:	a2 9f       	mul	r26, r18
    2664:	b0 01       	movw	r22, r0
    2666:	b3 9f       	mul	r27, r19
    2668:	c0 01       	movw	r24, r0
    266a:	a3 9f       	mul	r26, r19
    266c:	70 0d       	add	r23, r0
    266e:	81 1d       	adc	r24, r1
    2670:	11 24       	eor	r1, r1
    2672:	91 1d       	adc	r25, r1
    2674:	b2 9f       	mul	r27, r18
    2676:	70 0d       	add	r23, r0
    2678:	81 1d       	adc	r24, r1
    267a:	11 24       	eor	r1, r1
    267c:	91 1d       	adc	r25, r1
    267e:	08 95       	ret

00002680 <_exit>:
    2680:	f8 94       	cli

00002682 <__stop_program>:
    2682:	ff cf       	rjmp	.-2      	; 0x2682 <__stop_program>
